// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module YOLO2_FPGA_input_load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_DATA_BUS_AWVALID,
        m_axi_DATA_BUS_AWREADY,
        m_axi_DATA_BUS_AWADDR,
        m_axi_DATA_BUS_AWID,
        m_axi_DATA_BUS_AWLEN,
        m_axi_DATA_BUS_AWSIZE,
        m_axi_DATA_BUS_AWBURST,
        m_axi_DATA_BUS_AWLOCK,
        m_axi_DATA_BUS_AWCACHE,
        m_axi_DATA_BUS_AWPROT,
        m_axi_DATA_BUS_AWQOS,
        m_axi_DATA_BUS_AWREGION,
        m_axi_DATA_BUS_AWUSER,
        m_axi_DATA_BUS_WVALID,
        m_axi_DATA_BUS_WREADY,
        m_axi_DATA_BUS_WDATA,
        m_axi_DATA_BUS_WSTRB,
        m_axi_DATA_BUS_WLAST,
        m_axi_DATA_BUS_WID,
        m_axi_DATA_BUS_WUSER,
        m_axi_DATA_BUS_ARVALID,
        m_axi_DATA_BUS_ARREADY,
        m_axi_DATA_BUS_ARADDR,
        m_axi_DATA_BUS_ARID,
        m_axi_DATA_BUS_ARLEN,
        m_axi_DATA_BUS_ARSIZE,
        m_axi_DATA_BUS_ARBURST,
        m_axi_DATA_BUS_ARLOCK,
        m_axi_DATA_BUS_ARCACHE,
        m_axi_DATA_BUS_ARPROT,
        m_axi_DATA_BUS_ARQOS,
        m_axi_DATA_BUS_ARREGION,
        m_axi_DATA_BUS_ARUSER,
        m_axi_DATA_BUS_RVALID,
        m_axi_DATA_BUS_RREADY,
        m_axi_DATA_BUS_RDATA,
        m_axi_DATA_BUS_RLAST,
        m_axi_DATA_BUS_RID,
        m_axi_DATA_BUS_RUSER,
        m_axi_DATA_BUS_RRESP,
        m_axi_DATA_BUS_BVALID,
        m_axi_DATA_BUS_BREADY,
        m_axi_DATA_BUS_BRESP,
        m_axi_DATA_BUS_BID,
        m_axi_DATA_BUS_BUSER,
        input_r,
        input_buffer_0_address0,
        input_buffer_0_ce0,
        input_buffer_0_we0,
        input_buffer_0_d0,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_we0,
        input_buffer_1_d0,
        r,
        c,
        n,
        Kernel_stride,
        Padding,
        TRow,
        TCol,
        Input_w,
        Input_h,
        TN_MIN,
        IHxIW
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_pp0_stage0 = 10'd128;
parameter    ap_ST_fsm_pp0_stage1 = 10'd256;
parameter    ap_ST_fsm_state15 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_DATA_BUS_AWVALID;
input   m_axi_DATA_BUS_AWREADY;
output  [63:0] m_axi_DATA_BUS_AWADDR;
output  [0:0] m_axi_DATA_BUS_AWID;
output  [31:0] m_axi_DATA_BUS_AWLEN;
output  [2:0] m_axi_DATA_BUS_AWSIZE;
output  [1:0] m_axi_DATA_BUS_AWBURST;
output  [1:0] m_axi_DATA_BUS_AWLOCK;
output  [3:0] m_axi_DATA_BUS_AWCACHE;
output  [2:0] m_axi_DATA_BUS_AWPROT;
output  [3:0] m_axi_DATA_BUS_AWQOS;
output  [3:0] m_axi_DATA_BUS_AWREGION;
output  [0:0] m_axi_DATA_BUS_AWUSER;
output   m_axi_DATA_BUS_WVALID;
input   m_axi_DATA_BUS_WREADY;
output  [31:0] m_axi_DATA_BUS_WDATA;
output  [3:0] m_axi_DATA_BUS_WSTRB;
output   m_axi_DATA_BUS_WLAST;
output  [0:0] m_axi_DATA_BUS_WID;
output  [0:0] m_axi_DATA_BUS_WUSER;
output   m_axi_DATA_BUS_ARVALID;
input   m_axi_DATA_BUS_ARREADY;
output  [63:0] m_axi_DATA_BUS_ARADDR;
output  [0:0] m_axi_DATA_BUS_ARID;
output  [31:0] m_axi_DATA_BUS_ARLEN;
output  [2:0] m_axi_DATA_BUS_ARSIZE;
output  [1:0] m_axi_DATA_BUS_ARBURST;
output  [1:0] m_axi_DATA_BUS_ARLOCK;
output  [3:0] m_axi_DATA_BUS_ARCACHE;
output  [2:0] m_axi_DATA_BUS_ARPROT;
output  [3:0] m_axi_DATA_BUS_ARQOS;
output  [3:0] m_axi_DATA_BUS_ARREGION;
output  [0:0] m_axi_DATA_BUS_ARUSER;
input   m_axi_DATA_BUS_RVALID;
output   m_axi_DATA_BUS_RREADY;
input  [31:0] m_axi_DATA_BUS_RDATA;
input   m_axi_DATA_BUS_RLAST;
input  [0:0] m_axi_DATA_BUS_RID;
input  [0:0] m_axi_DATA_BUS_RUSER;
input  [1:0] m_axi_DATA_BUS_RRESP;
input   m_axi_DATA_BUS_BVALID;
output   m_axi_DATA_BUS_BREADY;
input  [1:0] m_axi_DATA_BUS_BRESP;
input  [0:0] m_axi_DATA_BUS_BID;
input  [0:0] m_axi_DATA_BUS_BUSER;
input  [63:0] input_r;
output  [11:0] input_buffer_0_address0;
output   input_buffer_0_ce0;
output   input_buffer_0_we0;
output  [15:0] input_buffer_0_d0;
output  [11:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
output   input_buffer_1_we0;
output  [15:0] input_buffer_1_d0;
input  [8:0] r;
input  [8:0] c;
input  [10:0] n;
input  [1:0] Kernel_stride;
input  [0:0] Padding;
input  [5:0] TRow;
input  [5:0] TCol;
input  [31:0] Input_w;
input  [8:0] Input_h;
input  [5:0] TN_MIN;
input  [17:0] IHxIW;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_DATA_BUS_ARVALID;
reg m_axi_DATA_BUS_RREADY;
reg[11:0] input_buffer_0_address0;
reg input_buffer_0_ce0;
reg input_buffer_0_we0;
reg[15:0] input_buffer_0_d0;
reg[11:0] input_buffer_1_address0;
reg input_buffer_1_ce0;
reg input_buffer_1_we0;
reg[15:0] input_buffer_1_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] input_memcpy_buffer_address0;
reg    input_memcpy_buffer_ce0;
reg    input_memcpy_buffer_we0;
wire   [31:0] input_memcpy_buffer_q0;
reg   [17:0] indvar_flatten31_reg_255;
reg   [11:0] indvar_flatten_reg_267;
reg   [5:0] t2_V_reg_279;
reg   [5:0] t3_V_2_reg_291;
reg   [31:0] RowBeginByteIndex_reg_303;
reg   [31:0] input_mmcpy_offset_reg_314;
reg   [5:0] t1_V_reg_326;
wire   [8:0] empty_fu_382_p1;
reg   [8:0] empty_reg_884;
wire   [0:0] notrhs_fu_387_p2;
reg   [0:0] notrhs_reg_889;
wire   [1:0] RowSub_2b_fu_409_p1;
reg   [1:0] RowSub_2b_reg_895;
wire    ap_CS_fsm_state2;
wire   [1:0] ColSub_2b_fu_413_p1;
reg   [1:0] ColSub_2b_reg_900;
wire   [5:0] empty_97_fu_417_p1;
reg   [5:0] empty_97_reg_905;
wire   [5:0] empty_98_fu_421_p1;
reg   [5:0] empty_98_reg_912;
wire   [11:0] bound_fu_431_p2;
reg   [11:0] bound_reg_917;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [5:0] RowSub_2b_cast_fu_443_p1;
reg   [5:0] RowSub_2b_cast_reg_933;
wire    ap_CS_fsm_state7;
wire   [6:0] rhs_7_fu_446_p1;
reg   [6:0] rhs_7_reg_940;
wire   [17:0] grp_fu_788_p2;
reg   [17:0] bound4_reg_945;
wire   [0:0] icmp_ln174_fu_449_p2;
reg   [0:0] icmp_ln174_reg_950;
wire   [0:0] icmp_ln172_fu_454_p2;
reg   [0:0] icmp_ln172_reg_955;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state14_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln172_reg_955_pp0_iter1_reg;
reg   [0:0] icmp_ln172_reg_955_pp0_iter2_reg;
wire   [0:0] icmp_ln173_fu_459_p2;
reg   [0:0] icmp_ln173_reg_959;
reg   [0:0] icmp_ln173_reg_959_pp0_iter1_reg;
reg   [0:0] icmp_ln173_reg_959_pp0_iter2_reg;
wire   [17:0] add_ln172_fu_464_p2;
reg   [17:0] add_ln172_reg_970;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [5:0] select_ln162_fu_470_p3;
reg   [5:0] select_ln162_reg_975;
wire   [0:0] icmp_ln174_1_fu_477_p2;
reg   [0:0] icmp_ln174_1_reg_980;
wire   [5:0] t2_V_2_fu_482_p2;
reg   [5:0] t2_V_2_reg_985;
wire   [11:0] select_ln173_1_fu_494_p3;
reg   [11:0] select_ln173_1_reg_992;
wire   [0:0] notlhs_fu_506_p2;
reg   [0:0] notlhs_reg_997;
wire   [0:0] select_ln162_3_fu_518_p3;
reg   [0:0] select_ln162_3_reg_1002;
wire   [5:0] select_ln162_4_fu_528_p3;
reg   [5:0] select_ln162_4_reg_1007;
wire   [5:0] select_ln173_fu_552_p3;
reg   [5:0] select_ln173_reg_1018;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] t3_V_fu_558_p2;
reg   [5:0] t3_V_reg_1023;
wire   [0:0] sel_tmp_fu_621_p2;
reg   [0:0] sel_tmp_reg_1033;
wire   [31:0] input_mmcpy_offset_2_fu_640_p2;
reg   [31:0] input_mmcpy_offset_2_reg_1043;
wire   [0:0] sel_tmp5_fu_652_p2;
reg   [0:0] sel_tmp5_reg_1048;
wire   [31:0] RowBeginByteIndex_4_fu_658_p3;
reg   [31:0] RowBeginByteIndex_4_reg_1056;
wire   [15:0] input_array_1_1_fu_696_p3;
reg   [15:0] input_array_1_1_reg_1061;
wire   [15:0] input_array_0_1_fu_703_p3;
reg   [15:0] input_array_0_1_reg_1066;
wire   [0:0] NextInputFlag_1_fu_710_p3;
reg   [0:0] NextInputFlag_1_reg_1071;
wire   [31:0] input_mmcpy_offset_3_fu_717_p3;
reg   [31:0] input_mmcpy_offset_3_reg_1076;
reg    ap_enable_reg_pp0_iter2;
wire   [5:0] select_ln162_1_fu_767_p3;
reg   [5:0] select_ln162_1_reg_1086;
wire   [0:0] trunc_ln162_fu_774_p1;
reg   [0:0] trunc_ln162_reg_1091;
wire   [15:0] select_ln195_fu_778_p3;
reg   [15:0] select_ln195_reg_1095;
wire   [11:0] grp_fu_794_p3;
reg   [11:0] add_ln195_reg_1101;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state13;
reg    ap_enable_reg_pp0_iter3;
reg   [6:0] RowBeginByte_address0;
reg    RowBeginByte_ce0;
reg    RowBeginByte_we0;
wire   [0:0] RowBeginByte_q0;
wire    grp_input_pixel_load_fu_337_ap_start;
wire    grp_input_pixel_load_fu_337_ap_done;
wire    grp_input_pixel_load_fu_337_ap_idle;
wire    grp_input_pixel_load_fu_337_ap_ready;
wire    grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWVALID;
wire   [63:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWADDR;
wire   [0:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWID;
wire   [31:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWLEN;
wire   [2:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWSIZE;
wire   [1:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWBURST;
wire   [1:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWLOCK;
wire   [3:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWCACHE;
wire   [2:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWPROT;
wire   [3:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWQOS;
wire   [3:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWREGION;
wire   [0:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWUSER;
wire    grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WVALID;
wire   [31:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WDATA;
wire   [3:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WSTRB;
wire    grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WLAST;
wire   [0:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WID;
wire   [0:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WUSER;
wire    grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARVALID;
wire   [63:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARADDR;
wire   [0:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARID;
wire   [31:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARLEN;
wire   [2:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARSIZE;
wire   [1:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARBURST;
wire   [1:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARLOCK;
wire   [3:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARCACHE;
wire   [2:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARPROT;
wire   [3:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARQOS;
wire   [3:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARREGION;
wire   [0:0] grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARUSER;
wire    grp_input_pixel_load_fu_337_m_axi_DATA_BUS_RREADY;
wire    grp_input_pixel_load_fu_337_m_axi_DATA_BUS_BREADY;
wire   [6:0] grp_input_pixel_load_fu_337_RowBeginByte_address0;
wire    grp_input_pixel_load_fu_337_RowBeginByte_ce0;
wire    grp_input_pixel_load_fu_337_RowBeginByte_we0;
wire   [0:0] grp_input_pixel_load_fu_337_RowBeginByte_d0;
wire   [11:0] grp_input_pixel_load_fu_337_input_memcpy_buffer_address0;
wire    grp_input_pixel_load_fu_337_input_memcpy_buffer_ce0;
wire    grp_input_pixel_load_fu_337_input_memcpy_buffer_we0;
wire   [31:0] grp_input_pixel_load_fu_337_input_memcpy_buffer_d0;
wire   [31:0] grp_input_pixel_load_fu_337_ap_return_0;
wire   [31:0] grp_input_pixel_load_fu_337_ap_return_1;
wire   [31:0] grp_input_pixel_load_fu_337_ap_return_2;
wire   [31:0] grp_input_pixel_load_fu_337_ap_return_3;
wire    grp_clear_input_buffer_fu_370_ap_start;
wire    grp_clear_input_buffer_fu_370_ap_done;
wire    grp_clear_input_buffer_fu_370_ap_idle;
wire    grp_clear_input_buffer_fu_370_ap_ready;
wire   [11:0] grp_clear_input_buffer_fu_370_input_buffer_0_address0;
wire    grp_clear_input_buffer_fu_370_input_buffer_0_ce0;
wire    grp_clear_input_buffer_fu_370_input_buffer_0_we0;
wire   [15:0] grp_clear_input_buffer_fu_370_input_buffer_0_d0;
wire   [11:0] grp_clear_input_buffer_fu_370_input_buffer_1_address0;
wire    grp_clear_input_buffer_fu_370_input_buffer_1_ce0;
wire    grp_clear_input_buffer_fu_370_input_buffer_1_we0;
wire   [15:0] grp_clear_input_buffer_fu_370_input_buffer_1_d0;
reg   [17:0] ap_phi_mux_indvar_flatten31_phi_fu_259_p4;
wire    ap_block_pp0_stage0;
reg   [11:0] ap_phi_mux_indvar_flatten_phi_fu_271_p4;
reg   [5:0] ap_phi_mux_t2_V_phi_fu_283_p4;
wire    ap_block_pp0_stage1;
reg   [5:0] ap_phi_mux_t3_V_2_phi_fu_295_p4;
reg   [31:0] ap_phi_mux_RowBeginByteIndex_phi_fu_307_p4;
reg   [31:0] ap_phi_mux_input_mmcpy_offset_phi_fu_318_p4;
reg    grp_input_pixel_load_fu_337_ap_start_reg;
reg    grp_clear_input_buffer_fu_370_ap_start_reg;
wire   [63:0] zext_ln182_fu_610_p1;
wire   [63:0] zext_ln189_fu_635_p1;
wire   [63:0] zext_ln195_2_fu_783_p1;
reg   [0:0] cnt_V_fu_112;
wire   [0:0] cnt_V_4_fu_750_p2;
reg   [0:0] NextInputFlag_fu_116;
reg   [15:0] input_array_0_fu_120;
reg   [15:0] input_array_1_2_fu_124;
wire   [5:0] bound_fu_431_p0;
wire   [5:0] bound_fu_431_p1;
wire   [11:0] add_ln173_fu_488_p2;
wire   [5:0] ret_fu_501_p2;
wire   [0:0] or_ln162_fu_523_p2;
wire   [5:0] ret_mid1_fu_536_p2;
wire   [5:0] select_ln162_2_fu_512_p3;
wire   [5:0] select_ln162_5_fu_540_p3;
wire   [0:0] brmerge39_not_i_fu_564_p2;
wire   [0:0] xor_ln162_fu_571_p2;
wire   [0:0] notlhs_mid1_fu_582_p2;
wire   [0:0] brmerge39_not_i_mid1_fu_587_p2;
wire   [0:0] and_ln162_fu_576_p2;
wire   [0:0] select_ln162_6_fu_592_p3;
wire   [0:0] icmp_ln180_fu_599_p2;
wire   [0:0] or_ln180_fu_604_p2;
wire   [31:0] RowBeginByteIndex_2_fu_615_p2;
wire   [0:0] sel_tmp4_fu_646_p2;
wire   [31:0] RowBeginByteIndex_3_fu_627_p3;
wire   [15:0] input_array_1_fu_686_p4;
wire   [15:0] input_array_0_2_fu_682_p1;
wire   [0:0] cnt_V_2_fu_675_p3;
wire   [6:0] zext_ln215_fu_723_p1;
wire   [6:0] ret_19_fu_726_p2;
wire   [5:0] t1_V_5_fu_761_p2;
wire   [5:0] grp_fu_788_p0;
wire   [11:0] grp_fu_788_p1;
wire   [5:0] grp_fu_794_p0;
wire   [6:0] grp_fu_794_p1;
wire   [6:0] grp_fu_794_p2;
wire    ap_CS_fsm_state15;
reg   [9:0] ap_NS_fsm;
reg    ap_block_state2_on_subcall_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] bound_fu_431_p00;
wire   [11:0] bound_fu_431_p10;
wire   [17:0] grp_fu_788_p00;
wire   [17:0] grp_fu_788_p10;
wire   [11:0] grp_fu_794_p00;
wire   [11:0] grp_fu_794_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 grp_input_pixel_load_fu_337_ap_start_reg = 1'b0;
#0 grp_clear_input_buffer_fu_370_ap_start_reg = 1'b0;
end

YOLO2_FPGA_input_load_input_memcpy_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 2915 ),
    .AddressWidth( 12 ))
input_memcpy_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_memcpy_buffer_address0),
    .ce0(input_memcpy_buffer_ce0),
    .we0(input_memcpy_buffer_we0),
    .d0(grp_input_pixel_load_fu_337_input_memcpy_buffer_d0),
    .q0(input_memcpy_buffer_q0)
);

YOLO2_FPGA_input_load_RowBeginByte #(
    .DataWidth( 1 ),
    .AddressRange( 106 ),
    .AddressWidth( 7 ))
RowBeginByte_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RowBeginByte_address0),
    .ce0(RowBeginByte_ce0),
    .we0(RowBeginByte_we0),
    .d0(grp_input_pixel_load_fu_337_RowBeginByte_d0),
    .q0(RowBeginByte_q0)
);

YOLO2_FPGA_input_pixel_load grp_input_pixel_load_fu_337(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_input_pixel_load_fu_337_ap_start),
    .ap_done(grp_input_pixel_load_fu_337_ap_done),
    .ap_idle(grp_input_pixel_load_fu_337_ap_idle),
    .ap_ready(grp_input_pixel_load_fu_337_ap_ready),
    .m_axi_DATA_BUS_AWVALID(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWVALID),
    .m_axi_DATA_BUS_AWREADY(1'b0),
    .m_axi_DATA_BUS_AWADDR(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWADDR),
    .m_axi_DATA_BUS_AWID(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWID),
    .m_axi_DATA_BUS_AWLEN(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWLEN),
    .m_axi_DATA_BUS_AWSIZE(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWSIZE),
    .m_axi_DATA_BUS_AWBURST(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWBURST),
    .m_axi_DATA_BUS_AWLOCK(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWLOCK),
    .m_axi_DATA_BUS_AWCACHE(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWCACHE),
    .m_axi_DATA_BUS_AWPROT(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWPROT),
    .m_axi_DATA_BUS_AWQOS(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWQOS),
    .m_axi_DATA_BUS_AWREGION(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWREGION),
    .m_axi_DATA_BUS_AWUSER(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_AWUSER),
    .m_axi_DATA_BUS_WVALID(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WVALID),
    .m_axi_DATA_BUS_WREADY(1'b0),
    .m_axi_DATA_BUS_WDATA(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WDATA),
    .m_axi_DATA_BUS_WSTRB(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WSTRB),
    .m_axi_DATA_BUS_WLAST(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WLAST),
    .m_axi_DATA_BUS_WID(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WID),
    .m_axi_DATA_BUS_WUSER(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_WUSER),
    .m_axi_DATA_BUS_ARVALID(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARVALID),
    .m_axi_DATA_BUS_ARREADY(m_axi_DATA_BUS_ARREADY),
    .m_axi_DATA_BUS_ARADDR(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARADDR),
    .m_axi_DATA_BUS_ARID(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARID),
    .m_axi_DATA_BUS_ARLEN(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARLEN),
    .m_axi_DATA_BUS_ARSIZE(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARSIZE),
    .m_axi_DATA_BUS_ARBURST(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARBURST),
    .m_axi_DATA_BUS_ARLOCK(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARLOCK),
    .m_axi_DATA_BUS_ARCACHE(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARCACHE),
    .m_axi_DATA_BUS_ARPROT(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARPROT),
    .m_axi_DATA_BUS_ARQOS(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARQOS),
    .m_axi_DATA_BUS_ARREGION(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARREGION),
    .m_axi_DATA_BUS_ARUSER(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARUSER),
    .m_axi_DATA_BUS_RVALID(m_axi_DATA_BUS_RVALID),
    .m_axi_DATA_BUS_RREADY(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_RREADY),
    .m_axi_DATA_BUS_RDATA(m_axi_DATA_BUS_RDATA),
    .m_axi_DATA_BUS_RLAST(m_axi_DATA_BUS_RLAST),
    .m_axi_DATA_BUS_RID(m_axi_DATA_BUS_RID),
    .m_axi_DATA_BUS_RUSER(m_axi_DATA_BUS_RUSER),
    .m_axi_DATA_BUS_RRESP(m_axi_DATA_BUS_RRESP),
    .m_axi_DATA_BUS_BVALID(1'b0),
    .m_axi_DATA_BUS_BREADY(grp_input_pixel_load_fu_337_m_axi_DATA_BUS_BREADY),
    .m_axi_DATA_BUS_BRESP(2'd0),
    .m_axi_DATA_BUS_BID(1'd0),
    .m_axi_DATA_BUS_BUSER(1'd0),
    .input_r(input_r),
    .r(r),
    .c(c),
    .n(n),
    .Kernel_stride(Kernel_stride),
    .Padding(Padding),
    .TRow(TRow),
    .TCol(TCol),
    .Input_w(empty_reg_884),
    .Input_h(Input_h),
    .TN_MIN(TN_MIN),
    .IHxIW(IHxIW),
    .RowBeginByte_address0(grp_input_pixel_load_fu_337_RowBeginByte_address0),
    .RowBeginByte_ce0(grp_input_pixel_load_fu_337_RowBeginByte_ce0),
    .RowBeginByte_we0(grp_input_pixel_load_fu_337_RowBeginByte_we0),
    .RowBeginByte_d0(grp_input_pixel_load_fu_337_RowBeginByte_d0),
    .input_memcpy_buffer_address0(grp_input_pixel_load_fu_337_input_memcpy_buffer_address0),
    .input_memcpy_buffer_ce0(grp_input_pixel_load_fu_337_input_memcpy_buffer_ce0),
    .input_memcpy_buffer_we0(grp_input_pixel_load_fu_337_input_memcpy_buffer_we0),
    .input_memcpy_buffer_d0(grp_input_pixel_load_fu_337_input_memcpy_buffer_d0),
    .ap_return_0(grp_input_pixel_load_fu_337_ap_return_0),
    .ap_return_1(grp_input_pixel_load_fu_337_ap_return_1),
    .ap_return_2(grp_input_pixel_load_fu_337_ap_return_2),
    .ap_return_3(grp_input_pixel_load_fu_337_ap_return_3)
);

YOLO2_FPGA_clear_input_buffer grp_clear_input_buffer_fu_370(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_clear_input_buffer_fu_370_ap_start),
    .ap_done(grp_clear_input_buffer_fu_370_ap_done),
    .ap_idle(grp_clear_input_buffer_fu_370_ap_idle),
    .ap_ready(grp_clear_input_buffer_fu_370_ap_ready),
    .input_buffer_0_address0(grp_clear_input_buffer_fu_370_input_buffer_0_address0),
    .input_buffer_0_ce0(grp_clear_input_buffer_fu_370_input_buffer_0_ce0),
    .input_buffer_0_we0(grp_clear_input_buffer_fu_370_input_buffer_0_we0),
    .input_buffer_0_d0(grp_clear_input_buffer_fu_370_input_buffer_0_d0),
    .input_buffer_1_address0(grp_clear_input_buffer_fu_370_input_buffer_1_address0),
    .input_buffer_1_ce0(grp_clear_input_buffer_fu_370_input_buffer_1_ce0),
    .input_buffer_1_we0(grp_clear_input_buffer_fu_370_input_buffer_1_we0),
    .input_buffer_1_d0(grp_clear_input_buffer_fu_370_input_buffer_1_d0),
    .TRow(TRow),
    .TCol(TCol)
);

YOLO2_FPGA_mul_6ns_6ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mul_6ns_6ns_12_1_1_U31(
    .din0(bound_fu_431_p0),
    .din1(bound_fu_431_p1),
    .dout(bound_fu_431_p2)
);

YOLO2_FPGA_mul_mul_6ns_12ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 18 ))
mul_mul_6ns_12ns_18_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_788_p0),
    .din1(grp_fu_788_p1),
    .ce(1'b1),
    .dout(grp_fu_788_p2)
);

YOLO2_FPGA_mac_muladd_6ns_7ns_7ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_7ns_7ns_12_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_794_p0),
    .din1(grp_fu_794_p1),
    .din2(grp_fu_794_p2),
    .ce(1'b1),
    .dout(grp_fu_794_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state13) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state13) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_clear_input_buffer_fu_370_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_clear_input_buffer_fu_370_ap_start_reg <= 1'b1;
        end else if ((grp_clear_input_buffer_fu_370_ap_ready == 1'b1)) begin
            grp_clear_input_buffer_fu_370_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_input_pixel_load_fu_337_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_input_pixel_load_fu_337_ap_start_reg <= 1'b1;
        end else if ((grp_input_pixel_load_fu_337_ap_ready == 1'b1)) begin
            grp_input_pixel_load_fu_337_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln172_reg_955_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        RowBeginByteIndex_reg_303 <= RowBeginByteIndex_4_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RowBeginByteIndex_reg_303 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten31_reg_255 <= add_ln172_reg_970;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten31_reg_255 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_267 <= select_ln173_1_reg_992;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_267 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln172_reg_955_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_mmcpy_offset_reg_314 <= input_mmcpy_offset_3_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_mmcpy_offset_reg_314 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln172_reg_955_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t1_V_reg_326 <= select_ln162_1_reg_1086;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t1_V_reg_326 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t2_V_reg_279 <= select_ln173_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t2_V_reg_279 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t3_V_2_reg_291 <= t3_V_reg_1023;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t3_V_2_reg_291 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ColSub_2b_reg_900 <= ColSub_2b_fu_413_p1;
        RowSub_2b_reg_895 <= RowSub_2b_fu_409_p1;
        empty_97_reg_905 <= empty_97_fu_417_p1;
        empty_98_reg_912 <= empty_98_fu_421_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        NextInputFlag_1_reg_1071 <= NextInputFlag_1_fu_710_p3;
        input_array_0_1_reg_1066 <= input_array_0_1_fu_703_p3;
        input_array_1_1_reg_1061 <= input_array_1_1_fu_696_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        NextInputFlag_fu_116 <= NextInputFlag_1_fu_710_p3;
        cnt_V_fu_112 <= cnt_V_4_fu_750_p2;
        input_array_0_fu_120 <= input_array_0_1_fu_703_p3;
        input_array_1_2_fu_124 <= input_array_1_1_fu_696_p3;
        input_mmcpy_offset_3_reg_1076 <= input_mmcpy_offset_3_fu_717_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        RowBeginByteIndex_4_reg_1056 <= RowBeginByteIndex_4_fu_658_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RowSub_2b_cast_reg_933[1 : 0] <= RowSub_2b_cast_fu_443_p1[1 : 0];
        bound4_reg_945 <= grp_fu_788_p2;
        icmp_ln174_reg_950 <= icmp_ln174_fu_449_p2;
        rhs_7_reg_940[1 : 0] <= rhs_7_fu_446_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln172_reg_970 <= add_ln172_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln172_reg_955_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln195_reg_1101 <= grp_fu_794_p3;
        select_ln162_1_reg_1086 <= select_ln162_1_fu_767_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound_reg_917 <= bound_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_884 <= empty_fu_382_p1;
        notrhs_reg_889 <= notrhs_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln172_reg_955 <= icmp_ln172_fu_454_p2;
        icmp_ln172_reg_955_pp0_iter1_reg <= icmp_ln172_reg_955;
        icmp_ln172_reg_955_pp0_iter2_reg <= icmp_ln172_reg_955_pp0_iter1_reg;
        icmp_ln173_reg_959_pp0_iter1_reg <= icmp_ln173_reg_959;
        icmp_ln173_reg_959_pp0_iter2_reg <= icmp_ln173_reg_959_pp0_iter1_reg;
        notlhs_reg_997 <= notlhs_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_fu_454_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln173_reg_959 <= icmp_ln173_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_reg_959 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln174_1_reg_980 <= icmp_ln174_1_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_mmcpy_offset_2_reg_1043 <= input_mmcpy_offset_2_fu_640_p2;
        sel_tmp5_reg_1048 <= sel_tmp5_fu_652_p2;
        sel_tmp_reg_1033 <= sel_tmp_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln162_3_reg_1002 <= select_ln162_3_fu_518_p3;
        select_ln162_4_reg_1007 <= select_ln162_4_fu_528_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln162_reg_975 <= select_ln162_fu_470_p3;
        t2_V_2_reg_985 <= t2_V_2_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln173_1_reg_992 <= select_ln173_1_fu_494_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln173_reg_1018 <= select_ln173_fu_552_p3;
        t3_V_reg_1023 <= t3_V_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_955_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln195_reg_1095 <= select_ln195_fu_778_p3;
        trunc_ln162_reg_1091 <= trunc_ln162_fu_774_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        RowBeginByte_address0 = zext_ln182_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RowBeginByte_address0 = grp_input_pixel_load_fu_337_RowBeginByte_address0;
    end else begin
        RowBeginByte_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        RowBeginByte_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RowBeginByte_ce0 = grp_input_pixel_load_fu_337_RowBeginByte_ce0;
    end else begin
        RowBeginByte_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RowBeginByte_we0 = grp_input_pixel_load_fu_337_RowBeginByte_we0;
    end else begin
        RowBeginByte_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln172_reg_955 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln172_reg_955_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_RowBeginByteIndex_phi_fu_307_p4 = RowBeginByteIndex_4_reg_1056;
    end else begin
        ap_phi_mux_RowBeginByteIndex_phi_fu_307_p4 = RowBeginByteIndex_reg_303;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten31_phi_fu_259_p4 = add_ln172_reg_970;
    end else begin
        ap_phi_mux_indvar_flatten31_phi_fu_259_p4 = indvar_flatten31_reg_255;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln172_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_271_p4 = select_ln173_1_reg_992;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_271_p4 = indvar_flatten_reg_267;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln172_reg_955_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_input_mmcpy_offset_phi_fu_318_p4 = input_mmcpy_offset_3_reg_1076;
    end else begin
        ap_phi_mux_input_mmcpy_offset_phi_fu_318_p4 = input_mmcpy_offset_reg_314;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_t2_V_phi_fu_283_p4 = select_ln173_reg_1018;
    end else begin
        ap_phi_mux_t2_V_phi_fu_283_p4 = t2_V_reg_279;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln172_reg_955_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_t3_V_2_phi_fu_295_p4 = t3_V_reg_1023;
    end else begin
        ap_phi_mux_t3_V_2_phi_fu_295_p4 = t3_V_2_reg_291;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_0_address0 = zext_ln195_2_fu_783_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_0_address0 = grp_clear_input_buffer_fu_370_input_buffer_0_address0;
    end else begin
        input_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_0_ce0 = grp_clear_input_buffer_fu_370_input_buffer_0_ce0;
    end else begin
        input_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_0_d0 = select_ln195_reg_1095;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_0_d0 = grp_clear_input_buffer_fu_370_input_buffer_0_d0;
    end else begin
        input_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln162_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_0_we0 = grp_clear_input_buffer_fu_370_input_buffer_0_we0;
    end else begin
        input_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_address0 = zext_ln195_2_fu_783_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_1_address0 = grp_clear_input_buffer_fu_370_input_buffer_1_address0;
    end else begin
        input_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_1_ce0 = grp_clear_input_buffer_fu_370_input_buffer_1_ce0;
    end else begin
        input_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_d0 = select_ln195_reg_1095;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_1_d0 = grp_clear_input_buffer_fu_370_input_buffer_1_d0;
    end else begin
        input_buffer_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln162_reg_1091 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buffer_1_we0 = grp_clear_input_buffer_fu_370_input_buffer_1_we0;
    end else begin
        input_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_memcpy_buffer_address0 = zext_ln189_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_memcpy_buffer_address0 = grp_input_pixel_load_fu_337_input_memcpy_buffer_address0;
    end else begin
        input_memcpy_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_memcpy_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_memcpy_buffer_ce0 = grp_input_pixel_load_fu_337_input_memcpy_buffer_ce0;
    end else begin
        input_memcpy_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_memcpy_buffer_we0 = grp_input_pixel_load_fu_337_input_memcpy_buffer_we0;
    end else begin
        input_memcpy_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_DATA_BUS_ARVALID = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARVALID;
    end else begin
        m_axi_DATA_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_DATA_BUS_RREADY = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_RREADY;
    end else begin
        m_axi_DATA_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ColSub_2b_fu_413_p1 = grp_input_pixel_load_fu_337_ap_return_3[1:0];

assign NextInputFlag_1_fu_710_p3 = ((sel_tmp5_reg_1048[0:0] == 1'b1) ? cnt_V_fu_112 : cnt_V_2_fu_675_p3);

assign RowBeginByteIndex_2_fu_615_p2 = (ap_phi_mux_RowBeginByteIndex_phi_fu_307_p4 + 32'd1);

assign RowBeginByteIndex_3_fu_627_p3 = ((sel_tmp_fu_621_p2[0:0] == 1'b1) ? ap_phi_mux_RowBeginByteIndex_phi_fu_307_p4 : RowBeginByteIndex_2_fu_615_p2);

assign RowBeginByteIndex_4_fu_658_p3 = ((sel_tmp5_fu_652_p2[0:0] == 1'b1) ? ap_phi_mux_RowBeginByteIndex_phi_fu_307_p4 : RowBeginByteIndex_3_fu_627_p3);

assign RowSub_2b_cast_fu_443_p1 = RowSub_2b_reg_895;

assign RowSub_2b_fu_409_p1 = grp_input_pixel_load_fu_337_ap_return_2[1:0];

assign add_ln172_fu_464_p2 = (indvar_flatten31_reg_255 + 18'd1);

assign add_ln173_fu_488_p2 = (indvar_flatten_reg_267 + 12'd1);

assign and_ln162_fu_576_p2 = (xor_ln162_fu_571_p2 & brmerge39_not_i_fu_564_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_clear_input_buffer_fu_370_ap_done == 1'b0) | (grp_input_pixel_load_fu_337_ap_done == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_431_p0 = bound_fu_431_p00;

assign bound_fu_431_p00 = empty_98_reg_912;

assign bound_fu_431_p1 = bound_fu_431_p10;

assign bound_fu_431_p10 = empty_97_reg_905;

assign brmerge39_not_i_fu_564_p2 = (notrhs_reg_889 & notlhs_reg_997);

assign brmerge39_not_i_mid1_fu_587_p2 = (notrhs_reg_889 & notlhs_mid1_fu_582_p2);

assign cnt_V_2_fu_675_p3 = ((sel_tmp_reg_1033[0:0] == 1'b1) ? cnt_V_fu_112 : RowBeginByte_q0);

assign cnt_V_4_fu_750_p2 = (1'd1 ^ NextInputFlag_1_fu_710_p3);

assign empty_97_fu_417_p1 = grp_input_pixel_load_fu_337_ap_return_1[5:0];

assign empty_98_fu_421_p1 = grp_input_pixel_load_fu_337_ap_return_0[5:0];

assign empty_fu_382_p1 = Input_w[8:0];

assign grp_clear_input_buffer_fu_370_ap_start = grp_clear_input_buffer_fu_370_ap_start_reg;

assign grp_fu_788_p0 = grp_fu_788_p00;

assign grp_fu_788_p00 = TN_MIN;

assign grp_fu_788_p1 = grp_fu_788_p10;

assign grp_fu_788_p10 = bound_reg_917;

assign grp_fu_794_p0 = grp_fu_794_p00;

assign grp_fu_794_p00 = select_ln162_5_fu_540_p3;

assign grp_fu_794_p1 = 12'd53;

assign grp_fu_794_p2 = grp_fu_794_p20;

assign grp_fu_794_p20 = ret_19_fu_726_p2;

assign grp_input_pixel_load_fu_337_ap_start = grp_input_pixel_load_fu_337_ap_start_reg;

assign icmp_ln172_fu_454_p2 = ((ap_phi_mux_indvar_flatten31_phi_fu_259_p4 == bound4_reg_945) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_459_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_271_p4 == bound_reg_917) ? 1'b1 : 1'b0);

assign icmp_ln174_1_fu_477_p2 = ((ap_phi_mux_t3_V_2_phi_fu_295_p4 == empty_97_reg_905) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_449_p2 = ((empty_97_reg_905 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_599_p2 = ((select_ln162_4_reg_1007 != 6'd0) ? 1'b1 : 1'b0);

assign input_array_0_1_fu_703_p3 = ((sel_tmp5_reg_1048[0:0] == 1'b1) ? input_array_0_fu_120 : input_array_0_2_fu_682_p1);

assign input_array_0_2_fu_682_p1 = input_memcpy_buffer_q0[15:0];

assign input_array_1_1_fu_696_p3 = ((sel_tmp5_reg_1048[0:0] == 1'b1) ? input_array_1_2_fu_124 : input_array_1_fu_686_p4);

assign input_array_1_fu_686_p4 = {{input_memcpy_buffer_q0[31:16]}};

assign input_mmcpy_offset_2_fu_640_p2 = (ap_phi_mux_input_mmcpy_offset_phi_fu_318_p4 + 32'd1);

assign input_mmcpy_offset_3_fu_717_p3 = ((sel_tmp5_reg_1048[0:0] == 1'b1) ? input_mmcpy_offset_reg_314 : input_mmcpy_offset_2_reg_1043);

assign m_axi_DATA_BUS_ARADDR = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARADDR;

assign m_axi_DATA_BUS_ARBURST = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARBURST;

assign m_axi_DATA_BUS_ARCACHE = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARCACHE;

assign m_axi_DATA_BUS_ARID = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARID;

assign m_axi_DATA_BUS_ARLEN = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARLEN;

assign m_axi_DATA_BUS_ARLOCK = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARLOCK;

assign m_axi_DATA_BUS_ARPROT = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARPROT;

assign m_axi_DATA_BUS_ARQOS = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARQOS;

assign m_axi_DATA_BUS_ARREGION = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARREGION;

assign m_axi_DATA_BUS_ARSIZE = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARSIZE;

assign m_axi_DATA_BUS_ARUSER = grp_input_pixel_load_fu_337_m_axi_DATA_BUS_ARUSER;

assign m_axi_DATA_BUS_AWADDR = 64'd0;

assign m_axi_DATA_BUS_AWBURST = 2'd0;

assign m_axi_DATA_BUS_AWCACHE = 4'd0;

assign m_axi_DATA_BUS_AWID = 1'd0;

assign m_axi_DATA_BUS_AWLEN = 32'd0;

assign m_axi_DATA_BUS_AWLOCK = 2'd0;

assign m_axi_DATA_BUS_AWPROT = 3'd0;

assign m_axi_DATA_BUS_AWQOS = 4'd0;

assign m_axi_DATA_BUS_AWREGION = 4'd0;

assign m_axi_DATA_BUS_AWSIZE = 3'd0;

assign m_axi_DATA_BUS_AWUSER = 1'd0;

assign m_axi_DATA_BUS_AWVALID = 1'b0;

assign m_axi_DATA_BUS_BREADY = 1'b0;

assign m_axi_DATA_BUS_WDATA = 32'd0;

assign m_axi_DATA_BUS_WID = 1'd0;

assign m_axi_DATA_BUS_WLAST = 1'b0;

assign m_axi_DATA_BUS_WSTRB = 4'd0;

assign m_axi_DATA_BUS_WUSER = 1'd0;

assign m_axi_DATA_BUS_WVALID = 1'b0;

assign notlhs_fu_506_p2 = ((t2_V_reg_279 != 6'd0) ? 1'b1 : 1'b0);

assign notlhs_mid1_fu_582_p2 = ((t2_V_2_reg_985 != 6'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_387_p2 = (($signed(Input_w) < $signed(32'd27)) ? 1'b1 : 1'b0);

assign or_ln162_fu_523_p2 = (select_ln162_3_fu_518_p3 | icmp_ln173_reg_959);

assign or_ln180_fu_604_p2 = (select_ln162_6_fu_592_p3 | icmp_ln180_fu_599_p2);

assign ret_19_fu_726_p2 = (zext_ln215_fu_723_p1 + rhs_7_reg_940);

assign ret_fu_501_p2 = (t2_V_reg_279 + RowSub_2b_cast_reg_933);

assign ret_mid1_fu_536_p2 = (t2_V_2_reg_985 + RowSub_2b_cast_reg_933);

assign rhs_7_fu_446_p1 = ColSub_2b_reg_900;

assign sel_tmp4_fu_646_p2 = (1'd1 ^ NextInputFlag_fu_116);

assign sel_tmp5_fu_652_p2 = (sel_tmp4_fu_646_p2 & or_ln180_fu_604_p2);

assign sel_tmp_fu_621_p2 = (or_ln180_fu_604_p2 & NextInputFlag_fu_116);

assign select_ln162_1_fu_767_p3 = ((icmp_ln173_reg_959_pp0_iter2_reg[0:0] == 1'b1) ? t1_V_5_fu_761_p2 : t1_V_reg_326);

assign select_ln162_2_fu_512_p3 = ((icmp_ln173_reg_959[0:0] == 1'b1) ? RowSub_2b_cast_reg_933 : ret_fu_501_p2);

assign select_ln162_3_fu_518_p3 = ((icmp_ln173_reg_959[0:0] == 1'b1) ? icmp_ln174_reg_950 : icmp_ln174_1_reg_980);

assign select_ln162_4_fu_528_p3 = ((or_ln162_fu_523_p2[0:0] == 1'b1) ? 6'd0 : t3_V_2_reg_291);

assign select_ln162_5_fu_540_p3 = ((select_ln162_3_fu_518_p3[0:0] == 1'b1) ? ret_mid1_fu_536_p2 : select_ln162_2_fu_512_p3);

assign select_ln162_6_fu_592_p3 = ((select_ln162_3_reg_1002[0:0] == 1'b1) ? brmerge39_not_i_mid1_fu_587_p2 : and_ln162_fu_576_p2);

assign select_ln162_fu_470_p3 = ((icmp_ln173_reg_959[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_t2_V_phi_fu_283_p4);

assign select_ln173_1_fu_494_p3 = ((icmp_ln173_reg_959[0:0] == 1'b1) ? 12'd1 : add_ln173_fu_488_p2);

assign select_ln173_fu_552_p3 = ((select_ln162_3_fu_518_p3[0:0] == 1'b1) ? t2_V_2_reg_985 : select_ln162_reg_975);

assign select_ln195_fu_778_p3 = ((NextInputFlag_1_reg_1071[0:0] == 1'b1) ? input_array_1_1_reg_1061 : input_array_0_1_reg_1066);

assign t1_V_5_fu_761_p2 = (t1_V_reg_326 + 6'd1);

assign t2_V_2_fu_482_p2 = (select_ln162_fu_470_p3 + 6'd1);

assign t3_V_fu_558_p2 = (select_ln162_4_fu_528_p3 + 6'd1);

assign trunc_ln162_fu_774_p1 = select_ln162_1_fu_767_p3[0:0];

assign xor_ln162_fu_571_p2 = (icmp_ln173_reg_959_pp0_iter1_reg ^ 1'd1);

assign zext_ln182_fu_610_p1 = ap_phi_mux_RowBeginByteIndex_phi_fu_307_p4;

assign zext_ln189_fu_635_p1 = ap_phi_mux_input_mmcpy_offset_phi_fu_318_p4;

assign zext_ln195_2_fu_783_p1 = add_ln195_reg_1101;

assign zext_ln215_fu_723_p1 = select_ln162_4_reg_1007;

always @ (posedge ap_clk) begin
    RowSub_2b_cast_reg_933[5:2] <= 4'b0000;
    rhs_7_reg_940[6:2] <= 5'b00000;
end

endmodule //YOLO2_FPGA_input_load
