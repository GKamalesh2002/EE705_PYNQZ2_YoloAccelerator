// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_write_back_output_reorg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_DATA_BUS_AWVALID,
        m_axi_DATA_BUS_AWREADY,
        m_axi_DATA_BUS_AWADDR,
        m_axi_DATA_BUS_AWID,
        m_axi_DATA_BUS_AWLEN,
        m_axi_DATA_BUS_AWSIZE,
        m_axi_DATA_BUS_AWBURST,
        m_axi_DATA_BUS_AWLOCK,
        m_axi_DATA_BUS_AWCACHE,
        m_axi_DATA_BUS_AWPROT,
        m_axi_DATA_BUS_AWQOS,
        m_axi_DATA_BUS_AWREGION,
        m_axi_DATA_BUS_AWUSER,
        m_axi_DATA_BUS_WVALID,
        m_axi_DATA_BUS_WREADY,
        m_axi_DATA_BUS_WDATA,
        m_axi_DATA_BUS_WSTRB,
        m_axi_DATA_BUS_WLAST,
        m_axi_DATA_BUS_WID,
        m_axi_DATA_BUS_WUSER,
        m_axi_DATA_BUS_ARVALID,
        m_axi_DATA_BUS_ARREADY,
        m_axi_DATA_BUS_ARADDR,
        m_axi_DATA_BUS_ARID,
        m_axi_DATA_BUS_ARLEN,
        m_axi_DATA_BUS_ARSIZE,
        m_axi_DATA_BUS_ARBURST,
        m_axi_DATA_BUS_ARLOCK,
        m_axi_DATA_BUS_ARCACHE,
        m_axi_DATA_BUS_ARPROT,
        m_axi_DATA_BUS_ARQOS,
        m_axi_DATA_BUS_ARREGION,
        m_axi_DATA_BUS_ARUSER,
        m_axi_DATA_BUS_RVALID,
        m_axi_DATA_BUS_RREADY,
        m_axi_DATA_BUS_RDATA,
        m_axi_DATA_BUS_RLAST,
        m_axi_DATA_BUS_RID,
        m_axi_DATA_BUS_RUSER,
        m_axi_DATA_BUS_RRESP,
        m_axi_DATA_BUS_BVALID,
        m_axi_DATA_BUS_BREADY,
        m_axi_DATA_BUS_BRESP,
        m_axi_DATA_BUS_BID,
        m_axi_DATA_BUS_BUSER,
        output_buffer_0_address0,
        output_buffer_0_ce0,
        output_buffer_0_q0,
        output_buffer_1_address0,
        output_buffer_1_ce0,
        output_buffer_1_q0,
        output_buffer_2_address0,
        output_buffer_2_ce0,
        output_buffer_2_q0,
        output_buffer_3_address0,
        output_buffer_3_ce0,
        output_buffer_3_q0,
        output_buffer_4_address0,
        output_buffer_4_ce0,
        output_buffer_4_q0,
        output_buffer_5_address0,
        output_buffer_5_ce0,
        output_buffer_5_q0,
        output_buffer_6_address0,
        output_buffer_6_ce0,
        output_buffer_6_q0,
        output_buffer_7_address0,
        output_buffer_7_ce0,
        output_buffer_7_q0,
        output_buffer_8_address0,
        output_buffer_8_ce0,
        output_buffer_8_q0,
        output_buffer_9_address0,
        output_buffer_9_ce0,
        output_buffer_9_q0,
        output_buffer_10_address0,
        output_buffer_10_ce0,
        output_buffer_10_q0,
        output_buffer_11_address0,
        output_buffer_11_ce0,
        output_buffer_11_q0,
        output_buffer_12_address0,
        output_buffer_12_ce0,
        output_buffer_12_q0,
        output_buffer_13_address0,
        output_buffer_13_ce0,
        output_buffer_13_q0,
        output_buffer_14_address0,
        output_buffer_14_ce0,
        output_buffer_14_q0,
        output_buffer_15_address0,
        output_buffer_15_ce0,
        output_buffer_15_q0,
        output_buffer_16_address0,
        output_buffer_16_ce0,
        output_buffer_16_q0,
        output_buffer_17_address0,
        output_buffer_17_ce0,
        output_buffer_17_q0,
        output_buffer_18_address0,
        output_buffer_18_ce0,
        output_buffer_18_q0,
        output_buffer_19_address0,
        output_buffer_19_ce0,
        output_buffer_19_q0,
        output_buffer_20_address0,
        output_buffer_20_ce0,
        output_buffer_20_q0,
        output_buffer_21_address0,
        output_buffer_21_ce0,
        output_buffer_21_q0,
        output_buffer_22_address0,
        output_buffer_22_ce0,
        output_buffer_22_q0,
        output_buffer_23_address0,
        output_buffer_23_ce0,
        output_buffer_23_q0,
        output_buffer_24_address0,
        output_buffer_24_ce0,
        output_buffer_24_q0,
        output_buffer_25_address0,
        output_buffer_25_ce0,
        output_buffer_25_q0,
        output_buffer_26_address0,
        output_buffer_26_ce0,
        output_buffer_26_q0,
        output_buffer_27_address0,
        output_buffer_27_ce0,
        output_buffer_27_q0,
        output_buffer_28_address0,
        output_buffer_28_ce0,
        output_buffer_28_q0,
        output_buffer_29_address0,
        output_buffer_29_ce0,
        output_buffer_29_q0,
        output_buffer_30_address0,
        output_buffer_30_ce0,
        output_buffer_30_q0,
        output_buffer_31_address0,
        output_buffer_31_ce0,
        output_buffer_31_q0,
        output_buffer_32_address0,
        output_buffer_32_ce0,
        output_buffer_32_q0,
        output_buffer_33_address0,
        output_buffer_33_ce0,
        output_buffer_33_q0,
        output_buffer_34_address0,
        output_buffer_34_ce0,
        output_buffer_34_q0,
        output_buffer_35_address0,
        output_buffer_35_ce0,
        output_buffer_35_q0,
        output_buffer_36_address0,
        output_buffer_36_ce0,
        output_buffer_36_q0,
        output_buffer_37_address0,
        output_buffer_37_ce0,
        output_buffer_37_q0,
        output_buffer_38_address0,
        output_buffer_38_ce0,
        output_buffer_38_q0,
        output_buffer_39_address0,
        output_buffer_39_ce0,
        output_buffer_39_q0,
        output_buffer_40_address0,
        output_buffer_40_ce0,
        output_buffer_40_q0,
        output_buffer_41_address0,
        output_buffer_41_ce0,
        output_buffer_41_q0,
        output_buffer_42_address0,
        output_buffer_42_ce0,
        output_buffer_42_q0,
        output_buffer_43_address0,
        output_buffer_43_ce0,
        output_buffer_43_q0,
        output_buffer_44_address0,
        output_buffer_44_ce0,
        output_buffer_44_q0,
        output_buffer_45_address0,
        output_buffer_45_ce0,
        output_buffer_45_q0,
        output_buffer_46_address0,
        output_buffer_46_ce0,
        output_buffer_46_q0,
        output_buffer_47_address0,
        output_buffer_47_ce0,
        output_buffer_47_q0,
        output_buffer_48_address0,
        output_buffer_48_ce0,
        output_buffer_48_q0,
        output_buffer_49_address0,
        output_buffer_49_ce0,
        output_buffer_49_q0,
        output_buffer_50_address0,
        output_buffer_50_ce0,
        output_buffer_50_q0,
        output_buffer_51_address0,
        output_buffer_51_ce0,
        output_buffer_51_q0,
        output_buffer_52_address0,
        output_buffer_52_ce0,
        output_buffer_52_q0,
        output_buffer_53_address0,
        output_buffer_53_ce0,
        output_buffer_53_q0,
        output_buffer_54_address0,
        output_buffer_54_ce0,
        output_buffer_54_q0,
        output_buffer_55_address0,
        output_buffer_55_ce0,
        output_buffer_55_q0,
        output_buffer_56_address0,
        output_buffer_56_ce0,
        output_buffer_56_q0,
        output_buffer_57_address0,
        output_buffer_57_ce0,
        output_buffer_57_q0,
        output_buffer_58_address0,
        output_buffer_58_ce0,
        output_buffer_58_q0,
        output_buffer_59_address0,
        output_buffer_59_ce0,
        output_buffer_59_q0,
        Output_r,
        r,
        c,
        m,
        Output_w,
        TM_MIN,
        TR_MIN,
        TC_MIN,
        OHxOW,
        IsNL,
        enable,
        InterSubOutput,
        ltype
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_pp0_stage0 = 37'd65536;
parameter    ap_ST_fsm_state20 = 37'd131072;
parameter    ap_ST_fsm_state21 = 37'd262144;
parameter    ap_ST_fsm_state22 = 37'd524288;
parameter    ap_ST_fsm_state23 = 37'd1048576;
parameter    ap_ST_fsm_state24 = 37'd2097152;
parameter    ap_ST_fsm_state25 = 37'd4194304;
parameter    ap_ST_fsm_state26 = 37'd8388608;
parameter    ap_ST_fsm_state27 = 37'd16777216;
parameter    ap_ST_fsm_state28 = 37'd33554432;
parameter    ap_ST_fsm_state29 = 37'd67108864;
parameter    ap_ST_fsm_state30 = 37'd134217728;
parameter    ap_ST_fsm_state31 = 37'd268435456;
parameter    ap_ST_fsm_state32 = 37'd536870912;
parameter    ap_ST_fsm_state33 = 37'd1073741824;
parameter    ap_ST_fsm_pp1_stage0 = 37'd2147483648;
parameter    ap_ST_fsm_state37 = 37'd4294967296;
parameter    ap_ST_fsm_state38 = 37'd8589934592;
parameter    ap_ST_fsm_state39 = 37'd17179869184;
parameter    ap_ST_fsm_state40 = 37'd34359738368;
parameter    ap_ST_fsm_state41 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_DATA_BUS_AWVALID;
input   m_axi_DATA_BUS_AWREADY;
output  [63:0] m_axi_DATA_BUS_AWADDR;
output  [0:0] m_axi_DATA_BUS_AWID;
output  [31:0] m_axi_DATA_BUS_AWLEN;
output  [2:0] m_axi_DATA_BUS_AWSIZE;
output  [1:0] m_axi_DATA_BUS_AWBURST;
output  [1:0] m_axi_DATA_BUS_AWLOCK;
output  [3:0] m_axi_DATA_BUS_AWCACHE;
output  [2:0] m_axi_DATA_BUS_AWPROT;
output  [3:0] m_axi_DATA_BUS_AWQOS;
output  [3:0] m_axi_DATA_BUS_AWREGION;
output  [0:0] m_axi_DATA_BUS_AWUSER;
output   m_axi_DATA_BUS_WVALID;
input   m_axi_DATA_BUS_WREADY;
output  [31:0] m_axi_DATA_BUS_WDATA;
output  [3:0] m_axi_DATA_BUS_WSTRB;
output   m_axi_DATA_BUS_WLAST;
output  [0:0] m_axi_DATA_BUS_WID;
output  [0:0] m_axi_DATA_BUS_WUSER;
output   m_axi_DATA_BUS_ARVALID;
input   m_axi_DATA_BUS_ARREADY;
output  [63:0] m_axi_DATA_BUS_ARADDR;
output  [0:0] m_axi_DATA_BUS_ARID;
output  [31:0] m_axi_DATA_BUS_ARLEN;
output  [2:0] m_axi_DATA_BUS_ARSIZE;
output  [1:0] m_axi_DATA_BUS_ARBURST;
output  [1:0] m_axi_DATA_BUS_ARLOCK;
output  [3:0] m_axi_DATA_BUS_ARCACHE;
output  [2:0] m_axi_DATA_BUS_ARPROT;
output  [3:0] m_axi_DATA_BUS_ARQOS;
output  [3:0] m_axi_DATA_BUS_ARREGION;
output  [0:0] m_axi_DATA_BUS_ARUSER;
input   m_axi_DATA_BUS_RVALID;
output   m_axi_DATA_BUS_RREADY;
input  [31:0] m_axi_DATA_BUS_RDATA;
input   m_axi_DATA_BUS_RLAST;
input  [0:0] m_axi_DATA_BUS_RID;
input  [0:0] m_axi_DATA_BUS_RUSER;
input  [1:0] m_axi_DATA_BUS_RRESP;
input   m_axi_DATA_BUS_BVALID;
output   m_axi_DATA_BUS_BREADY;
input  [1:0] m_axi_DATA_BUS_BRESP;
input  [0:0] m_axi_DATA_BUS_BID;
input  [0:0] m_axi_DATA_BUS_BUSER;
output  [9:0] output_buffer_0_address0;
output   output_buffer_0_ce0;
input  [31:0] output_buffer_0_q0;
output  [9:0] output_buffer_1_address0;
output   output_buffer_1_ce0;
input  [31:0] output_buffer_1_q0;
output  [9:0] output_buffer_2_address0;
output   output_buffer_2_ce0;
input  [31:0] output_buffer_2_q0;
output  [9:0] output_buffer_3_address0;
output   output_buffer_3_ce0;
input  [31:0] output_buffer_3_q0;
output  [9:0] output_buffer_4_address0;
output   output_buffer_4_ce0;
input  [31:0] output_buffer_4_q0;
output  [9:0] output_buffer_5_address0;
output   output_buffer_5_ce0;
input  [31:0] output_buffer_5_q0;
output  [9:0] output_buffer_6_address0;
output   output_buffer_6_ce0;
input  [31:0] output_buffer_6_q0;
output  [9:0] output_buffer_7_address0;
output   output_buffer_7_ce0;
input  [31:0] output_buffer_7_q0;
output  [9:0] output_buffer_8_address0;
output   output_buffer_8_ce0;
input  [31:0] output_buffer_8_q0;
output  [9:0] output_buffer_9_address0;
output   output_buffer_9_ce0;
input  [31:0] output_buffer_9_q0;
output  [9:0] output_buffer_10_address0;
output   output_buffer_10_ce0;
input  [31:0] output_buffer_10_q0;
output  [9:0] output_buffer_11_address0;
output   output_buffer_11_ce0;
input  [31:0] output_buffer_11_q0;
output  [9:0] output_buffer_12_address0;
output   output_buffer_12_ce0;
input  [31:0] output_buffer_12_q0;
output  [9:0] output_buffer_13_address0;
output   output_buffer_13_ce0;
input  [31:0] output_buffer_13_q0;
output  [9:0] output_buffer_14_address0;
output   output_buffer_14_ce0;
input  [31:0] output_buffer_14_q0;
output  [9:0] output_buffer_15_address0;
output   output_buffer_15_ce0;
input  [31:0] output_buffer_15_q0;
output  [9:0] output_buffer_16_address0;
output   output_buffer_16_ce0;
input  [31:0] output_buffer_16_q0;
output  [9:0] output_buffer_17_address0;
output   output_buffer_17_ce0;
input  [31:0] output_buffer_17_q0;
output  [9:0] output_buffer_18_address0;
output   output_buffer_18_ce0;
input  [31:0] output_buffer_18_q0;
output  [9:0] output_buffer_19_address0;
output   output_buffer_19_ce0;
input  [31:0] output_buffer_19_q0;
output  [9:0] output_buffer_20_address0;
output   output_buffer_20_ce0;
input  [31:0] output_buffer_20_q0;
output  [9:0] output_buffer_21_address0;
output   output_buffer_21_ce0;
input  [31:0] output_buffer_21_q0;
output  [9:0] output_buffer_22_address0;
output   output_buffer_22_ce0;
input  [31:0] output_buffer_22_q0;
output  [9:0] output_buffer_23_address0;
output   output_buffer_23_ce0;
input  [31:0] output_buffer_23_q0;
output  [9:0] output_buffer_24_address0;
output   output_buffer_24_ce0;
input  [31:0] output_buffer_24_q0;
output  [9:0] output_buffer_25_address0;
output   output_buffer_25_ce0;
input  [31:0] output_buffer_25_q0;
output  [9:0] output_buffer_26_address0;
output   output_buffer_26_ce0;
input  [31:0] output_buffer_26_q0;
output  [9:0] output_buffer_27_address0;
output   output_buffer_27_ce0;
input  [31:0] output_buffer_27_q0;
output  [9:0] output_buffer_28_address0;
output   output_buffer_28_ce0;
input  [31:0] output_buffer_28_q0;
output  [9:0] output_buffer_29_address0;
output   output_buffer_29_ce0;
input  [31:0] output_buffer_29_q0;
output  [9:0] output_buffer_30_address0;
output   output_buffer_30_ce0;
input  [31:0] output_buffer_30_q0;
output  [9:0] output_buffer_31_address0;
output   output_buffer_31_ce0;
input  [31:0] output_buffer_31_q0;
output  [9:0] output_buffer_32_address0;
output   output_buffer_32_ce0;
input  [31:0] output_buffer_32_q0;
output  [9:0] output_buffer_33_address0;
output   output_buffer_33_ce0;
input  [31:0] output_buffer_33_q0;
output  [9:0] output_buffer_34_address0;
output   output_buffer_34_ce0;
input  [31:0] output_buffer_34_q0;
output  [9:0] output_buffer_35_address0;
output   output_buffer_35_ce0;
input  [31:0] output_buffer_35_q0;
output  [9:0] output_buffer_36_address0;
output   output_buffer_36_ce0;
input  [31:0] output_buffer_36_q0;
output  [9:0] output_buffer_37_address0;
output   output_buffer_37_ce0;
input  [31:0] output_buffer_37_q0;
output  [9:0] output_buffer_38_address0;
output   output_buffer_38_ce0;
input  [31:0] output_buffer_38_q0;
output  [9:0] output_buffer_39_address0;
output   output_buffer_39_ce0;
input  [31:0] output_buffer_39_q0;
output  [9:0] output_buffer_40_address0;
output   output_buffer_40_ce0;
input  [31:0] output_buffer_40_q0;
output  [9:0] output_buffer_41_address0;
output   output_buffer_41_ce0;
input  [31:0] output_buffer_41_q0;
output  [9:0] output_buffer_42_address0;
output   output_buffer_42_ce0;
input  [31:0] output_buffer_42_q0;
output  [9:0] output_buffer_43_address0;
output   output_buffer_43_ce0;
input  [31:0] output_buffer_43_q0;
output  [9:0] output_buffer_44_address0;
output   output_buffer_44_ce0;
input  [31:0] output_buffer_44_q0;
output  [9:0] output_buffer_45_address0;
output   output_buffer_45_ce0;
input  [31:0] output_buffer_45_q0;
output  [9:0] output_buffer_46_address0;
output   output_buffer_46_ce0;
input  [31:0] output_buffer_46_q0;
output  [9:0] output_buffer_47_address0;
output   output_buffer_47_ce0;
input  [31:0] output_buffer_47_q0;
output  [9:0] output_buffer_48_address0;
output   output_buffer_48_ce0;
input  [31:0] output_buffer_48_q0;
output  [9:0] output_buffer_49_address0;
output   output_buffer_49_ce0;
input  [31:0] output_buffer_49_q0;
output  [9:0] output_buffer_50_address0;
output   output_buffer_50_ce0;
input  [31:0] output_buffer_50_q0;
output  [9:0] output_buffer_51_address0;
output   output_buffer_51_ce0;
input  [31:0] output_buffer_51_q0;
output  [9:0] output_buffer_52_address0;
output   output_buffer_52_ce0;
input  [31:0] output_buffer_52_q0;
output  [9:0] output_buffer_53_address0;
output   output_buffer_53_ce0;
input  [31:0] output_buffer_53_q0;
output  [9:0] output_buffer_54_address0;
output   output_buffer_54_ce0;
input  [31:0] output_buffer_54_q0;
output  [9:0] output_buffer_55_address0;
output   output_buffer_55_ce0;
input  [31:0] output_buffer_55_q0;
output  [9:0] output_buffer_56_address0;
output   output_buffer_56_ce0;
input  [31:0] output_buffer_56_q0;
output  [9:0] output_buffer_57_address0;
output   output_buffer_57_ce0;
input  [31:0] output_buffer_57_q0;
output  [9:0] output_buffer_58_address0;
output   output_buffer_58_ce0;
input  [31:0] output_buffer_58_q0;
output  [9:0] output_buffer_59_address0;
output   output_buffer_59_ce0;
input  [31:0] output_buffer_59_q0;
input  [63:0] Output_r;
input  [15:0] r;
input  [15:0] c;
input  [15:0] m;
input  [12:0] Output_w;
input  [7:0] TM_MIN;
input  [7:0] TR_MIN;
input  [7:0] TC_MIN;
input  [23:0] OHxOW;
input   IsNL;
input   enable;
input  [4:0] InterSubOutput;
input  [7:0] ltype;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_DATA_BUS_AWVALID;
reg[63:0] m_axi_DATA_BUS_AWADDR;
reg m_axi_DATA_BUS_WVALID;
reg[31:0] m_axi_DATA_BUS_WDATA;
reg m_axi_DATA_BUS_BREADY;
reg output_buffer_0_ce0;
reg output_buffer_1_ce0;
reg output_buffer_2_ce0;
reg output_buffer_3_ce0;
reg output_buffer_4_ce0;
reg output_buffer_5_ce0;
reg output_buffer_6_ce0;
reg output_buffer_7_ce0;
reg output_buffer_8_ce0;
reg output_buffer_9_ce0;
reg output_buffer_10_ce0;
reg output_buffer_11_ce0;
reg output_buffer_12_ce0;
reg output_buffer_13_ce0;
reg output_buffer_14_ce0;
reg output_buffer_15_ce0;
reg output_buffer_16_ce0;
reg output_buffer_17_ce0;
reg output_buffer_18_ce0;
reg output_buffer_19_ce0;
reg output_buffer_20_ce0;
reg output_buffer_21_ce0;
reg output_buffer_22_ce0;
reg output_buffer_23_ce0;
reg output_buffer_24_ce0;
reg output_buffer_25_ce0;
reg output_buffer_26_ce0;
reg output_buffer_27_ce0;
reg output_buffer_28_ce0;
reg output_buffer_29_ce0;
reg output_buffer_30_ce0;
reg output_buffer_31_ce0;
reg output_buffer_32_ce0;
reg output_buffer_33_ce0;
reg output_buffer_34_ce0;
reg output_buffer_35_ce0;
reg output_buffer_36_ce0;
reg output_buffer_37_ce0;
reg output_buffer_38_ce0;
reg output_buffer_39_ce0;
reg output_buffer_40_ce0;
reg output_buffer_41_ce0;
reg output_buffer_42_ce0;
reg output_buffer_43_ce0;
reg output_buffer_44_ce0;
reg output_buffer_45_ce0;
reg output_buffer_46_ce0;
reg output_buffer_47_ce0;
reg output_buffer_48_ce0;
reg output_buffer_49_ce0;
reg output_buffer_50_ce0;
reg output_buffer_51_ce0;
reg output_buffer_52_ce0;
reg output_buffer_53_ce0;
reg output_buffer_54_ce0;
reg output_buffer_55_ce0;
reg output_buffer_56_ce0;
reg output_buffer_57_ce0;
reg output_buffer_58_ce0;
reg output_buffer_59_ce0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] local_buf0_address0;
reg    local_buf0_ce0;
reg    local_buf0_we0;
wire   [31:0] local_buf0_q0;
reg   [3:0] local_buf1_address0;
reg    local_buf1_ce0;
reg    local_buf1_we0;
wire   [31:0] local_buf1_q0;
reg    DATA_BUS_blk_n_AW;
wire    ap_CS_fsm_state33;
reg    DATA_BUS_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond384_reg_1264;
reg   [0:0] exitcond384_reg_1264_pp1_iter1_reg;
reg    DATA_BUS_blk_n_B;
wire    ap_CS_fsm_state24;
reg   [0:0] pp_reg_431;
reg   [0:0] icmp_ln268_reg_1153;
wire    ap_CS_fsm_state16;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond3_reg_1198;
reg   [0:0] exitcond3_reg_1198_pp0_iter1_reg;
reg   [0:0] icmp_ln273_reg_1149;
reg   [7:0] loop_index_reg_443;
reg   [7:0] loop_index33_reg_454;
reg   [7:0] reg_674;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state26;
reg   [7:0] reg_680;
wire   [0:0] enable_read_read_fu_274_p2;
wire   [31:0] OHxOW_cast_fu_686_p1;
reg   [31:0] OHxOW_cast_reg_1040;
wire   [0:0] empty_fu_690_p1;
reg   [0:0] empty_reg_1047;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_941_p3;
reg   [31:0] add_ln253_reg_1096;
wire    ap_CS_fsm_state4;
wire   [15:0] TM_MINxTR_MIN_fu_713_p2;
reg   [15:0] TM_MINxTR_MIN_reg_1101;
wire    ap_CS_fsm_state5;
wire   [20:0] zext_ln253_2_fu_719_p1;
reg   [20:0] zext_ln253_2_reg_1107;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_949_p3;
reg   [31:0] offset_reg_1113;
wire   [7:0] loop_cnts_1_fu_741_p3;
reg   [7:0] loop_cnts_1_reg_1119;
wire   [31:0] loop_cnts_1_cast_fu_748_p1;
reg   [31:0] loop_cnts_1_cast_reg_1125;
wire   [15:0] add_ln263_fu_752_p2;
reg   [15:0] add_ln263_reg_1131;
wire   [15:0] t_1_fu_757_p2;
reg   [15:0] t_1_reg_1136;
wire    ap_CS_fsm_state7;
wire   [0:0] cmp27_fu_768_p2;
reg   [0:0] cmp27_reg_1144;
wire   [0:0] icmp_ln263_fu_763_p2;
wire   [0:0] grp_fu_624_p2;
wire   [0:0] ap_phi_mux_pp_phi_fu_435_p4;
reg   [7:0] tm_assign_load_1_reg_1157;
wire    ap_CS_fsm_state8;
reg   [7:0] tr_assign_load_1_reg_1162;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_956_p3;
reg   [31:0] add_ln231_2_reg_1177;
wire    ap_CS_fsm_state12;
reg   [30:0] tmp_2_reg_1182;
wire    ap_CS_fsm_state14;
reg   [63:0] DATA_BUS_addr_1_reg_1187;
wire    ap_CS_fsm_state15;
wire   [7:0] empty_66_fu_826_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state17_pp0_stage0_iter0;
wire    ap_block_state18_pp0_stage0_iter1;
wire    ap_block_state19_pp0_stage0_iter2;
reg    ap_block_state19_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond3_fu_832_p2;
reg   [31:0] local_buf0_load_reg_1207;
wire   [7:0] tr_1_fu_842_p2;
reg   [7:0] tr_1_reg_1212;
wire   [0:0] icmp_ln278_fu_848_p2;
reg   [0:0] icmp_ln278_reg_1217;
reg   [7:0] tm_assign_1_load_1_reg_1223;
wire    ap_CS_fsm_state25;
reg   [7:0] tr_assign_1_load_1_reg_1228;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_969_p3;
reg   [31:0] add_ln231_reg_1243;
wire    ap_CS_fsm_state29;
reg   [30:0] tmp_reg_1248;
wire    ap_CS_fsm_state31;
reg   [63:0] DATA_BUS_addr_reg_1253;
wire    ap_CS_fsm_state32;
wire   [7:0] empty_63_fu_906_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state34_pp1_stage0_iter0;
wire    ap_block_state35_pp1_stage0_iter1;
wire    ap_block_state36_pp1_stage0_iter2;
reg    ap_block_state36_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond384_fu_912_p2;
reg   [31:0] local_buf1_load_reg_1273;
wire   [7:0] tr_2_fu_928_p3;
wire    ap_CS_fsm_state41;
wire   [7:0] tm_1_fu_934_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state17;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state34;
reg    ap_enable_reg_pp1_iter1;
wire    grp_nonlinear_leaky_row_fu_486_ap_start;
wire    grp_nonlinear_leaky_row_fu_486_ap_done;
wire    grp_nonlinear_leaky_row_fu_486_ap_idle;
wire    grp_nonlinear_leaky_row_fu_486_ap_ready;
wire   [3:0] grp_nonlinear_leaky_row_fu_486_local_buf_address0;
wire    grp_nonlinear_leaky_row_fu_486_local_buf_ce0;
wire    grp_nonlinear_leaky_row_fu_486_local_buf_we0;
wire   [31:0] grp_nonlinear_leaky_row_fu_486_local_buf_d0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_0_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_0_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_1_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_1_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_2_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_2_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_3_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_3_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_4_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_4_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_5_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_5_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_6_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_6_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_7_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_7_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_8_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_8_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_9_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_9_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_10_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_10_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_11_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_11_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_12_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_12_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_13_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_13_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_14_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_14_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_15_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_15_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_16_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_16_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_17_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_17_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_18_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_18_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_19_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_19_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_20_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_20_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_21_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_21_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_22_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_22_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_23_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_23_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_24_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_24_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_25_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_25_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_26_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_26_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_27_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_27_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_28_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_28_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_29_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_29_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_30_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_30_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_31_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_31_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_32_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_32_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_33_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_33_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_34_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_34_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_35_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_35_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_36_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_36_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_37_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_37_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_38_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_38_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_39_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_39_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_40_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_40_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_41_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_41_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_42_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_42_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_43_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_43_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_44_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_44_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_45_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_45_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_46_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_46_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_47_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_47_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_48_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_48_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_49_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_49_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_50_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_50_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_51_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_51_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_52_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_52_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_53_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_53_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_54_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_54_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_55_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_55_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_56_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_56_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_57_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_57_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_58_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_58_ce0;
wire   [9:0] grp_nonlinear_leaky_row_fu_486_Input_59_address0;
wire    grp_nonlinear_leaky_row_fu_486_Input_59_ce0;
reg   [7:0] grp_nonlinear_leaky_row_fu_486_tm_n_read;
reg   [7:0] grp_nonlinear_leaky_row_fu_486_tr_n_read;
wire    grp_nonlinear_leaky_row_fu_486_enable;
wire   [7:0] grp_nonlinear_leaky_row_fu_486_ap_return_0;
wire   [7:0] grp_nonlinear_leaky_row_fu_486_ap_return_1;
reg   [15:0] t_reg_396;
reg   [7:0] tm_reg_407;
reg   [7:0] tr_reg_419;
reg   [0:0] pp_1_reg_465;
reg    ap_predicate_op156_writeresp_state24;
reg    ap_predicate_op158_writeresp_state24;
reg    ap_block_state24;
reg    grp_nonlinear_leaky_row_fu_486_ap_start_reg;
wire   [63:0] loop_index_cast_fu_837_p1;
wire   [63:0] loop_index33_cast_fu_917_p1;
wire  signed [63:0] p_cast2_cast_fu_816_p1;
wire  signed [63:0] p_cast_cast_fu_896_p1;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp1_stage0_01001;
reg   [7:0] tm_assign_1_fu_246;
wire    ap_CS_fsm_state37;
reg   [7:0] tm_assign_fu_250;
wire    ap_CS_fsm_state20;
reg   [7:0] tr_assign_1_fu_254;
reg   [7:0] tr_assign_fu_258;
wire   [7:0] TM_MINxTR_MIN_fu_713_p0;
wire   [7:0] TM_MINxTR_MIN_fu_713_p1;
wire   [6:0] loop_cnts_fu_722_p4;
wire   [7:0] loop_cnts_2_fu_731_p1;
wire   [7:0] inc_i_fu_735_p2;
wire   [31:0] grp_fu_962_p3;
wire   [32:0] tmp_3_fu_790_p3;
wire  signed [63:0] p_cast4_fu_797_p1;
wire   [63:0] empty_64_fu_801_p2;
wire   [61:0] p_cast2_fu_806_p4;
wire   [31:0] grp_fu_975_p3;
wire   [32:0] tmp_1_fu_870_p3;
wire  signed [63:0] p_cast3_fu_877_p1;
wire   [63:0] empty_61_fu_881_p2;
wire   [61:0] p_cast_fu_886_p4;
wire   [7:0] add_ln281_fu_922_p2;
wire   [15:0] grp_fu_941_p0;
wire   [23:0] grp_fu_941_p1;
wire   [15:0] grp_fu_941_p2;
wire   [12:0] grp_fu_949_p0;
wire   [15:0] grp_fu_949_p1;
wire   [12:0] grp_fu_956_p0;
wire   [7:0] grp_fu_956_p1;
wire   [7:0] grp_fu_962_p0;
wire   [23:0] grp_fu_962_p1;
wire    ap_CS_fsm_state13;
wire   [12:0] grp_fu_969_p0;
wire   [7:0] grp_fu_969_p1;
wire   [7:0] grp_fu_975_p0;
wire   [23:0] grp_fu_975_p1;
wire    ap_CS_fsm_state30;
reg    grp_fu_956_ce;
wire    ap_CS_fsm_state10;
reg    grp_fu_969_ce;
wire    ap_CS_fsm_state27;
reg   [36:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [15:0] TM_MINxTR_MIN_fu_713_p00;
wire   [15:0] TM_MINxTR_MIN_fu_713_p10;
wire   [31:0] grp_fu_941_p00;
wire   [31:0] grp_fu_941_p10;
wire   [31:0] grp_fu_941_p20;
wire   [28:0] grp_fu_949_p00;
wire   [28:0] grp_fu_949_p10;
wire   [20:0] grp_fu_956_p10;
wire   [31:0] grp_fu_962_p00;
wire   [20:0] grp_fu_969_p10;
wire   [31:0] grp_fu_975_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_nonlinear_leaky_row_fu_486_ap_start_reg = 1'b0;
end

FPGA_Acc_write_back_output_reorg_local_buf0 #(
    .DataWidth( 32 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
local_buf0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_buf0_address0),
    .ce0(local_buf0_ce0),
    .we0(local_buf0_we0),
    .d0(grp_nonlinear_leaky_row_fu_486_local_buf_d0),
    .q0(local_buf0_q0)
);

FPGA_Acc_write_back_output_reorg_local_buf0 #(
    .DataWidth( 32 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
local_buf1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_buf1_address0),
    .ce0(local_buf1_ce0),
    .we0(local_buf1_we0),
    .d0(grp_nonlinear_leaky_row_fu_486_local_buf_d0),
    .q0(local_buf1_q0)
);

FPGA_Acc_nonlinear_leaky_row grp_nonlinear_leaky_row_fu_486(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_nonlinear_leaky_row_fu_486_ap_start),
    .ap_done(grp_nonlinear_leaky_row_fu_486_ap_done),
    .ap_idle(grp_nonlinear_leaky_row_fu_486_ap_idle),
    .ap_ready(grp_nonlinear_leaky_row_fu_486_ap_ready),
    .local_buf_address0(grp_nonlinear_leaky_row_fu_486_local_buf_address0),
    .local_buf_ce0(grp_nonlinear_leaky_row_fu_486_local_buf_ce0),
    .local_buf_we0(grp_nonlinear_leaky_row_fu_486_local_buf_we0),
    .local_buf_d0(grp_nonlinear_leaky_row_fu_486_local_buf_d0),
    .Input_0_address0(grp_nonlinear_leaky_row_fu_486_Input_0_address0),
    .Input_0_ce0(grp_nonlinear_leaky_row_fu_486_Input_0_ce0),
    .Input_0_q0(output_buffer_0_q0),
    .Input_1_address0(grp_nonlinear_leaky_row_fu_486_Input_1_address0),
    .Input_1_ce0(grp_nonlinear_leaky_row_fu_486_Input_1_ce0),
    .Input_1_q0(output_buffer_1_q0),
    .Input_2_address0(grp_nonlinear_leaky_row_fu_486_Input_2_address0),
    .Input_2_ce0(grp_nonlinear_leaky_row_fu_486_Input_2_ce0),
    .Input_2_q0(output_buffer_2_q0),
    .Input_3_address0(grp_nonlinear_leaky_row_fu_486_Input_3_address0),
    .Input_3_ce0(grp_nonlinear_leaky_row_fu_486_Input_3_ce0),
    .Input_3_q0(output_buffer_3_q0),
    .Input_4_address0(grp_nonlinear_leaky_row_fu_486_Input_4_address0),
    .Input_4_ce0(grp_nonlinear_leaky_row_fu_486_Input_4_ce0),
    .Input_4_q0(output_buffer_4_q0),
    .Input_5_address0(grp_nonlinear_leaky_row_fu_486_Input_5_address0),
    .Input_5_ce0(grp_nonlinear_leaky_row_fu_486_Input_5_ce0),
    .Input_5_q0(output_buffer_5_q0),
    .Input_6_address0(grp_nonlinear_leaky_row_fu_486_Input_6_address0),
    .Input_6_ce0(grp_nonlinear_leaky_row_fu_486_Input_6_ce0),
    .Input_6_q0(output_buffer_6_q0),
    .Input_7_address0(grp_nonlinear_leaky_row_fu_486_Input_7_address0),
    .Input_7_ce0(grp_nonlinear_leaky_row_fu_486_Input_7_ce0),
    .Input_7_q0(output_buffer_7_q0),
    .Input_8_address0(grp_nonlinear_leaky_row_fu_486_Input_8_address0),
    .Input_8_ce0(grp_nonlinear_leaky_row_fu_486_Input_8_ce0),
    .Input_8_q0(output_buffer_8_q0),
    .Input_9_address0(grp_nonlinear_leaky_row_fu_486_Input_9_address0),
    .Input_9_ce0(grp_nonlinear_leaky_row_fu_486_Input_9_ce0),
    .Input_9_q0(output_buffer_9_q0),
    .Input_10_address0(grp_nonlinear_leaky_row_fu_486_Input_10_address0),
    .Input_10_ce0(grp_nonlinear_leaky_row_fu_486_Input_10_ce0),
    .Input_10_q0(output_buffer_10_q0),
    .Input_11_address0(grp_nonlinear_leaky_row_fu_486_Input_11_address0),
    .Input_11_ce0(grp_nonlinear_leaky_row_fu_486_Input_11_ce0),
    .Input_11_q0(output_buffer_11_q0),
    .Input_12_address0(grp_nonlinear_leaky_row_fu_486_Input_12_address0),
    .Input_12_ce0(grp_nonlinear_leaky_row_fu_486_Input_12_ce0),
    .Input_12_q0(output_buffer_12_q0),
    .Input_13_address0(grp_nonlinear_leaky_row_fu_486_Input_13_address0),
    .Input_13_ce0(grp_nonlinear_leaky_row_fu_486_Input_13_ce0),
    .Input_13_q0(output_buffer_13_q0),
    .Input_14_address0(grp_nonlinear_leaky_row_fu_486_Input_14_address0),
    .Input_14_ce0(grp_nonlinear_leaky_row_fu_486_Input_14_ce0),
    .Input_14_q0(output_buffer_14_q0),
    .Input_15_address0(grp_nonlinear_leaky_row_fu_486_Input_15_address0),
    .Input_15_ce0(grp_nonlinear_leaky_row_fu_486_Input_15_ce0),
    .Input_15_q0(output_buffer_15_q0),
    .Input_16_address0(grp_nonlinear_leaky_row_fu_486_Input_16_address0),
    .Input_16_ce0(grp_nonlinear_leaky_row_fu_486_Input_16_ce0),
    .Input_16_q0(output_buffer_16_q0),
    .Input_17_address0(grp_nonlinear_leaky_row_fu_486_Input_17_address0),
    .Input_17_ce0(grp_nonlinear_leaky_row_fu_486_Input_17_ce0),
    .Input_17_q0(output_buffer_17_q0),
    .Input_18_address0(grp_nonlinear_leaky_row_fu_486_Input_18_address0),
    .Input_18_ce0(grp_nonlinear_leaky_row_fu_486_Input_18_ce0),
    .Input_18_q0(output_buffer_18_q0),
    .Input_19_address0(grp_nonlinear_leaky_row_fu_486_Input_19_address0),
    .Input_19_ce0(grp_nonlinear_leaky_row_fu_486_Input_19_ce0),
    .Input_19_q0(output_buffer_19_q0),
    .Input_20_address0(grp_nonlinear_leaky_row_fu_486_Input_20_address0),
    .Input_20_ce0(grp_nonlinear_leaky_row_fu_486_Input_20_ce0),
    .Input_20_q0(output_buffer_20_q0),
    .Input_21_address0(grp_nonlinear_leaky_row_fu_486_Input_21_address0),
    .Input_21_ce0(grp_nonlinear_leaky_row_fu_486_Input_21_ce0),
    .Input_21_q0(output_buffer_21_q0),
    .Input_22_address0(grp_nonlinear_leaky_row_fu_486_Input_22_address0),
    .Input_22_ce0(grp_nonlinear_leaky_row_fu_486_Input_22_ce0),
    .Input_22_q0(output_buffer_22_q0),
    .Input_23_address0(grp_nonlinear_leaky_row_fu_486_Input_23_address0),
    .Input_23_ce0(grp_nonlinear_leaky_row_fu_486_Input_23_ce0),
    .Input_23_q0(output_buffer_23_q0),
    .Input_24_address0(grp_nonlinear_leaky_row_fu_486_Input_24_address0),
    .Input_24_ce0(grp_nonlinear_leaky_row_fu_486_Input_24_ce0),
    .Input_24_q0(output_buffer_24_q0),
    .Input_25_address0(grp_nonlinear_leaky_row_fu_486_Input_25_address0),
    .Input_25_ce0(grp_nonlinear_leaky_row_fu_486_Input_25_ce0),
    .Input_25_q0(output_buffer_25_q0),
    .Input_26_address0(grp_nonlinear_leaky_row_fu_486_Input_26_address0),
    .Input_26_ce0(grp_nonlinear_leaky_row_fu_486_Input_26_ce0),
    .Input_26_q0(output_buffer_26_q0),
    .Input_27_address0(grp_nonlinear_leaky_row_fu_486_Input_27_address0),
    .Input_27_ce0(grp_nonlinear_leaky_row_fu_486_Input_27_ce0),
    .Input_27_q0(output_buffer_27_q0),
    .Input_28_address0(grp_nonlinear_leaky_row_fu_486_Input_28_address0),
    .Input_28_ce0(grp_nonlinear_leaky_row_fu_486_Input_28_ce0),
    .Input_28_q0(output_buffer_28_q0),
    .Input_29_address0(grp_nonlinear_leaky_row_fu_486_Input_29_address0),
    .Input_29_ce0(grp_nonlinear_leaky_row_fu_486_Input_29_ce0),
    .Input_29_q0(output_buffer_29_q0),
    .Input_30_address0(grp_nonlinear_leaky_row_fu_486_Input_30_address0),
    .Input_30_ce0(grp_nonlinear_leaky_row_fu_486_Input_30_ce0),
    .Input_30_q0(output_buffer_30_q0),
    .Input_31_address0(grp_nonlinear_leaky_row_fu_486_Input_31_address0),
    .Input_31_ce0(grp_nonlinear_leaky_row_fu_486_Input_31_ce0),
    .Input_31_q0(output_buffer_31_q0),
    .Input_32_address0(grp_nonlinear_leaky_row_fu_486_Input_32_address0),
    .Input_32_ce0(grp_nonlinear_leaky_row_fu_486_Input_32_ce0),
    .Input_32_q0(output_buffer_32_q0),
    .Input_33_address0(grp_nonlinear_leaky_row_fu_486_Input_33_address0),
    .Input_33_ce0(grp_nonlinear_leaky_row_fu_486_Input_33_ce0),
    .Input_33_q0(output_buffer_33_q0),
    .Input_34_address0(grp_nonlinear_leaky_row_fu_486_Input_34_address0),
    .Input_34_ce0(grp_nonlinear_leaky_row_fu_486_Input_34_ce0),
    .Input_34_q0(output_buffer_34_q0),
    .Input_35_address0(grp_nonlinear_leaky_row_fu_486_Input_35_address0),
    .Input_35_ce0(grp_nonlinear_leaky_row_fu_486_Input_35_ce0),
    .Input_35_q0(output_buffer_35_q0),
    .Input_36_address0(grp_nonlinear_leaky_row_fu_486_Input_36_address0),
    .Input_36_ce0(grp_nonlinear_leaky_row_fu_486_Input_36_ce0),
    .Input_36_q0(output_buffer_36_q0),
    .Input_37_address0(grp_nonlinear_leaky_row_fu_486_Input_37_address0),
    .Input_37_ce0(grp_nonlinear_leaky_row_fu_486_Input_37_ce0),
    .Input_37_q0(output_buffer_37_q0),
    .Input_38_address0(grp_nonlinear_leaky_row_fu_486_Input_38_address0),
    .Input_38_ce0(grp_nonlinear_leaky_row_fu_486_Input_38_ce0),
    .Input_38_q0(output_buffer_38_q0),
    .Input_39_address0(grp_nonlinear_leaky_row_fu_486_Input_39_address0),
    .Input_39_ce0(grp_nonlinear_leaky_row_fu_486_Input_39_ce0),
    .Input_39_q0(output_buffer_39_q0),
    .Input_40_address0(grp_nonlinear_leaky_row_fu_486_Input_40_address0),
    .Input_40_ce0(grp_nonlinear_leaky_row_fu_486_Input_40_ce0),
    .Input_40_q0(output_buffer_40_q0),
    .Input_41_address0(grp_nonlinear_leaky_row_fu_486_Input_41_address0),
    .Input_41_ce0(grp_nonlinear_leaky_row_fu_486_Input_41_ce0),
    .Input_41_q0(output_buffer_41_q0),
    .Input_42_address0(grp_nonlinear_leaky_row_fu_486_Input_42_address0),
    .Input_42_ce0(grp_nonlinear_leaky_row_fu_486_Input_42_ce0),
    .Input_42_q0(output_buffer_42_q0),
    .Input_43_address0(grp_nonlinear_leaky_row_fu_486_Input_43_address0),
    .Input_43_ce0(grp_nonlinear_leaky_row_fu_486_Input_43_ce0),
    .Input_43_q0(output_buffer_43_q0),
    .Input_44_address0(grp_nonlinear_leaky_row_fu_486_Input_44_address0),
    .Input_44_ce0(grp_nonlinear_leaky_row_fu_486_Input_44_ce0),
    .Input_44_q0(output_buffer_44_q0),
    .Input_45_address0(grp_nonlinear_leaky_row_fu_486_Input_45_address0),
    .Input_45_ce0(grp_nonlinear_leaky_row_fu_486_Input_45_ce0),
    .Input_45_q0(output_buffer_45_q0),
    .Input_46_address0(grp_nonlinear_leaky_row_fu_486_Input_46_address0),
    .Input_46_ce0(grp_nonlinear_leaky_row_fu_486_Input_46_ce0),
    .Input_46_q0(output_buffer_46_q0),
    .Input_47_address0(grp_nonlinear_leaky_row_fu_486_Input_47_address0),
    .Input_47_ce0(grp_nonlinear_leaky_row_fu_486_Input_47_ce0),
    .Input_47_q0(output_buffer_47_q0),
    .Input_48_address0(grp_nonlinear_leaky_row_fu_486_Input_48_address0),
    .Input_48_ce0(grp_nonlinear_leaky_row_fu_486_Input_48_ce0),
    .Input_48_q0(output_buffer_48_q0),
    .Input_49_address0(grp_nonlinear_leaky_row_fu_486_Input_49_address0),
    .Input_49_ce0(grp_nonlinear_leaky_row_fu_486_Input_49_ce0),
    .Input_49_q0(output_buffer_49_q0),
    .Input_50_address0(grp_nonlinear_leaky_row_fu_486_Input_50_address0),
    .Input_50_ce0(grp_nonlinear_leaky_row_fu_486_Input_50_ce0),
    .Input_50_q0(output_buffer_50_q0),
    .Input_51_address0(grp_nonlinear_leaky_row_fu_486_Input_51_address0),
    .Input_51_ce0(grp_nonlinear_leaky_row_fu_486_Input_51_ce0),
    .Input_51_q0(output_buffer_51_q0),
    .Input_52_address0(grp_nonlinear_leaky_row_fu_486_Input_52_address0),
    .Input_52_ce0(grp_nonlinear_leaky_row_fu_486_Input_52_ce0),
    .Input_52_q0(output_buffer_52_q0),
    .Input_53_address0(grp_nonlinear_leaky_row_fu_486_Input_53_address0),
    .Input_53_ce0(grp_nonlinear_leaky_row_fu_486_Input_53_ce0),
    .Input_53_q0(output_buffer_53_q0),
    .Input_54_address0(grp_nonlinear_leaky_row_fu_486_Input_54_address0),
    .Input_54_ce0(grp_nonlinear_leaky_row_fu_486_Input_54_ce0),
    .Input_54_q0(output_buffer_54_q0),
    .Input_55_address0(grp_nonlinear_leaky_row_fu_486_Input_55_address0),
    .Input_55_ce0(grp_nonlinear_leaky_row_fu_486_Input_55_ce0),
    .Input_55_q0(output_buffer_55_q0),
    .Input_56_address0(grp_nonlinear_leaky_row_fu_486_Input_56_address0),
    .Input_56_ce0(grp_nonlinear_leaky_row_fu_486_Input_56_ce0),
    .Input_56_q0(output_buffer_56_q0),
    .Input_57_address0(grp_nonlinear_leaky_row_fu_486_Input_57_address0),
    .Input_57_ce0(grp_nonlinear_leaky_row_fu_486_Input_57_ce0),
    .Input_57_q0(output_buffer_57_q0),
    .Input_58_address0(grp_nonlinear_leaky_row_fu_486_Input_58_address0),
    .Input_58_ce0(grp_nonlinear_leaky_row_fu_486_Input_58_ce0),
    .Input_58_q0(output_buffer_58_q0),
    .Input_59_address0(grp_nonlinear_leaky_row_fu_486_Input_59_address0),
    .Input_59_ce0(grp_nonlinear_leaky_row_fu_486_Input_59_ce0),
    .Input_59_q0(output_buffer_59_q0),
    .tm(tm_reg_407),
    .tr(tr_reg_419),
    .tm_n_read(grp_nonlinear_leaky_row_fu_486_tm_n_read),
    .tr_n_read(grp_nonlinear_leaky_row_fu_486_tr_n_read),
    .TC_MIN(TC_MIN),
    .IsNL(IsNL),
    .enable(grp_nonlinear_leaky_row_fu_486_enable),
    .InterSubOutput(InterSubOutput),
    .ltype(ltype),
    .ap_return_0(grp_nonlinear_leaky_row_fu_486_ap_return_0),
    .ap_return_1(grp_nonlinear_leaky_row_fu_486_ap_return_1)
);

FPGA_Acc_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U897(
    .din0(TM_MINxTR_MIN_fu_713_p0),
    .din1(TM_MINxTR_MIN_fu_713_p1),
    .dout(TM_MINxTR_MIN_fu_713_p2)
);

FPGA_Acc_mac_muladd_16ns_24ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_24ns_16ns_32_4_1_U898(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_941_p0),
    .din1(grp_fu_941_p1),
    .din2(grp_fu_941_p2),
    .ce(1'b1),
    .dout(grp_fu_941_p3)
);

FPGA_Acc_mac_muladd_13ns_16ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_13ns_16ns_32ns_32_4_1_U899(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_949_p0),
    .din1(grp_fu_949_p1),
    .din2(add_ln253_reg_1096),
    .ce(1'b1),
    .dout(grp_fu_949_p3)
);

FPGA_Acc_mac_muladd_13ns_8ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_13ns_8ns_32ns_32_4_1_U900(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_956_p0),
    .din1(grp_fu_956_p1),
    .din2(offset_reg_1113),
    .ce(grp_fu_956_ce),
    .dout(grp_fu_956_p3)
);

FPGA_Acc_mac_muladd_8ns_24ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8ns_24ns_32ns_32_4_1_U901(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_962_p0),
    .din1(grp_fu_962_p1),
    .din2(add_ln231_2_reg_1177),
    .ce(1'b1),
    .dout(grp_fu_962_p3)
);

FPGA_Acc_mac_muladd_13ns_8ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_13ns_8ns_32ns_32_4_1_U902(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_969_p0),
    .din1(grp_fu_969_p1),
    .din2(offset_reg_1113),
    .ce(grp_fu_969_ce),
    .dout(grp_fu_969_p3)
);

FPGA_Acc_mac_muladd_8ns_24ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8ns_24ns_32ns_32_4_1_U903(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_975_p0),
    .din1(grp_fu_975_p1),
    .din2(add_ln231_reg_1243),
    .ce(1'b1),
    .dout(grp_fu_975_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state17)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state17);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state34) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state34)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state34);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_nonlinear_leaky_row_fu_486_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
            grp_nonlinear_leaky_row_fu_486_ap_start_reg <= 1'b1;
        end else if ((grp_nonlinear_leaky_row_fu_486_ap_ready == 1'b1)) begin
            grp_nonlinear_leaky_row_fu_486_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        loop_index33_reg_454 <= 8'd0;
    end else if (((exitcond384_fu_912_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_index33_reg_454 <= empty_63_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        loop_index_reg_443 <= 8'd0;
    end else if (((exitcond3_fu_832_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_index_reg_443 <= empty_66_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~(((ap_predicate_op158_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0)) | ((ap_predicate_op156_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0))) & (icmp_ln273_reg_1149 == 1'd0) & (pp_reg_431 == 1'd0) & (1'b1 == ap_CS_fsm_state24)) | ((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln273_reg_1149 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        pp_1_reg_465 <= 1'd1;
    end else if (((~(((ap_predicate_op158_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0)) | ((ap_predicate_op156_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0))) & (icmp_ln268_reg_1153 == 1'd0) & (pp_reg_431 == 1'd1) & (1'b1 == ap_CS_fsm_state24)) | ((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln268_reg_1153 == 1'd1) & (1'b1 == ap_CS_fsm_state26)))) begin
        pp_1_reg_465 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        pp_reg_431 <= pp_1_reg_465;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pp_reg_431 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        t_reg_396 <= t_1_reg_1136;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_reg_396 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln268_reg_1153 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        tm_assign_1_fu_246 <= grp_nonlinear_leaky_row_fu_486_ap_return_0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        tm_assign_1_fu_246 <= reg_674;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln273_reg_1149 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tm_assign_fu_250 <= grp_nonlinear_leaky_row_fu_486_ap_return_0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        tm_assign_fu_250 <= reg_674;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tm_reg_407 <= tm_1_fu_934_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tm_reg_407 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln268_reg_1153 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        tr_assign_1_fu_254 <= grp_nonlinear_leaky_row_fu_486_ap_return_1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        tr_assign_1_fu_254 <= reg_680;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln273_reg_1149 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tr_assign_fu_258 <= grp_nonlinear_leaky_row_fu_486_ap_return_1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        tr_assign_fu_258 <= reg_680;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tr_reg_419 <= tr_2_fu_928_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tr_reg_419 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        DATA_BUS_addr_1_reg_1187 <= p_cast2_cast_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        DATA_BUS_addr_reg_1253 <= p_cast_cast_fu_896_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        OHxOW_cast_reg_1040[23 : 0] <= OHxOW_cast_fu_686_p1[23 : 0];
        empty_reg_1047 <= empty_fu_690_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        TM_MINxTR_MIN_reg_1101 <= TM_MINxTR_MIN_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln231_2_reg_1177 <= grp_fu_956_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln231_reg_1243 <= grp_fu_969_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln253_reg_1096 <= grp_fu_941_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln263_reg_1131 <= add_ln263_fu_752_p2;
        loop_cnts_1_cast_reg_1125[7 : 0] <= loop_cnts_1_cast_fu_748_p1[7 : 0];
        loop_cnts_1_reg_1119 <= loop_cnts_1_fu_741_p3;
        offset_reg_1113 <= grp_fu_949_p3;
        zext_ln253_2_reg_1107[12 : 0] <= zext_ln253_2_fu_719_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln263_fu_763_p2 == 1'd0) & (enable_read_read_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        cmp27_reg_1144 <= cmp27_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond384_reg_1264 <= exitcond384_fu_912_p2;
        exitcond384_reg_1264_pp1_iter1_reg <= exitcond384_reg_1264;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond3_reg_1198 <= exitcond3_fu_832_p2;
        exitcond3_reg_1198_pp0_iter1_reg <= exitcond3_reg_1198;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_pp_phi_fu_435_p4 == 1'd1) & (icmp_ln263_fu_763_p2 == 1'd0) & (enable_read_read_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        icmp_ln268_reg_1153 <= grp_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_pp_phi_fu_435_p4 == 1'd0) & (icmp_ln263_fu_763_p2 == 1'd0) & (enable_read_read_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        icmp_ln273_reg_1149 <= grp_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        icmp_ln278_reg_1217 <= icmp_ln278_fu_848_p2;
        tr_1_reg_1212 <= tr_1_fu_842_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_1198 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_buf0_load_reg_1207 <= local_buf0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond384_reg_1264 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        local_buf1_load_reg_1273 <= local_buf1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_674 <= grp_nonlinear_leaky_row_fu_486_ap_return_0;
        reg_680 <= grp_nonlinear_leaky_row_fu_486_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        t_1_reg_1136 <= t_1_fu_757_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tm_assign_1_load_1_reg_1223 <= tm_assign_1_fu_246;
        tr_assign_1_load_1_reg_1228 <= tr_assign_1_fu_254;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tm_assign_load_1_reg_1157 <= tm_assign_fu_250;
        tr_assign_load_1_reg_1162 <= tr_assign_fu_258;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_2_reg_1182 <= {{grp_fu_962_p3[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_reg_1248 <= {{grp_fu_975_p3[31:1]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state33))) begin
        DATA_BUS_blk_n_AW = m_axi_DATA_BUS_AWREADY;
    end else begin
        DATA_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln273_reg_1149 == 1'd0) & (pp_reg_431 == 1'd0) & (1'b1 == ap_CS_fsm_state24)) | ((icmp_ln268_reg_1153 == 1'd0) & (pp_reg_431 == 1'd1) & (1'b1 == ap_CS_fsm_state24)))) begin
        DATA_BUS_blk_n_B = m_axi_DATA_BUS_BVALID;
    end else begin
        DATA_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond3_reg_1198_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((exitcond384_reg_1264_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        DATA_BUS_blk_n_W = m_axi_DATA_BUS_WREADY;
    end else begin
        DATA_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond3_fu_832_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond384_fu_912_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state34 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state34 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & ((icmp_ln263_fu_763_p2 == 1'd1) | (enable_read_read_fu_274_p2 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln263_fu_763_p2 == 1'd1) | (enable_read_read_fu_274_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_956_ce = 1'b1;
    end else begin
        grp_fu_956_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | ((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26)))) begin
        grp_fu_969_ce = 1'b1;
    end else begin
        grp_fu_969_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_nonlinear_leaky_row_fu_486_tm_n_read = tm_assign_1_load_1_reg_1223;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_nonlinear_leaky_row_fu_486_tm_n_read = tm_assign_load_1_reg_1157;
    end else begin
        grp_nonlinear_leaky_row_fu_486_tm_n_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_nonlinear_leaky_row_fu_486_tr_n_read = tr_assign_1_load_1_reg_1228;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_nonlinear_leaky_row_fu_486_tr_n_read = tr_assign_load_1_reg_1162;
    end else begin
        grp_nonlinear_leaky_row_fu_486_tr_n_read = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_buf0_address0 = loop_index_cast_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        local_buf0_address0 = grp_nonlinear_leaky_row_fu_486_local_buf_address0;
    end else begin
        local_buf0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_buf0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        local_buf0_ce0 = grp_nonlinear_leaky_row_fu_486_local_buf_ce0;
    end else begin
        local_buf0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        local_buf0_we0 = grp_nonlinear_leaky_row_fu_486_local_buf_we0;
    end else begin
        local_buf0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        local_buf1_address0 = loop_index33_cast_fu_917_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        local_buf1_address0 = grp_nonlinear_leaky_row_fu_486_local_buf_address0;
    end else begin
        local_buf1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        local_buf1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        local_buf1_ce0 = grp_nonlinear_leaky_row_fu_486_local_buf_ce0;
    end else begin
        local_buf1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        local_buf1_we0 = grp_nonlinear_leaky_row_fu_486_local_buf_we0;
    end else begin
        local_buf1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_DATA_BUS_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            m_axi_DATA_BUS_AWADDR = DATA_BUS_addr_reg_1253;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            m_axi_DATA_BUS_AWADDR = DATA_BUS_addr_1_reg_1187;
        end else begin
            m_axi_DATA_BUS_AWADDR = 'bx;
        end
    end else begin
        m_axi_DATA_BUS_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33)))) begin
        m_axi_DATA_BUS_AWVALID = 1'b1;
    end else begin
        m_axi_DATA_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~(((ap_predicate_op158_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0)) | ((ap_predicate_op156_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state24) & (ap_predicate_op158_writeresp_state24 == 1'b1)) | (~(((ap_predicate_op158_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0)) | ((ap_predicate_op156_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state24) & (ap_predicate_op156_writeresp_state24 == 1'b1)))) begin
        m_axi_DATA_BUS_BREADY = 1'b1;
    end else begin
        m_axi_DATA_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond384_reg_1264_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        m_axi_DATA_BUS_WDATA = local_buf1_load_reg_1273;
    end else if (((exitcond3_reg_1198_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        m_axi_DATA_BUS_WDATA = local_buf0_load_reg_1207;
    end else begin
        m_axi_DATA_BUS_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond3_reg_1198_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond384_reg_1264_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        m_axi_DATA_BUS_WVALID = 1'b1;
    end else begin
        m_axi_DATA_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_0_ce0 = grp_nonlinear_leaky_row_fu_486_Input_0_ce0;
    end else begin
        output_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_10_ce0 = grp_nonlinear_leaky_row_fu_486_Input_10_ce0;
    end else begin
        output_buffer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_11_ce0 = grp_nonlinear_leaky_row_fu_486_Input_11_ce0;
    end else begin
        output_buffer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_12_ce0 = grp_nonlinear_leaky_row_fu_486_Input_12_ce0;
    end else begin
        output_buffer_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_13_ce0 = grp_nonlinear_leaky_row_fu_486_Input_13_ce0;
    end else begin
        output_buffer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_14_ce0 = grp_nonlinear_leaky_row_fu_486_Input_14_ce0;
    end else begin
        output_buffer_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_15_ce0 = grp_nonlinear_leaky_row_fu_486_Input_15_ce0;
    end else begin
        output_buffer_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_16_ce0 = grp_nonlinear_leaky_row_fu_486_Input_16_ce0;
    end else begin
        output_buffer_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_17_ce0 = grp_nonlinear_leaky_row_fu_486_Input_17_ce0;
    end else begin
        output_buffer_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_18_ce0 = grp_nonlinear_leaky_row_fu_486_Input_18_ce0;
    end else begin
        output_buffer_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_19_ce0 = grp_nonlinear_leaky_row_fu_486_Input_19_ce0;
    end else begin
        output_buffer_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_1_ce0 = grp_nonlinear_leaky_row_fu_486_Input_1_ce0;
    end else begin
        output_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_20_ce0 = grp_nonlinear_leaky_row_fu_486_Input_20_ce0;
    end else begin
        output_buffer_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_21_ce0 = grp_nonlinear_leaky_row_fu_486_Input_21_ce0;
    end else begin
        output_buffer_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_22_ce0 = grp_nonlinear_leaky_row_fu_486_Input_22_ce0;
    end else begin
        output_buffer_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_23_ce0 = grp_nonlinear_leaky_row_fu_486_Input_23_ce0;
    end else begin
        output_buffer_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_24_ce0 = grp_nonlinear_leaky_row_fu_486_Input_24_ce0;
    end else begin
        output_buffer_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_25_ce0 = grp_nonlinear_leaky_row_fu_486_Input_25_ce0;
    end else begin
        output_buffer_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_26_ce0 = grp_nonlinear_leaky_row_fu_486_Input_26_ce0;
    end else begin
        output_buffer_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_27_ce0 = grp_nonlinear_leaky_row_fu_486_Input_27_ce0;
    end else begin
        output_buffer_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_28_ce0 = grp_nonlinear_leaky_row_fu_486_Input_28_ce0;
    end else begin
        output_buffer_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_29_ce0 = grp_nonlinear_leaky_row_fu_486_Input_29_ce0;
    end else begin
        output_buffer_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_2_ce0 = grp_nonlinear_leaky_row_fu_486_Input_2_ce0;
    end else begin
        output_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_30_ce0 = grp_nonlinear_leaky_row_fu_486_Input_30_ce0;
    end else begin
        output_buffer_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_31_ce0 = grp_nonlinear_leaky_row_fu_486_Input_31_ce0;
    end else begin
        output_buffer_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_32_ce0 = grp_nonlinear_leaky_row_fu_486_Input_32_ce0;
    end else begin
        output_buffer_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_33_ce0 = grp_nonlinear_leaky_row_fu_486_Input_33_ce0;
    end else begin
        output_buffer_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_34_ce0 = grp_nonlinear_leaky_row_fu_486_Input_34_ce0;
    end else begin
        output_buffer_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_35_ce0 = grp_nonlinear_leaky_row_fu_486_Input_35_ce0;
    end else begin
        output_buffer_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_36_ce0 = grp_nonlinear_leaky_row_fu_486_Input_36_ce0;
    end else begin
        output_buffer_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_37_ce0 = grp_nonlinear_leaky_row_fu_486_Input_37_ce0;
    end else begin
        output_buffer_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_38_ce0 = grp_nonlinear_leaky_row_fu_486_Input_38_ce0;
    end else begin
        output_buffer_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_39_ce0 = grp_nonlinear_leaky_row_fu_486_Input_39_ce0;
    end else begin
        output_buffer_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_3_ce0 = grp_nonlinear_leaky_row_fu_486_Input_3_ce0;
    end else begin
        output_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_40_ce0 = grp_nonlinear_leaky_row_fu_486_Input_40_ce0;
    end else begin
        output_buffer_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_41_ce0 = grp_nonlinear_leaky_row_fu_486_Input_41_ce0;
    end else begin
        output_buffer_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_42_ce0 = grp_nonlinear_leaky_row_fu_486_Input_42_ce0;
    end else begin
        output_buffer_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_43_ce0 = grp_nonlinear_leaky_row_fu_486_Input_43_ce0;
    end else begin
        output_buffer_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_44_ce0 = grp_nonlinear_leaky_row_fu_486_Input_44_ce0;
    end else begin
        output_buffer_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_45_ce0 = grp_nonlinear_leaky_row_fu_486_Input_45_ce0;
    end else begin
        output_buffer_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_46_ce0 = grp_nonlinear_leaky_row_fu_486_Input_46_ce0;
    end else begin
        output_buffer_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_47_ce0 = grp_nonlinear_leaky_row_fu_486_Input_47_ce0;
    end else begin
        output_buffer_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_48_ce0 = grp_nonlinear_leaky_row_fu_486_Input_48_ce0;
    end else begin
        output_buffer_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_49_ce0 = grp_nonlinear_leaky_row_fu_486_Input_49_ce0;
    end else begin
        output_buffer_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_4_ce0 = grp_nonlinear_leaky_row_fu_486_Input_4_ce0;
    end else begin
        output_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_50_ce0 = grp_nonlinear_leaky_row_fu_486_Input_50_ce0;
    end else begin
        output_buffer_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_51_ce0 = grp_nonlinear_leaky_row_fu_486_Input_51_ce0;
    end else begin
        output_buffer_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_52_ce0 = grp_nonlinear_leaky_row_fu_486_Input_52_ce0;
    end else begin
        output_buffer_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_53_ce0 = grp_nonlinear_leaky_row_fu_486_Input_53_ce0;
    end else begin
        output_buffer_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_54_ce0 = grp_nonlinear_leaky_row_fu_486_Input_54_ce0;
    end else begin
        output_buffer_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_55_ce0 = grp_nonlinear_leaky_row_fu_486_Input_55_ce0;
    end else begin
        output_buffer_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_56_ce0 = grp_nonlinear_leaky_row_fu_486_Input_56_ce0;
    end else begin
        output_buffer_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_57_ce0 = grp_nonlinear_leaky_row_fu_486_Input_57_ce0;
    end else begin
        output_buffer_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_58_ce0 = grp_nonlinear_leaky_row_fu_486_Input_58_ce0;
    end else begin
        output_buffer_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_59_ce0 = grp_nonlinear_leaky_row_fu_486_Input_59_ce0;
    end else begin
        output_buffer_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_5_ce0 = grp_nonlinear_leaky_row_fu_486_Input_5_ce0;
    end else begin
        output_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_6_ce0 = grp_nonlinear_leaky_row_fu_486_Input_6_ce0;
    end else begin
        output_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_7_ce0 = grp_nonlinear_leaky_row_fu_486_Input_7_ce0;
    end else begin
        output_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_8_ce0 = grp_nonlinear_leaky_row_fu_486_Input_8_ce0;
    end else begin
        output_buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        output_buffer_9_ce0 = grp_nonlinear_leaky_row_fu_486_Input_9_ce0;
    end else begin
        output_buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((enable_read_read_fu_274_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((enable_read_read_fu_274_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln263_fu_763_p2 == 1'd1) | (enable_read_read_fu_274_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_phi_mux_pp_phi_fu_435_p4 == 1'd1) & (icmp_ln263_fu_763_p2 == 1'd0) & (enable_read_read_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln273_reg_1149 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln273_reg_1149 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_832_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_832_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if ((~(((ap_predicate_op158_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0)) | ((ap_predicate_op156_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln268_reg_1153 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((grp_nonlinear_leaky_row_fu_486_ap_done == 1'b1) & (icmp_ln268_reg_1153 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond384_fu_912_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond384_fu_912_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OHxOW_cast_fu_686_p1 = OHxOW;

assign TM_MINxTR_MIN_fu_713_p0 = TM_MINxTR_MIN_fu_713_p00;

assign TM_MINxTR_MIN_fu_713_p00 = TR_MIN;

assign TM_MINxTR_MIN_fu_713_p1 = TM_MINxTR_MIN_fu_713_p10;

assign TM_MINxTR_MIN_fu_713_p10 = TM_MIN;

assign add_ln263_fu_752_p2 = (TM_MINxTR_MIN_reg_1101 + 16'd1);

assign add_ln281_fu_922_p2 = (tm_reg_407 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state19_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state19_io));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_block_state36_io));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_block_state36_io));
end

assign ap_block_state17_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((m_axi_DATA_BUS_WREADY == 1'b0) & (exitcond3_reg_1198_pp0_iter1_reg == 1'd0));
end

assign ap_block_state19_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24 = (((ap_predicate_op158_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0)) | ((ap_predicate_op156_writeresp_state24 == 1'b1) & (m_axi_DATA_BUS_BVALID == 1'b0)));
end

assign ap_block_state34_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = ((m_axi_DATA_BUS_WREADY == 1'b0) & (exitcond384_reg_1264_pp1_iter1_reg == 1'd0));
end

assign ap_block_state36_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_pp_phi_fu_435_p4 = pp_reg_431;

always @ (*) begin
    ap_predicate_op156_writeresp_state24 = ((icmp_ln273_reg_1149 == 1'd0) & (pp_reg_431 == 1'd0));
end

always @ (*) begin
    ap_predicate_op158_writeresp_state24 = ((icmp_ln268_reg_1153 == 1'd0) & (pp_reg_431 == 1'd1));
end

assign cmp27_fu_768_p2 = ((t_reg_396 != TM_MINxTR_MIN_reg_1101) ? 1'b1 : 1'b0);

assign empty_61_fu_881_p2 = ($signed(p_cast3_fu_877_p1) + $signed(Output_r));

assign empty_63_fu_906_p2 = (loop_index33_reg_454 + 8'd1);

assign empty_64_fu_801_p2 = ($signed(p_cast4_fu_797_p1) + $signed(Output_r));

assign empty_66_fu_826_p2 = (loop_index_reg_443 + 8'd1);

assign empty_fu_690_p1 = TC_MIN[0:0];

assign enable_read_read_fu_274_p2 = enable;

assign exitcond384_fu_912_p2 = ((loop_index33_reg_454 == loop_cnts_1_reg_1119) ? 1'b1 : 1'b0);

assign exitcond3_fu_832_p2 = ((loop_index_reg_443 == loop_cnts_1_reg_1119) ? 1'b1 : 1'b0);

assign grp_fu_624_p2 = ((t_reg_396 == 16'd0) ? 1'b1 : 1'b0);

assign grp_fu_941_p0 = grp_fu_941_p00;

assign grp_fu_941_p00 = m;

assign grp_fu_941_p1 = grp_fu_941_p10;

assign grp_fu_941_p10 = OHxOW;

assign grp_fu_941_p2 = grp_fu_941_p20;

assign grp_fu_941_p20 = c;

assign grp_fu_949_p0 = grp_fu_949_p00;

assign grp_fu_949_p00 = Output_w;

assign grp_fu_949_p1 = grp_fu_949_p10;

assign grp_fu_949_p10 = r;

assign grp_fu_956_p0 = zext_ln253_2_reg_1107;

assign grp_fu_956_p1 = grp_fu_956_p10;

assign grp_fu_956_p10 = tr_assign_1_fu_254;

assign grp_fu_962_p0 = grp_fu_962_p00;

assign grp_fu_962_p00 = tm_assign_1_fu_246;

assign grp_fu_962_p1 = OHxOW_cast_reg_1040;

assign grp_fu_969_p0 = zext_ln253_2_reg_1107;

assign grp_fu_969_p1 = grp_fu_969_p10;

assign grp_fu_969_p10 = tr_assign_fu_258;

assign grp_fu_975_p0 = grp_fu_975_p00;

assign grp_fu_975_p00 = tm_assign_fu_250;

assign grp_fu_975_p1 = OHxOW_cast_reg_1040;

assign grp_nonlinear_leaky_row_fu_486_ap_start = grp_nonlinear_leaky_row_fu_486_ap_start_reg;

assign grp_nonlinear_leaky_row_fu_486_enable = cmp27_reg_1144;

assign icmp_ln263_fu_763_p2 = ((t_reg_396 == add_ln263_reg_1131) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_848_p2 = ((tr_1_fu_842_p2 == TR_MIN) ? 1'b1 : 1'b0);

assign inc_i_fu_735_p2 = (loop_cnts_2_fu_731_p1 + 8'd1);

assign loop_cnts_1_cast_fu_748_p1 = loop_cnts_1_fu_741_p3;

assign loop_cnts_1_fu_741_p3 = ((empty_reg_1047[0:0] == 1'b1) ? inc_i_fu_735_p2 : loop_cnts_2_fu_731_p1);

assign loop_cnts_2_fu_731_p1 = loop_cnts_fu_722_p4;

assign loop_cnts_fu_722_p4 = {{TC_MIN[7:1]}};

assign loop_index33_cast_fu_917_p1 = loop_index33_reg_454;

assign loop_index_cast_fu_837_p1 = loop_index_reg_443;

assign m_axi_DATA_BUS_ARADDR = 64'd0;

assign m_axi_DATA_BUS_ARBURST = 2'd0;

assign m_axi_DATA_BUS_ARCACHE = 4'd0;

assign m_axi_DATA_BUS_ARID = 1'd0;

assign m_axi_DATA_BUS_ARLEN = 32'd0;

assign m_axi_DATA_BUS_ARLOCK = 2'd0;

assign m_axi_DATA_BUS_ARPROT = 3'd0;

assign m_axi_DATA_BUS_ARQOS = 4'd0;

assign m_axi_DATA_BUS_ARREGION = 4'd0;

assign m_axi_DATA_BUS_ARSIZE = 3'd0;

assign m_axi_DATA_BUS_ARUSER = 1'd0;

assign m_axi_DATA_BUS_ARVALID = 1'b0;

assign m_axi_DATA_BUS_AWBURST = 2'd0;

assign m_axi_DATA_BUS_AWCACHE = 4'd0;

assign m_axi_DATA_BUS_AWID = 1'd0;

assign m_axi_DATA_BUS_AWLEN = loop_cnts_1_cast_reg_1125;

assign m_axi_DATA_BUS_AWLOCK = 2'd0;

assign m_axi_DATA_BUS_AWPROT = 3'd0;

assign m_axi_DATA_BUS_AWQOS = 4'd0;

assign m_axi_DATA_BUS_AWREGION = 4'd0;

assign m_axi_DATA_BUS_AWSIZE = 3'd0;

assign m_axi_DATA_BUS_AWUSER = 1'd0;

assign m_axi_DATA_BUS_RREADY = 1'b0;

assign m_axi_DATA_BUS_WID = 1'd0;

assign m_axi_DATA_BUS_WLAST = 1'b0;

assign m_axi_DATA_BUS_WSTRB = 4'd15;

assign m_axi_DATA_BUS_WUSER = 1'd0;

assign output_buffer_0_address0 = grp_nonlinear_leaky_row_fu_486_Input_0_address0;

assign output_buffer_10_address0 = grp_nonlinear_leaky_row_fu_486_Input_10_address0;

assign output_buffer_11_address0 = grp_nonlinear_leaky_row_fu_486_Input_11_address0;

assign output_buffer_12_address0 = grp_nonlinear_leaky_row_fu_486_Input_12_address0;

assign output_buffer_13_address0 = grp_nonlinear_leaky_row_fu_486_Input_13_address0;

assign output_buffer_14_address0 = grp_nonlinear_leaky_row_fu_486_Input_14_address0;

assign output_buffer_15_address0 = grp_nonlinear_leaky_row_fu_486_Input_15_address0;

assign output_buffer_16_address0 = grp_nonlinear_leaky_row_fu_486_Input_16_address0;

assign output_buffer_17_address0 = grp_nonlinear_leaky_row_fu_486_Input_17_address0;

assign output_buffer_18_address0 = grp_nonlinear_leaky_row_fu_486_Input_18_address0;

assign output_buffer_19_address0 = grp_nonlinear_leaky_row_fu_486_Input_19_address0;

assign output_buffer_1_address0 = grp_nonlinear_leaky_row_fu_486_Input_1_address0;

assign output_buffer_20_address0 = grp_nonlinear_leaky_row_fu_486_Input_20_address0;

assign output_buffer_21_address0 = grp_nonlinear_leaky_row_fu_486_Input_21_address0;

assign output_buffer_22_address0 = grp_nonlinear_leaky_row_fu_486_Input_22_address0;

assign output_buffer_23_address0 = grp_nonlinear_leaky_row_fu_486_Input_23_address0;

assign output_buffer_24_address0 = grp_nonlinear_leaky_row_fu_486_Input_24_address0;

assign output_buffer_25_address0 = grp_nonlinear_leaky_row_fu_486_Input_25_address0;

assign output_buffer_26_address0 = grp_nonlinear_leaky_row_fu_486_Input_26_address0;

assign output_buffer_27_address0 = grp_nonlinear_leaky_row_fu_486_Input_27_address0;

assign output_buffer_28_address0 = grp_nonlinear_leaky_row_fu_486_Input_28_address0;

assign output_buffer_29_address0 = grp_nonlinear_leaky_row_fu_486_Input_29_address0;

assign output_buffer_2_address0 = grp_nonlinear_leaky_row_fu_486_Input_2_address0;

assign output_buffer_30_address0 = grp_nonlinear_leaky_row_fu_486_Input_30_address0;

assign output_buffer_31_address0 = grp_nonlinear_leaky_row_fu_486_Input_31_address0;

assign output_buffer_32_address0 = grp_nonlinear_leaky_row_fu_486_Input_32_address0;

assign output_buffer_33_address0 = grp_nonlinear_leaky_row_fu_486_Input_33_address0;

assign output_buffer_34_address0 = grp_nonlinear_leaky_row_fu_486_Input_34_address0;

assign output_buffer_35_address0 = grp_nonlinear_leaky_row_fu_486_Input_35_address0;

assign output_buffer_36_address0 = grp_nonlinear_leaky_row_fu_486_Input_36_address0;

assign output_buffer_37_address0 = grp_nonlinear_leaky_row_fu_486_Input_37_address0;

assign output_buffer_38_address0 = grp_nonlinear_leaky_row_fu_486_Input_38_address0;

assign output_buffer_39_address0 = grp_nonlinear_leaky_row_fu_486_Input_39_address0;

assign output_buffer_3_address0 = grp_nonlinear_leaky_row_fu_486_Input_3_address0;

assign output_buffer_40_address0 = grp_nonlinear_leaky_row_fu_486_Input_40_address0;

assign output_buffer_41_address0 = grp_nonlinear_leaky_row_fu_486_Input_41_address0;

assign output_buffer_42_address0 = grp_nonlinear_leaky_row_fu_486_Input_42_address0;

assign output_buffer_43_address0 = grp_nonlinear_leaky_row_fu_486_Input_43_address0;

assign output_buffer_44_address0 = grp_nonlinear_leaky_row_fu_486_Input_44_address0;

assign output_buffer_45_address0 = grp_nonlinear_leaky_row_fu_486_Input_45_address0;

assign output_buffer_46_address0 = grp_nonlinear_leaky_row_fu_486_Input_46_address0;

assign output_buffer_47_address0 = grp_nonlinear_leaky_row_fu_486_Input_47_address0;

assign output_buffer_48_address0 = grp_nonlinear_leaky_row_fu_486_Input_48_address0;

assign output_buffer_49_address0 = grp_nonlinear_leaky_row_fu_486_Input_49_address0;

assign output_buffer_4_address0 = grp_nonlinear_leaky_row_fu_486_Input_4_address0;

assign output_buffer_50_address0 = grp_nonlinear_leaky_row_fu_486_Input_50_address0;

assign output_buffer_51_address0 = grp_nonlinear_leaky_row_fu_486_Input_51_address0;

assign output_buffer_52_address0 = grp_nonlinear_leaky_row_fu_486_Input_52_address0;

assign output_buffer_53_address0 = grp_nonlinear_leaky_row_fu_486_Input_53_address0;

assign output_buffer_54_address0 = grp_nonlinear_leaky_row_fu_486_Input_54_address0;

assign output_buffer_55_address0 = grp_nonlinear_leaky_row_fu_486_Input_55_address0;

assign output_buffer_56_address0 = grp_nonlinear_leaky_row_fu_486_Input_56_address0;

assign output_buffer_57_address0 = grp_nonlinear_leaky_row_fu_486_Input_57_address0;

assign output_buffer_58_address0 = grp_nonlinear_leaky_row_fu_486_Input_58_address0;

assign output_buffer_59_address0 = grp_nonlinear_leaky_row_fu_486_Input_59_address0;

assign output_buffer_5_address0 = grp_nonlinear_leaky_row_fu_486_Input_5_address0;

assign output_buffer_6_address0 = grp_nonlinear_leaky_row_fu_486_Input_6_address0;

assign output_buffer_7_address0 = grp_nonlinear_leaky_row_fu_486_Input_7_address0;

assign output_buffer_8_address0 = grp_nonlinear_leaky_row_fu_486_Input_8_address0;

assign output_buffer_9_address0 = grp_nonlinear_leaky_row_fu_486_Input_9_address0;

assign p_cast2_cast_fu_816_p1 = $signed(p_cast2_fu_806_p4);

assign p_cast2_fu_806_p4 = {{empty_64_fu_801_p2[63:2]}};

assign p_cast3_fu_877_p1 = $signed(tmp_1_fu_870_p3);

assign p_cast4_fu_797_p1 = $signed(tmp_3_fu_790_p3);

assign p_cast_cast_fu_896_p1 = $signed(p_cast_fu_886_p4);

assign p_cast_fu_886_p4 = {{empty_61_fu_881_p2[63:2]}};

assign t_1_fu_757_p2 = (t_reg_396 + 16'd1);

assign tm_1_fu_934_p3 = ((icmp_ln278_reg_1217[0:0] == 1'b1) ? add_ln281_fu_922_p2 : tm_reg_407);

assign tmp_1_fu_870_p3 = {{tmp_reg_1248}, {2'd0}};

assign tmp_3_fu_790_p3 = {{tmp_2_reg_1182}, {2'd0}};

assign tr_1_fu_842_p2 = (tr_reg_419 + 8'd1);

assign tr_2_fu_928_p3 = ((icmp_ln278_reg_1217[0:0] == 1'b1) ? 8'd0 : tr_1_reg_1212);

assign zext_ln253_2_fu_719_p1 = Output_w;

always @ (posedge ap_clk) begin
    OHxOW_cast_reg_1040[31:24] <= 8'b00000000;
    zext_ln253_2_reg_1107[20:13] <= 8'b00000000;
    loop_cnts_1_cast_reg_1125[31:8] <= 24'b000000000000000000000000;
end

endmodule //FPGA_Acc_write_back_output_reorg
