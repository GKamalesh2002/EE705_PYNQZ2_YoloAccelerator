// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_maxpool_tile5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_r_address0,
        Input_r_ce0,
        Input_r_q0,
        Input1_address0,
        Input1_ce0,
        Input1_q0,
        Output_r_address0,
        Output_r_ce0,
        Output_r_we0,
        Output_r_d0,
        Output2_address0,
        Output2_ce0,
        Output2_we0,
        Output2_d0,
        Ksize,
        K_1,
        Kstride,
        TR_MIN,
        TC_MIN,
        enable
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_pp0_stage0 = 11'd512;
parameter    ap_ST_fsm_state20 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] Input_r_address0;
output   Input_r_ce0;
input  [15:0] Input_r_q0;
output  [11:0] Input1_address0;
output   Input1_ce0;
input  [15:0] Input1_q0;
output  [9:0] Output_r_address0;
output   Output_r_ce0;
output   Output_r_we0;
output  [31:0] Output_r_d0;
output  [9:0] Output2_address0;
output   Output2_ce0;
output   Output2_we0;
output  [31:0] Output2_d0;
input  [7:0] Ksize;
input  [7:0] K_1;
input  [1:0] Kstride;
input  [7:0] TR_MIN;
input  [7:0] TC_MIN;
input  [0:0] enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_r_ce0;
reg Input1_ce0;
reg Output_r_ce0;
reg Output_r_we0;
reg Output2_ce0;
reg Output2_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] indvar_flatten65_reg_170;
reg   [7:0] tr_reg_181;
reg   [23:0] indvar_flatten25_reg_192;
reg   [15:0] indvar_flatten_reg_203;
reg   [7:0] i_reg_214;
reg   [7:0] j_reg_225;
reg   [7:0] tc_reg_236;
wire   [0:0] enable_read_read_fu_82_p2;
wire   [9:0] zext_ln336_fu_247_p1;
reg   [9:0] zext_ln336_reg_742;
wire   [0:0] icmp_ln336_fu_251_p2;
wire   [15:0] bound_fu_261_p2;
reg   [15:0] bound_reg_764;
wire    ap_CS_fsm_state2;
wire   [23:0] grp_fu_681_p2;
reg   [23:0] bound6_reg_781;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [5:0] Kstride_cast_fu_279_p1;
reg   [5:0] Kstride_cast_reg_797;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_687_p2;
reg   [31:0] bound30_reg_803;
wire   [0:0] cmp40_not_mid157_fu_282_p2;
reg   [0:0] cmp40_not_mid157_reg_808;
wire   [0:0] icmp_ln342_fu_287_p2;
reg   [0:0] icmp_ln342_reg_814;
wire   [0:0] icmp_ln340_fu_292_p2;
reg   [0:0] icmp_ln340_reg_820;
wire   [31:0] add_ln336_fu_297_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state10_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_state15_pp0_stage0_iter5;
wire    ap_block_state16_pp0_stage0_iter6;
wire    ap_block_state17_pp0_stage0_iter7;
wire    ap_block_state18_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] mul_cast_fu_307_p2;
reg   [5:0] mul_cast_reg_830;
wire   [0:0] icmp_ln336_1_fu_312_p2;
reg   [0:0] icmp_ln336_1_reg_836;
reg   [0:0] icmp_ln336_1_reg_836_pp0_iter1_reg;
reg   [0:0] icmp_ln336_1_reg_836_pp0_iter2_reg;
reg   [0:0] icmp_ln336_1_reg_836_pp0_iter3_reg;
reg   [0:0] icmp_ln336_1_reg_836_pp0_iter4_reg;
reg   [0:0] icmp_ln336_1_reg_836_pp0_iter5_reg;
reg   [0:0] icmp_ln336_1_reg_836_pp0_iter6_reg;
reg   [0:0] icmp_ln336_1_reg_836_pp0_iter7_reg;
wire   [0:0] icmp_ln338_fu_323_p2;
reg   [0:0] icmp_ln338_reg_840;
reg   [0:0] icmp_ln338_reg_840_pp0_iter1_reg;
reg   [0:0] icmp_ln338_reg_840_pp0_iter2_reg;
reg   [0:0] icmp_ln338_reg_840_pp0_iter3_reg;
wire  signed [5:0] empty_71_fu_328_p1;
reg  signed [5:0] empty_71_reg_851;
wire   [7:0] select_ln332_2_fu_332_p3;
reg   [7:0] select_ln332_2_reg_856;
wire   [0:0] select_ln332_7_fu_345_p3;
reg   [0:0] select_ln332_7_reg_862;
reg   [0:0] select_ln332_7_reg_862_pp0_iter1_reg;
reg   [0:0] select_ln332_7_reg_862_pp0_iter2_reg;
reg   [0:0] select_ln332_7_reg_862_pp0_iter3_reg;
wire   [0:0] or_ln338_fu_352_p2;
reg   [0:0] or_ln338_reg_872;
wire   [15:0] add_ln340_1_fu_358_p2;
reg   [15:0] add_ln340_1_reg_878;
wire   [23:0] select_ln338_6_fu_370_p3;
wire   [5:0] add_fu_382_p2;
reg   [5:0] add_reg_888;
wire   [5:0] mul_cast_mid1_fu_392_p2;
reg   [5:0] mul_cast_mid1_reg_893;
wire   [5:0] select_ln332_1_fu_396_p3;
reg   [5:0] select_ln332_1_reg_898;
wire   [0:0] select_ln338_4_fu_429_p3;
reg   [0:0] select_ln338_4_reg_909;
wire   [0:0] select_ln338_5_fu_435_p3;
reg   [0:0] select_ln338_5_reg_914;
wire   [7:0] i_2_fu_441_p2;
reg   [7:0] i_2_reg_920;
wire   [7:0] select_ln340_fu_457_p3;
reg   [7:0] select_ln340_reg_925;
reg   [7:0] select_ln340_reg_925_pp0_iter2_reg;
reg   [7:0] select_ln340_reg_925_pp0_iter3_reg;
wire   [5:0] trunc_ln340_1_fu_465_p1;
reg   [5:0] trunc_ln340_1_reg_933;
wire   [7:0] select_ln340_3_fu_469_p3;
reg   [7:0] select_ln340_3_reg_938;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] select_ln340_4_fu_477_p3;
wire   [9:0] mul26_fu_487_p2;
reg   [9:0] mul26_reg_949;
reg   [9:0] mul26_reg_949_pp0_iter3_reg;
wire   [7:0] tc_3_fu_504_p2;
reg   [7:0] tc_3_reg_954;
wire   [7:0] select_ln338_2_fu_510_p3;
reg   [7:0] select_ln338_2_reg_959;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] empty_73_fu_552_p2;
reg   [0:0] empty_73_reg_970;
reg   [0:0] empty_73_reg_970_pp0_iter3_reg;
reg   [0:0] empty_73_reg_970_pp0_iter4_reg;
reg   [0:0] empty_73_reg_970_pp0_iter5_reg;
reg   [0:0] empty_73_reg_970_pp0_iter6_reg;
reg   [0:0] empty_73_reg_970_pp0_iter7_reg;
wire   [0:0] brmerge22_fu_562_p2;
reg   [0:0] brmerge22_reg_976;
reg   [0:0] brmerge22_reg_976_pp0_iter3_reg;
reg   [0:0] brmerge22_reg_976_pp0_iter4_reg;
reg   [0:0] brmerge22_reg_976_pp0_iter5_reg;
reg   [0:0] brmerge22_reg_976_pp0_iter6_reg;
reg   [0:0] brmerge22_reg_976_pp0_iter7_reg;
reg   [0:0] brmerge22_reg_976_pp0_iter8_reg;
wire   [7:0] j_1_fu_568_p2;
wire   [9:0] mul26_mid1_fu_576_p2;
reg   [9:0] mul26_mid1_reg_985;
wire   [9:0] grp_fu_693_p3;
reg   [9:0] add_ln357_reg_995;
reg    ap_enable_reg_pp0_iter4;
reg   [9:0] add_ln357_reg_995_pp0_iter5_reg;
reg   [9:0] add_ln357_reg_995_pp0_iter6_reg;
reg   [9:0] add_ln357_reg_995_pp0_iter7_reg;
reg   [9:0] add_ln357_reg_995_pp0_iter8_reg;
wire   [11:0] grp_fu_701_p3;
reg   [11:0] add_ln351_reg_1005;
reg    ap_enable_reg_pp0_iter5;
reg   [15:0] tmp_0_reg_1020;
reg   [15:0] tmp_1_reg_1026;
wire  signed [15:0] tmp_0_3_fu_629_p3;
reg  signed [15:0] tmp_0_3_reg_1032;
wire  signed [15:0] tmp_1_3_fu_656_p3;
reg  signed [15:0] tmp_1_3_reg_1037;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter3;
reg    ap_condition_pp0_exit_iter2_state12;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg   [7:0] ap_phi_mux_tr_phi_fu_185_p4;
wire    ap_block_pp0_stage0;
reg   [15:0] ap_phi_mux_indvar_flatten_phi_fu_207_p4;
reg   [7:0] ap_phi_mux_i_phi_fu_218_p4;
reg   [7:0] ap_phi_mux_j_phi_fu_229_p4;
reg   [7:0] ap_phi_mux_tc_phi_fu_240_p4;
wire   [63:0] zext_ln351_2_fu_609_p1;
wire   [63:0] zext_ln357_1_fu_668_p1;
reg   [15:0] tmp_0_2_fu_74;
reg   [15:0] tmp_1_2_fu_78;
wire   [7:0] bound_fu_261_p0;
wire   [15:0] cast_fu_257_p1;
wire   [7:0] bound_fu_261_p1;
wire  signed [5:0] mul_cast_fu_307_p0;
wire   [1:0] mul_cast_fu_307_p1;
wire   [7:0] tr_4_fu_317_p2;
wire   [0:0] icmp_ln340_1_fu_340_p2;
wire   [23:0] add_ln338_1_fu_364_p2;
wire   [5:0] trunc_ln340_fu_378_p1;
wire   [1:0] mul_cast_mid1_fu_392_p1;
wire   [0:0] cmp40_not_fu_387_p2;
wire   [0:0] icmp_ln342_1_fu_411_p2;
wire   [0:0] select_ln332_5_fu_405_p3;
wire   [0:0] select_ln332_6_fu_416_p3;
wire   [7:0] select_ln338_fu_422_p3;
wire   [0:0] or_ln340_fu_447_p2;
wire   [0:0] or_ln340_1_fu_452_p2;
wire   [7:0] mul26_fu_487_p0;
wire   [1:0] mul26_fu_487_p1;
wire   [7:0] select_ln332_fu_492_p3;
wire   [5:0] select_ln332_4_fu_499_p3;
wire   [5:0] add_mid1_fu_523_p2;
wire   [5:0] select_ln338_3_fu_517_p3;
wire   [5:0] select_ln340_1_fu_527_p3;
wire   [0:0] cmp40_not_mid1_fu_538_p2;
wire   [7:0] empty_72_fu_548_p2;
wire   [0:0] select_ln340_2_fu_542_p3;
wire   [0:0] cmp43_not_fu_558_p2;
wire   [7:0] mul26_mid1_fu_576_p0;
wire   [1:0] mul26_mid1_fu_576_p1;
wire   [9:0] select_ln332_3_fu_584_p3;
wire   [9:0] select_ln338_1_fu_590_p3;
wire   [9:0] zext_ln342_fu_596_p1;
wire   [9:0] add28_fu_599_p2;
wire   [15:0] select_ln348_fu_617_p3;
wire   [0:0] icmp_ln353_fu_624_p2;
wire   [15:0] select_ln348_1_fu_644_p3;
wire   [0:0] icmp_ln353_1_fu_651_p2;
wire   [7:0] grp_fu_681_p0;
wire   [15:0] grp_fu_681_p1;
wire   [7:0] grp_fu_687_p0;
wire   [23:0] grp_fu_687_p1;
wire   [7:0] grp_fu_693_p0;
wire   [5:0] grp_fu_693_p1;
wire   [7:0] grp_fu_693_p2;
wire   [5:0] grp_fu_701_p0;
wire   [6:0] grp_fu_701_p1;
wire   [9:0] grp_fu_701_p2;
wire    ap_CS_fsm_state20;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] grp_fu_681_p00;
wire   [23:0] grp_fu_681_p10;
wire   [31:0] grp_fu_687_p00;
wire   [31:0] grp_fu_687_p10;
wire   [9:0] grp_fu_693_p00;
wire   [9:0] grp_fu_693_p20;
wire   [11:0] grp_fu_701_p00;
wire   [11:0] grp_fu_701_p20;
wire   [9:0] mul26_fu_487_p00;
wire   [9:0] mul26_mid1_fu_576_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

FPGA_Acc_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U315(
    .din0(bound_fu_261_p0),
    .din1(bound_fu_261_p1),
    .dout(bound_fu_261_p2)
);

FPGA_Acc_mul_6s_2ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mul_6s_2ns_6_1_1_U316(
    .din0(mul_cast_fu_307_p0),
    .din1(mul_cast_fu_307_p1),
    .dout(mul_cast_fu_307_p2)
);

FPGA_Acc_mul_6s_2ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mul_6s_2ns_6_1_1_U317(
    .din0(empty_71_reg_851),
    .din1(mul_cast_mid1_fu_392_p1),
    .dout(mul_cast_mid1_fu_392_p2)
);

FPGA_Acc_mul_8ns_2ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mul_8ns_2ns_10_1_1_U318(
    .din0(mul26_fu_487_p0),
    .din1(mul26_fu_487_p1),
    .dout(mul26_fu_487_p2)
);

FPGA_Acc_mul_8ns_2ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mul_8ns_2ns_10_1_1_U319(
    .din0(mul26_mid1_fu_576_p0),
    .din1(mul26_mid1_fu_576_p1),
    .dout(mul26_mid1_fu_576_p2)
);

FPGA_Acc_mul_mul_8ns_16ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_8ns_16ns_24_4_1_U320(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_681_p0),
    .din1(grp_fu_681_p1),
    .ce(1'b1),
    .dout(grp_fu_681_p2)
);

FPGA_Acc_mul_mul_8ns_24ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
mul_mul_8ns_24ns_32_4_1_U321(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_687_p0),
    .din1(grp_fu_687_p1),
    .ce(1'b1),
    .dout(grp_fu_687_p2)
);

FPGA_Acc_mac_muladd_8ns_6ns_8ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mac_muladd_8ns_6ns_8ns_10_4_1_U322(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_693_p0),
    .din1(grp_fu_693_p1),
    .din2(grp_fu_693_p2),
    .ce(1'b1),
    .dout(grp_fu_693_p3)
);

FPGA_Acc_mac_muladd_6ns_7ns_10ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_7ns_10ns_12_4_1_U323(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_701_p0),
    .din1(grp_fu_701_p1),
    .din2(grp_fu_701_p2),
    .ce(1'b1),
    .dout(grp_fu_701_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter2_state12)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_214 <= select_ln340_3_reg_938;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_214 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_fu_312_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten25_reg_192 <= select_ln338_6_fu_370_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten25_reg_192 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_fu_312_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten65_reg_170 <= add_ln336_fu_297_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten65_reg_170 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_203 <= select_ln340_4_fu_477_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten_reg_203 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_225 <= j_1_fu_568_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_225 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tc_reg_236 <= select_ln338_2_reg_959;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tc_reg_236 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tr_reg_181 <= select_ln332_2_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tr_reg_181 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Kstride_cast_reg_797[1 : 0] <= Kstride_cast_fu_279_p1[1 : 0];
        bound30_reg_803 <= grp_fu_687_p2;
        cmp40_not_mid157_reg_808 <= cmp40_not_mid157_fu_282_p2;
        icmp_ln340_reg_820 <= icmp_ln340_fu_292_p2;
        icmp_ln342_reg_814 <= icmp_ln342_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_fu_312_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln340_1_reg_878 <= add_ln340_1_fu_358_p2;
        empty_71_reg_851 <= empty_71_fu_328_p1;
        icmp_ln338_reg_840 <= icmp_ln338_fu_323_p2;
        or_ln338_reg_872 <= or_ln338_fu_352_p2;
        select_ln332_7_reg_862 <= select_ln332_7_fu_345_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln351_reg_1005 <= grp_fu_701_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln357_reg_995 <= grp_fu_693_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln357_reg_995_pp0_iter5_reg <= add_ln357_reg_995;
        add_ln357_reg_995_pp0_iter6_reg <= add_ln357_reg_995_pp0_iter5_reg;
        add_ln357_reg_995_pp0_iter7_reg <= add_ln357_reg_995_pp0_iter6_reg;
        add_ln357_reg_995_pp0_iter8_reg <= add_ln357_reg_995_pp0_iter7_reg;
        brmerge22_reg_976_pp0_iter3_reg <= brmerge22_reg_976;
        brmerge22_reg_976_pp0_iter4_reg <= brmerge22_reg_976_pp0_iter3_reg;
        brmerge22_reg_976_pp0_iter5_reg <= brmerge22_reg_976_pp0_iter4_reg;
        brmerge22_reg_976_pp0_iter6_reg <= brmerge22_reg_976_pp0_iter5_reg;
        brmerge22_reg_976_pp0_iter7_reg <= brmerge22_reg_976_pp0_iter6_reg;
        brmerge22_reg_976_pp0_iter8_reg <= brmerge22_reg_976_pp0_iter7_reg;
        empty_73_reg_970_pp0_iter3_reg <= empty_73_reg_970;
        empty_73_reg_970_pp0_iter4_reg <= empty_73_reg_970_pp0_iter3_reg;
        empty_73_reg_970_pp0_iter5_reg <= empty_73_reg_970_pp0_iter4_reg;
        empty_73_reg_970_pp0_iter6_reg <= empty_73_reg_970_pp0_iter5_reg;
        empty_73_reg_970_pp0_iter7_reg <= empty_73_reg_970_pp0_iter6_reg;
        icmp_ln336_1_reg_836_pp0_iter2_reg <= icmp_ln336_1_reg_836_pp0_iter1_reg;
        icmp_ln336_1_reg_836_pp0_iter3_reg <= icmp_ln336_1_reg_836_pp0_iter2_reg;
        icmp_ln336_1_reg_836_pp0_iter4_reg <= icmp_ln336_1_reg_836_pp0_iter3_reg;
        icmp_ln336_1_reg_836_pp0_iter5_reg <= icmp_ln336_1_reg_836_pp0_iter4_reg;
        icmp_ln336_1_reg_836_pp0_iter6_reg <= icmp_ln336_1_reg_836_pp0_iter5_reg;
        icmp_ln336_1_reg_836_pp0_iter7_reg <= icmp_ln336_1_reg_836_pp0_iter6_reg;
        icmp_ln338_reg_840_pp0_iter2_reg <= icmp_ln338_reg_840_pp0_iter1_reg;
        icmp_ln338_reg_840_pp0_iter3_reg <= icmp_ln338_reg_840_pp0_iter2_reg;
        mul26_reg_949_pp0_iter3_reg <= mul26_reg_949;
        select_ln332_7_reg_862_pp0_iter2_reg <= select_ln332_7_reg_862_pp0_iter1_reg;
        select_ln332_7_reg_862_pp0_iter3_reg <= select_ln332_7_reg_862_pp0_iter2_reg;
        select_ln340_reg_925_pp0_iter2_reg <= select_ln340_reg_925;
        select_ln340_reg_925_pp0_iter3_reg <= select_ln340_reg_925_pp0_iter2_reg;
        tmp_1_3_reg_1037 <= tmp_1_3_fu_656_p3;
        tmp_1_reg_1026 <= Input1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln332_7_reg_862 == 1'd0) & (icmp_ln338_reg_840 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_reg_888 <= add_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bound6_reg_781 <= grp_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_fu_251_p2 == 1'd0) & (enable_read_read_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_764 <= bound_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_1_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        brmerge22_reg_976 <= brmerge22_fu_562_p2;
        empty_73_reg_970 <= empty_73_fu_552_p2;
        tc_3_reg_954 <= tc_3_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_2_reg_920 <= i_2_fu_441_p2;
        mul_cast_mid1_reg_893 <= mul_cast_mid1_fu_392_p2;
        select_ln332_1_reg_898 <= select_ln332_1_fu_396_p3;
        select_ln338_4_reg_909 <= select_ln338_4_fu_429_p3;
        select_ln338_5_reg_914 <= select_ln338_5_fu_435_p3;
        select_ln340_reg_925 <= select_ln340_fu_457_p3;
        trunc_ln340_1_reg_933 <= trunc_ln340_1_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln336_1_reg_836 <= icmp_ln336_1_fu_312_p2;
        icmp_ln336_1_reg_836_pp0_iter1_reg <= icmp_ln336_1_reg_836;
        icmp_ln338_reg_840_pp0_iter1_reg <= icmp_ln338_reg_840;
        mul_cast_reg_830 <= mul_cast_fu_307_p2;
        select_ln332_7_reg_862_pp0_iter1_reg <= select_ln332_7_reg_862;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln332_7_reg_862_pp0_iter2_reg == 1'd1) & (icmp_ln336_1_reg_836_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul26_mid1_reg_985 <= mul26_mid1_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln332_7_reg_862_pp0_iter1_reg == 1'd0) & (icmp_ln338_reg_840_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul26_reg_949 <= mul26_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_fu_312_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln332_2_reg_856 <= select_ln332_2_fu_332_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln338_2_reg_959 <= select_ln338_2_fu_510_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln340_3_reg_938 <= select_ln340_3_fu_469_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_0_2_fu_74 <= tmp_0_3_fu_629_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_1_reg_836_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_0_3_reg_1032 <= tmp_0_3_fu_629_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_1_reg_836_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_0_reg_1020 <= Input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_2_fu_78 <= tmp_1_3_fu_656_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln336_reg_742[1 : 0] <= zext_ln336_fu_247_p1[1 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input1_ce0 = 1'b1;
    end else begin
        Input1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_r_ce0 = 1'b1;
    end else begin
        Input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output2_ce0 = 1'b1;
    end else begin
        Output2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (brmerge22_reg_976_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output2_we0 = 1'b1;
    end else begin
        Output2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output_r_ce0 = 1'b1;
    end else begin
        Output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (brmerge22_reg_976_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output_r_we0 = 1'b1;
    end else begin
        Output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_fu_312_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_218_p4 = select_ln340_3_reg_938;
    end else begin
        ap_phi_mux_i_phi_fu_218_p4 = i_reg_214;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_207_p4 = select_ln340_4_fu_477_p3;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_207_p4 = indvar_flatten_reg_203;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_229_p4 = j_1_fu_568_p2;
    end else begin
        ap_phi_mux_j_phi_fu_229_p4 = j_reg_225;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln336_1_reg_836_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tc_phi_fu_240_p4 = select_ln338_2_reg_959;
    end else begin
        ap_phi_mux_tc_phi_fu_240_p4 = tc_reg_236;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_1_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tr_phi_fu_185_p4 = select_ln332_2_reg_856;
    end else begin
        ap_phi_mux_tr_phi_fu_185_p4 = tr_reg_181;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln336_fu_251_p2 == 1'd0) & (enable_read_read_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & ((icmp_ln336_fu_251_p2 == 1'd1) | (enable_read_read_fu_82_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input1_address0 = zext_ln351_2_fu_609_p1;

assign Input_r_address0 = zext_ln351_2_fu_609_p1;

assign Kstride_cast_fu_279_p1 = Kstride;

assign Output2_address0 = zext_ln357_1_fu_668_p1;

assign Output2_d0 = $signed(tmp_1_3_reg_1037);

assign Output_r_address0 = zext_ln357_1_fu_668_p1;

assign Output_r_d0 = $signed(tmp_0_3_reg_1032);

assign add28_fu_599_p2 = (select_ln338_1_fu_590_p3 + zext_ln342_fu_596_p1);

assign add_fu_382_p2 = (mul_cast_reg_830 + trunc_ln340_fu_378_p1);

assign add_ln336_fu_297_p2 = (indvar_flatten65_reg_170 + 32'd1);

assign add_ln338_1_fu_364_p2 = (indvar_flatten25_reg_192 + 24'd1);

assign add_ln340_1_fu_358_p2 = (ap_phi_mux_indvar_flatten_phi_fu_207_p4 + 16'd1);

assign add_mid1_fu_523_p2 = (select_ln332_1_reg_898 + trunc_ln340_1_reg_933);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_261_p0 = cast_fu_257_p1;

assign bound_fu_261_p1 = cast_fu_257_p1;

assign brmerge22_fu_562_p2 = (select_ln340_2_fu_542_p3 | cmp43_not_fu_558_p2);

assign cast_fu_257_p1 = Ksize;

assign cmp40_not_fu_387_p2 = ((ap_phi_mux_i_phi_fu_218_p4 != K_1) ? 1'b1 : 1'b0);

assign cmp40_not_mid157_fu_282_p2 = ((K_1 != 8'd0) ? 1'b1 : 1'b0);

assign cmp40_not_mid1_fu_538_p2 = ((i_2_reg_920 != K_1) ? 1'b1 : 1'b0);

assign cmp43_not_fu_558_p2 = ((select_ln340_reg_925 != K_1) ? 1'b1 : 1'b0);

assign empty_71_fu_328_p1 = tr_4_fu_317_p2[5:0];

assign empty_72_fu_548_p2 = (select_ln340_reg_925 | select_ln340_3_reg_938);

assign empty_73_fu_552_p2 = ((empty_72_fu_548_p2 == 8'd0) ? 1'b1 : 1'b0);

assign enable_read_read_fu_82_p2 = enable;

assign grp_fu_681_p0 = grp_fu_681_p00;

assign grp_fu_681_p00 = TC_MIN;

assign grp_fu_681_p1 = grp_fu_681_p10;

assign grp_fu_681_p10 = bound_reg_764;

assign grp_fu_687_p0 = grp_fu_687_p00;

assign grp_fu_687_p00 = TR_MIN;

assign grp_fu_687_p1 = grp_fu_687_p10;

assign grp_fu_687_p10 = bound6_reg_781;

assign grp_fu_693_p0 = grp_fu_693_p00;

assign grp_fu_693_p00 = select_ln332_2_reg_856;

assign grp_fu_693_p1 = 10'd26;

assign grp_fu_693_p2 = grp_fu_693_p20;

assign grp_fu_693_p20 = select_ln338_2_reg_959;

assign grp_fu_701_p0 = grp_fu_701_p00;

assign grp_fu_701_p00 = select_ln340_1_fu_527_p3;

assign grp_fu_701_p1 = 12'd53;

assign grp_fu_701_p2 = grp_fu_701_p20;

assign grp_fu_701_p20 = add28_fu_599_p2;

assign i_2_fu_441_p2 = (select_ln338_fu_422_p3 + 8'd1);

assign icmp_ln336_1_fu_312_p2 = ((indvar_flatten65_reg_170 == bound30_reg_803) ? 1'b1 : 1'b0);

assign icmp_ln336_fu_251_p2 = ((TR_MIN == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_323_p2 = ((indvar_flatten25_reg_192 == bound6_reg_781) ? 1'b1 : 1'b0);

assign icmp_ln340_1_fu_340_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_207_p4 == bound_reg_764) ? 1'b1 : 1'b0);

assign icmp_ln340_fu_292_p2 = ((bound_reg_764 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln342_1_fu_411_p2 = ((ap_phi_mux_j_phi_fu_229_p4 == Ksize) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_287_p2 = ((Ksize == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln353_1_fu_651_p2 = (($signed(tmp_1_reg_1026) > $signed(select_ln348_1_fu_644_p3)) ? 1'b1 : 1'b0);

assign icmp_ln353_fu_624_p2 = (($signed(tmp_0_reg_1020) > $signed(select_ln348_fu_617_p3)) ? 1'b1 : 1'b0);

assign j_1_fu_568_p2 = (select_ln340_reg_925 + 8'd1);

assign mul26_fu_487_p0 = mul26_fu_487_p00;

assign mul26_fu_487_p00 = ap_phi_mux_tc_phi_fu_240_p4;

assign mul26_fu_487_p1 = zext_ln336_reg_742;

assign mul26_mid1_fu_576_p0 = mul26_mid1_fu_576_p00;

assign mul26_mid1_fu_576_p00 = tc_3_reg_954;

assign mul26_mid1_fu_576_p1 = zext_ln336_reg_742;

assign mul_cast_fu_307_p0 = ap_phi_mux_tr_phi_fu_185_p4[5:0];

assign mul_cast_fu_307_p1 = Kstride_cast_reg_797;

assign mul_cast_mid1_fu_392_p1 = Kstride_cast_reg_797;

assign or_ln338_fu_352_p2 = (select_ln332_7_fu_345_p3 | icmp_ln338_fu_323_p2);

assign or_ln340_1_fu_452_p2 = (or_ln340_fu_447_p2 | icmp_ln338_reg_840);

assign or_ln340_fu_447_p2 = (select_ln338_5_fu_435_p3 | select_ln332_7_reg_862);

assign select_ln332_1_fu_396_p3 = ((icmp_ln338_reg_840[0:0] == 1'b1) ? mul_cast_mid1_fu_392_p2 : mul_cast_reg_830);

assign select_ln332_2_fu_332_p3 = ((icmp_ln338_fu_323_p2[0:0] == 1'b1) ? tr_4_fu_317_p2 : ap_phi_mux_tr_phi_fu_185_p4);

assign select_ln332_3_fu_584_p3 = ((icmp_ln338_reg_840_pp0_iter3_reg[0:0] == 1'b1) ? 10'd0 : mul26_reg_949_pp0_iter3_reg);

assign select_ln332_4_fu_499_p3 = ((icmp_ln338_reg_840_pp0_iter1_reg[0:0] == 1'b1) ? mul_cast_mid1_reg_893 : add_reg_888);

assign select_ln332_5_fu_405_p3 = ((icmp_ln338_reg_840[0:0] == 1'b1) ? cmp40_not_mid157_reg_808 : cmp40_not_fu_387_p2);

assign select_ln332_6_fu_416_p3 = ((icmp_ln338_reg_840[0:0] == 1'b1) ? icmp_ln342_reg_814 : icmp_ln342_1_fu_411_p2);

assign select_ln332_7_fu_345_p3 = ((icmp_ln338_fu_323_p2[0:0] == 1'b1) ? icmp_ln340_reg_820 : icmp_ln340_1_fu_340_p2);

assign select_ln332_fu_492_p3 = ((icmp_ln338_reg_840_pp0_iter1_reg[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_tc_phi_fu_240_p4);

assign select_ln338_1_fu_590_p3 = ((select_ln332_7_reg_862_pp0_iter3_reg[0:0] == 1'b1) ? mul26_mid1_reg_985 : select_ln332_3_fu_584_p3);

assign select_ln338_2_fu_510_p3 = ((select_ln332_7_reg_862_pp0_iter1_reg[0:0] == 1'b1) ? tc_3_fu_504_p2 : select_ln332_fu_492_p3);

assign select_ln338_3_fu_517_p3 = ((select_ln332_7_reg_862_pp0_iter1_reg[0:0] == 1'b1) ? select_ln332_1_reg_898 : select_ln332_4_fu_499_p3);

assign select_ln338_4_fu_429_p3 = ((select_ln332_7_reg_862[0:0] == 1'b1) ? cmp40_not_mid157_reg_808 : select_ln332_5_fu_405_p3);

assign select_ln338_5_fu_435_p3 = ((select_ln332_7_reg_862[0:0] == 1'b1) ? icmp_ln342_reg_814 : select_ln332_6_fu_416_p3);

assign select_ln338_6_fu_370_p3 = ((icmp_ln338_fu_323_p2[0:0] == 1'b1) ? 24'd1 : add_ln338_1_fu_364_p2);

assign select_ln338_fu_422_p3 = ((or_ln338_reg_872[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_i_phi_fu_218_p4);

assign select_ln340_1_fu_527_p3 = ((select_ln338_5_reg_914[0:0] == 1'b1) ? add_mid1_fu_523_p2 : select_ln338_3_fu_517_p3);

assign select_ln340_2_fu_542_p3 = ((select_ln338_5_reg_914[0:0] == 1'b1) ? cmp40_not_mid1_fu_538_p2 : select_ln338_4_reg_909);

assign select_ln340_3_fu_469_p3 = ((select_ln338_5_fu_435_p3[0:0] == 1'b1) ? i_2_fu_441_p2 : select_ln338_fu_422_p3);

assign select_ln340_4_fu_477_p3 = ((or_ln338_reg_872[0:0] == 1'b1) ? 16'd1 : add_ln340_1_reg_878);

assign select_ln340_fu_457_p3 = ((or_ln340_1_fu_452_p2[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_j_phi_fu_229_p4);

assign select_ln348_1_fu_644_p3 = ((empty_73_reg_970_pp0_iter7_reg[0:0] == 1'b1) ? 16'd32769 : tmp_1_2_fu_78);

assign select_ln348_fu_617_p3 = ((empty_73_reg_970_pp0_iter7_reg[0:0] == 1'b1) ? 16'd32769 : tmp_0_2_fu_74);

assign tc_3_fu_504_p2 = (select_ln332_fu_492_p3 + 8'd1);

assign tmp_0_3_fu_629_p3 = ((icmp_ln353_fu_624_p2[0:0] == 1'b1) ? tmp_0_reg_1020 : select_ln348_fu_617_p3);

assign tmp_1_3_fu_656_p3 = ((icmp_ln353_1_fu_651_p2[0:0] == 1'b1) ? tmp_1_reg_1026 : select_ln348_1_fu_644_p3);

assign tr_4_fu_317_p2 = (ap_phi_mux_tr_phi_fu_185_p4 + 8'd1);

assign trunc_ln340_1_fu_465_p1 = i_2_fu_441_p2[5:0];

assign trunc_ln340_fu_378_p1 = ap_phi_mux_i_phi_fu_218_p4[5:0];

assign zext_ln336_fu_247_p1 = Kstride;

assign zext_ln342_fu_596_p1 = select_ln340_reg_925_pp0_iter3_reg;

assign zext_ln351_2_fu_609_p1 = add_ln351_reg_1005;

assign zext_ln357_1_fu_668_p1 = add_ln357_reg_995_pp0_iter8_reg;

always @ (posedge ap_clk) begin
    zext_ln336_reg_742[9:2] <= 8'b00000000;
    Kstride_cast_reg_797[5:2] <= 4'b0000;
end

endmodule //FPGA_Acc_maxpool_tile5
