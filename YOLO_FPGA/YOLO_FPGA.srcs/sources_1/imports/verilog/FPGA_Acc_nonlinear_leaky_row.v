// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_nonlinear_leaky_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_buf_address0,
        local_buf_ce0,
        local_buf_we0,
        local_buf_d0,
        Input_0_address0,
        Input_0_ce0,
        Input_0_q0,
        Input_1_address0,
        Input_1_ce0,
        Input_1_q0,
        Input_2_address0,
        Input_2_ce0,
        Input_2_q0,
        Input_3_address0,
        Input_3_ce0,
        Input_3_q0,
        Input_4_address0,
        Input_4_ce0,
        Input_4_q0,
        Input_5_address0,
        Input_5_ce0,
        Input_5_q0,
        Input_6_address0,
        Input_6_ce0,
        Input_6_q0,
        Input_7_address0,
        Input_7_ce0,
        Input_7_q0,
        Input_8_address0,
        Input_8_ce0,
        Input_8_q0,
        Input_9_address0,
        Input_9_ce0,
        Input_9_q0,
        Input_10_address0,
        Input_10_ce0,
        Input_10_q0,
        Input_11_address0,
        Input_11_ce0,
        Input_11_q0,
        Input_12_address0,
        Input_12_ce0,
        Input_12_q0,
        Input_13_address0,
        Input_13_ce0,
        Input_13_q0,
        Input_14_address0,
        Input_14_ce0,
        Input_14_q0,
        Input_15_address0,
        Input_15_ce0,
        Input_15_q0,
        Input_16_address0,
        Input_16_ce0,
        Input_16_q0,
        Input_17_address0,
        Input_17_ce0,
        Input_17_q0,
        Input_18_address0,
        Input_18_ce0,
        Input_18_q0,
        Input_19_address0,
        Input_19_ce0,
        Input_19_q0,
        Input_20_address0,
        Input_20_ce0,
        Input_20_q0,
        Input_21_address0,
        Input_21_ce0,
        Input_21_q0,
        Input_22_address0,
        Input_22_ce0,
        Input_22_q0,
        Input_23_address0,
        Input_23_ce0,
        Input_23_q0,
        Input_24_address0,
        Input_24_ce0,
        Input_24_q0,
        Input_25_address0,
        Input_25_ce0,
        Input_25_q0,
        Input_26_address0,
        Input_26_ce0,
        Input_26_q0,
        Input_27_address0,
        Input_27_ce0,
        Input_27_q0,
        Input_28_address0,
        Input_28_ce0,
        Input_28_q0,
        Input_29_address0,
        Input_29_ce0,
        Input_29_q0,
        Input_30_address0,
        Input_30_ce0,
        Input_30_q0,
        Input_31_address0,
        Input_31_ce0,
        Input_31_q0,
        Input_32_address0,
        Input_32_ce0,
        Input_32_q0,
        Input_33_address0,
        Input_33_ce0,
        Input_33_q0,
        Input_34_address0,
        Input_34_ce0,
        Input_34_q0,
        Input_35_address0,
        Input_35_ce0,
        Input_35_q0,
        Input_36_address0,
        Input_36_ce0,
        Input_36_q0,
        Input_37_address0,
        Input_37_ce0,
        Input_37_q0,
        Input_38_address0,
        Input_38_ce0,
        Input_38_q0,
        Input_39_address0,
        Input_39_ce0,
        Input_39_q0,
        Input_40_address0,
        Input_40_ce0,
        Input_40_q0,
        Input_41_address0,
        Input_41_ce0,
        Input_41_q0,
        Input_42_address0,
        Input_42_ce0,
        Input_42_q0,
        Input_43_address0,
        Input_43_ce0,
        Input_43_q0,
        Input_44_address0,
        Input_44_ce0,
        Input_44_q0,
        Input_45_address0,
        Input_45_ce0,
        Input_45_q0,
        Input_46_address0,
        Input_46_ce0,
        Input_46_q0,
        Input_47_address0,
        Input_47_ce0,
        Input_47_q0,
        Input_48_address0,
        Input_48_ce0,
        Input_48_q0,
        Input_49_address0,
        Input_49_ce0,
        Input_49_q0,
        Input_50_address0,
        Input_50_ce0,
        Input_50_q0,
        Input_51_address0,
        Input_51_ce0,
        Input_51_q0,
        Input_52_address0,
        Input_52_ce0,
        Input_52_q0,
        Input_53_address0,
        Input_53_ce0,
        Input_53_q0,
        Input_54_address0,
        Input_54_ce0,
        Input_54_q0,
        Input_55_address0,
        Input_55_ce0,
        Input_55_q0,
        Input_56_address0,
        Input_56_ce0,
        Input_56_q0,
        Input_57_address0,
        Input_57_ce0,
        Input_57_q0,
        Input_58_address0,
        Input_58_ce0,
        Input_58_q0,
        Input_59_address0,
        Input_59_ce0,
        Input_59_q0,
        tm,
        tr,
        tm_n_read,
        tr_n_read,
        TC_MIN,
        IsNL,
        enable,
        InterSubOutput,
        ltype,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state12 = 4'd4;
parameter    ap_ST_fsm_state13 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] local_buf_address0;
output   local_buf_ce0;
output   local_buf_we0;
output  [31:0] local_buf_d0;
output  [9:0] Input_0_address0;
output   Input_0_ce0;
input  [31:0] Input_0_q0;
output  [9:0] Input_1_address0;
output   Input_1_ce0;
input  [31:0] Input_1_q0;
output  [9:0] Input_2_address0;
output   Input_2_ce0;
input  [31:0] Input_2_q0;
output  [9:0] Input_3_address0;
output   Input_3_ce0;
input  [31:0] Input_3_q0;
output  [9:0] Input_4_address0;
output   Input_4_ce0;
input  [31:0] Input_4_q0;
output  [9:0] Input_5_address0;
output   Input_5_ce0;
input  [31:0] Input_5_q0;
output  [9:0] Input_6_address0;
output   Input_6_ce0;
input  [31:0] Input_6_q0;
output  [9:0] Input_7_address0;
output   Input_7_ce0;
input  [31:0] Input_7_q0;
output  [9:0] Input_8_address0;
output   Input_8_ce0;
input  [31:0] Input_8_q0;
output  [9:0] Input_9_address0;
output   Input_9_ce0;
input  [31:0] Input_9_q0;
output  [9:0] Input_10_address0;
output   Input_10_ce0;
input  [31:0] Input_10_q0;
output  [9:0] Input_11_address0;
output   Input_11_ce0;
input  [31:0] Input_11_q0;
output  [9:0] Input_12_address0;
output   Input_12_ce0;
input  [31:0] Input_12_q0;
output  [9:0] Input_13_address0;
output   Input_13_ce0;
input  [31:0] Input_13_q0;
output  [9:0] Input_14_address0;
output   Input_14_ce0;
input  [31:0] Input_14_q0;
output  [9:0] Input_15_address0;
output   Input_15_ce0;
input  [31:0] Input_15_q0;
output  [9:0] Input_16_address0;
output   Input_16_ce0;
input  [31:0] Input_16_q0;
output  [9:0] Input_17_address0;
output   Input_17_ce0;
input  [31:0] Input_17_q0;
output  [9:0] Input_18_address0;
output   Input_18_ce0;
input  [31:0] Input_18_q0;
output  [9:0] Input_19_address0;
output   Input_19_ce0;
input  [31:0] Input_19_q0;
output  [9:0] Input_20_address0;
output   Input_20_ce0;
input  [31:0] Input_20_q0;
output  [9:0] Input_21_address0;
output   Input_21_ce0;
input  [31:0] Input_21_q0;
output  [9:0] Input_22_address0;
output   Input_22_ce0;
input  [31:0] Input_22_q0;
output  [9:0] Input_23_address0;
output   Input_23_ce0;
input  [31:0] Input_23_q0;
output  [9:0] Input_24_address0;
output   Input_24_ce0;
input  [31:0] Input_24_q0;
output  [9:0] Input_25_address0;
output   Input_25_ce0;
input  [31:0] Input_25_q0;
output  [9:0] Input_26_address0;
output   Input_26_ce0;
input  [31:0] Input_26_q0;
output  [9:0] Input_27_address0;
output   Input_27_ce0;
input  [31:0] Input_27_q0;
output  [9:0] Input_28_address0;
output   Input_28_ce0;
input  [31:0] Input_28_q0;
output  [9:0] Input_29_address0;
output   Input_29_ce0;
input  [31:0] Input_29_q0;
output  [9:0] Input_30_address0;
output   Input_30_ce0;
input  [31:0] Input_30_q0;
output  [9:0] Input_31_address0;
output   Input_31_ce0;
input  [31:0] Input_31_q0;
output  [9:0] Input_32_address0;
output   Input_32_ce0;
input  [31:0] Input_32_q0;
output  [9:0] Input_33_address0;
output   Input_33_ce0;
input  [31:0] Input_33_q0;
output  [9:0] Input_34_address0;
output   Input_34_ce0;
input  [31:0] Input_34_q0;
output  [9:0] Input_35_address0;
output   Input_35_ce0;
input  [31:0] Input_35_q0;
output  [9:0] Input_36_address0;
output   Input_36_ce0;
input  [31:0] Input_36_q0;
output  [9:0] Input_37_address0;
output   Input_37_ce0;
input  [31:0] Input_37_q0;
output  [9:0] Input_38_address0;
output   Input_38_ce0;
input  [31:0] Input_38_q0;
output  [9:0] Input_39_address0;
output   Input_39_ce0;
input  [31:0] Input_39_q0;
output  [9:0] Input_40_address0;
output   Input_40_ce0;
input  [31:0] Input_40_q0;
output  [9:0] Input_41_address0;
output   Input_41_ce0;
input  [31:0] Input_41_q0;
output  [9:0] Input_42_address0;
output   Input_42_ce0;
input  [31:0] Input_42_q0;
output  [9:0] Input_43_address0;
output   Input_43_ce0;
input  [31:0] Input_43_q0;
output  [9:0] Input_44_address0;
output   Input_44_ce0;
input  [31:0] Input_44_q0;
output  [9:0] Input_45_address0;
output   Input_45_ce0;
input  [31:0] Input_45_q0;
output  [9:0] Input_46_address0;
output   Input_46_ce0;
input  [31:0] Input_46_q0;
output  [9:0] Input_47_address0;
output   Input_47_ce0;
input  [31:0] Input_47_q0;
output  [9:0] Input_48_address0;
output   Input_48_ce0;
input  [31:0] Input_48_q0;
output  [9:0] Input_49_address0;
output   Input_49_ce0;
input  [31:0] Input_49_q0;
output  [9:0] Input_50_address0;
output   Input_50_ce0;
input  [31:0] Input_50_q0;
output  [9:0] Input_51_address0;
output   Input_51_ce0;
input  [31:0] Input_51_q0;
output  [9:0] Input_52_address0;
output   Input_52_ce0;
input  [31:0] Input_52_q0;
output  [9:0] Input_53_address0;
output   Input_53_ce0;
input  [31:0] Input_53_q0;
output  [9:0] Input_54_address0;
output   Input_54_ce0;
input  [31:0] Input_54_q0;
output  [9:0] Input_55_address0;
output   Input_55_ce0;
input  [31:0] Input_55_q0;
output  [9:0] Input_56_address0;
output   Input_56_ce0;
input  [31:0] Input_56_q0;
output  [9:0] Input_57_address0;
output   Input_57_ce0;
input  [31:0] Input_57_q0;
output  [9:0] Input_58_address0;
output   Input_58_ce0;
input  [31:0] Input_58_q0;
output  [9:0] Input_59_address0;
output   Input_59_ce0;
input  [31:0] Input_59_q0;
input  [7:0] tm;
input  [7:0] tr;
input  [7:0] tm_n_read;
input  [7:0] tr_n_read;
input  [7:0] TC_MIN;
input   IsNL;
input   enable;
input  [4:0] InterSubOutput;
input  [7:0] ltype;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] local_buf_address0;
reg local_buf_ce0;
reg local_buf_we0;
reg[31:0] local_buf_d0;
reg Input_0_ce0;
reg Input_1_ce0;
reg Input_2_ce0;
reg Input_3_ce0;
reg Input_4_ce0;
reg Input_5_ce0;
reg Input_6_ce0;
reg Input_7_ce0;
reg Input_8_ce0;
reg Input_9_ce0;
reg Input_10_ce0;
reg Input_11_ce0;
reg Input_12_ce0;
reg Input_13_ce0;
reg Input_14_ce0;
reg Input_15_ce0;
reg Input_16_ce0;
reg Input_17_ce0;
reg Input_18_ce0;
reg Input_19_ce0;
reg Input_20_ce0;
reg Input_21_ce0;
reg Input_22_ce0;
reg Input_23_ce0;
reg Input_24_ce0;
reg Input_25_ce0;
reg Input_26_ce0;
reg Input_27_ce0;
reg Input_28_ce0;
reg Input_29_ce0;
reg Input_30_ce0;
reg Input_31_ce0;
reg Input_32_ce0;
reg Input_33_ce0;
reg Input_34_ce0;
reg Input_35_ce0;
reg Input_36_ce0;
reg Input_37_ce0;
reg Input_38_ce0;
reg Input_39_ce0;
reg Input_40_ce0;
reg Input_41_ce0;
reg Input_42_ce0;
reg Input_43_ce0;
reg Input_44_ce0;
reg Input_45_ce0;
reg Input_46_ce0;
reg Input_47_ce0;
reg Input_48_ce0;
reg Input_49_ce0;
reg Input_50_ce0;
reg Input_51_ce0;
reg Input_52_ce0;
reg Input_53_ce0;
reg Input_54_ce0;
reg Input_55_ce0;
reg Input_56_ce0;
reg Input_57_ce0;
reg Input_58_ce0;
reg Input_59_ce0;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] tc_reg_1061;
reg   [15:0] buf_256b_1_0121_reg_1072;
reg   [15:0] buf_256b_0_0120_reg_1084;
wire   [0:0] enable_read_read_fu_218_p2;
wire   [31:0] InterSubOutput_cast_fu_1125_p1;
reg   [31:0] InterSubOutput_cast_reg_1492;
wire   [9:0] mul_ln186_fu_1133_p2;
reg   [9:0] mul_ln186_reg_1511;
wire   [0:0] cmp15_fu_1139_p2;
reg   [0:0] cmp15_reg_1516;
wire   [5:0] trunc_ln186_fu_1145_p1;
reg   [5:0] trunc_ln186_reg_1521;
wire   [7:0] tc_1_fu_1154_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln182_fu_1160_p2;
reg   [0:0] icmp_ln182_reg_1531;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter1_reg;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter2_reg;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter3_reg;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter4_reg;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter5_reg;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter6_reg;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter7_reg;
reg   [0:0] icmp_ln182_reg_1531_pp0_iter8_reg;
reg   [31:0] Input_0_load_reg_1835;
reg   [31:0] Input_1_load_reg_1840;
reg   [31:0] Input_2_load_reg_1845;
reg   [31:0] Input_3_load_reg_1850;
reg   [31:0] Input_4_load_reg_1855;
reg   [31:0] Input_5_load_reg_1860;
reg   [31:0] Input_6_load_reg_1865;
reg   [31:0] Input_7_load_reg_1870;
reg   [31:0] Input_8_load_reg_1875;
reg   [31:0] Input_9_load_reg_1880;
reg   [31:0] Input_10_load_reg_1885;
reg   [31:0] Input_11_load_reg_1890;
reg   [31:0] Input_12_load_reg_1895;
reg   [31:0] Input_13_load_reg_1900;
reg   [31:0] Input_14_load_reg_1905;
reg   [31:0] Input_15_load_reg_1910;
reg   [31:0] Input_16_load_reg_1915;
reg   [31:0] Input_17_load_reg_1920;
reg   [31:0] Input_18_load_reg_1925;
reg   [31:0] Input_19_load_reg_1930;
reg   [31:0] Input_20_load_reg_1935;
reg   [31:0] Input_21_load_reg_1940;
reg   [31:0] Input_22_load_reg_1945;
reg   [31:0] Input_23_load_reg_1950;
reg   [31:0] Input_24_load_reg_1955;
reg   [31:0] Input_25_load_reg_1960;
reg   [31:0] Input_26_load_reg_1965;
reg   [31:0] Input_27_load_reg_1970;
reg   [31:0] Input_28_load_reg_1975;
reg   [31:0] Input_29_load_reg_1980;
reg   [31:0] Input_30_load_reg_1985;
reg   [31:0] Input_31_load_reg_1990;
reg   [31:0] Input_32_load_reg_1995;
reg   [31:0] Input_33_load_reg_2000;
reg   [31:0] Input_34_load_reg_2005;
reg   [31:0] Input_35_load_reg_2010;
reg   [31:0] Input_36_load_reg_2015;
reg   [31:0] Input_37_load_reg_2020;
reg   [31:0] Input_38_load_reg_2025;
reg   [31:0] Input_39_load_reg_2030;
reg   [31:0] Input_40_load_reg_2035;
reg   [31:0] Input_41_load_reg_2040;
reg   [31:0] Input_42_load_reg_2045;
reg   [31:0] Input_43_load_reg_2050;
reg   [31:0] Input_44_load_reg_2055;
reg   [31:0] Input_45_load_reg_2060;
reg   [31:0] Input_46_load_reg_2065;
reg   [31:0] Input_47_load_reg_2070;
reg   [31:0] Input_48_load_reg_2075;
reg   [31:0] Input_49_load_reg_2080;
reg   [31:0] Input_50_load_reg_2085;
reg   [31:0] Input_51_load_reg_2090;
reg   [31:0] Input_52_load_reg_2095;
reg   [31:0] Input_53_load_reg_2100;
reg   [31:0] Input_54_load_reg_2105;
reg   [31:0] Input_55_load_reg_2110;
reg   [31:0] Input_56_load_reg_2115;
reg   [31:0] Input_57_load_reg_2120;
reg   [31:0] Input_58_load_reg_2125;
reg   [31:0] Input_59_load_reg_2130;
wire  signed [31:0] tmp1_fu_1238_p62;
reg  signed [31:0] tmp1_reg_2135;
reg  signed [31:0] tmp1_reg_2135_pp0_iter3_reg;
reg  signed [31:0] tmp1_reg_2135_pp0_iter4_reg;
reg  signed [31:0] tmp1_reg_2135_pp0_iter5_reg;
reg  signed [31:0] tmp1_reg_2135_pp0_iter6_reg;
wire   [31:0] tmp_out_1_fu_1340_p3;
reg   [31:0] tmp_out_1_reg_2148;
wire   [15:0] tmp_int16_fu_1357_p3;
reg   [15:0] tmp_int16_reg_2154;
wire   [0:0] trunc_ln206_fu_1364_p1;
reg   [0:0] trunc_ln206_reg_2160;
wire   [0:0] icmp_ln209_fu_1374_p2;
reg   [0:0] icmp_ln209_reg_2166;
wire   [15:0] buf_256b_1_4_fu_1385_p3;
reg    ap_enable_reg_pp0_iter9;
wire   [15:0] buf_256b_1_5_fu_1391_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_condition_pp0_exit_iter7_state9;
reg   [7:0] phi_ln224_reg_1096;
wire    ap_CS_fsm_state12;
reg   [7:0] phi_ln224_1_reg_1105;
wire   [63:0] zext_ln186_1_fu_1174_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln212_fu_1406_p1;
wire   [63:0] zext_ln219_fu_1441_p1;
wire   [0:0] icmp_ln217_fu_1426_p2;
reg   [7:0] bn_local_fu_198;
wire   [7:0] bn_local_1_fu_1368_p2;
reg   [7:0] cnt_fu_202;
wire   [7:0] cnt_2_fu_1411_p2;
wire   [31:0] or_fu_1397_p3;
wire   [31:0] or1_fu_1432_p3;
wire   [7:0] mul_ln186_fu_1133_p0;
wire   [5:0] mul_ln186_fu_1133_p1;
wire   [9:0] zext_ln186_fu_1165_p1;
wire   [9:0] add_ln186_fu_1169_p2;
wire   [12:0] grp_fu_1306_p1;
wire   [44:0] grp_fu_1306_p2;
wire   [29:0] tmp_out_fu_1319_p4;
wire   [0:0] tmp_fu_1312_p3;
wire  signed [31:0] sext_ln191_1_fu_1329_p1;
wire   [0:0] tmp_out_1_fu_1340_p0;
wire   [31:0] select_ln190_fu_1333_p3;
wire   [31:0] ashr_ln200_fu_1346_p2;
wire   [15:0] trunc_ln198_fu_1350_p1;
wire   [15:0] trunc_ln198_1_fu_1354_p1;
wire   [3:0] trunc_ln182_fu_1422_p1;
wire    ap_CS_fsm_state13;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln186_fu_1133_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
end

FPGA_Acc_mul_8ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_8ns_6ns_10_1_1_U821(
    .din0(mul_ln186_fu_1133_p0),
    .din1(mul_ln186_fu_1133_p1),
    .dout(mul_ln186_fu_1133_p2)
);

FPGA_Acc_mux_606_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_606_32_1_1_U822(
    .din0(Input_0_load_reg_1835),
    .din1(Input_1_load_reg_1840),
    .din2(Input_2_load_reg_1845),
    .din3(Input_3_load_reg_1850),
    .din4(Input_4_load_reg_1855),
    .din5(Input_5_load_reg_1860),
    .din6(Input_6_load_reg_1865),
    .din7(Input_7_load_reg_1870),
    .din8(Input_8_load_reg_1875),
    .din9(Input_9_load_reg_1880),
    .din10(Input_10_load_reg_1885),
    .din11(Input_11_load_reg_1890),
    .din12(Input_12_load_reg_1895),
    .din13(Input_13_load_reg_1900),
    .din14(Input_14_load_reg_1905),
    .din15(Input_15_load_reg_1910),
    .din16(Input_16_load_reg_1915),
    .din17(Input_17_load_reg_1920),
    .din18(Input_18_load_reg_1925),
    .din19(Input_19_load_reg_1930),
    .din20(Input_20_load_reg_1935),
    .din21(Input_21_load_reg_1940),
    .din22(Input_22_load_reg_1945),
    .din23(Input_23_load_reg_1950),
    .din24(Input_24_load_reg_1955),
    .din25(Input_25_load_reg_1960),
    .din26(Input_26_load_reg_1965),
    .din27(Input_27_load_reg_1970),
    .din28(Input_28_load_reg_1975),
    .din29(Input_29_load_reg_1980),
    .din30(Input_30_load_reg_1985),
    .din31(Input_31_load_reg_1990),
    .din32(Input_32_load_reg_1995),
    .din33(Input_33_load_reg_2000),
    .din34(Input_34_load_reg_2005),
    .din35(Input_35_load_reg_2010),
    .din36(Input_36_load_reg_2015),
    .din37(Input_37_load_reg_2020),
    .din38(Input_38_load_reg_2025),
    .din39(Input_39_load_reg_2030),
    .din40(Input_40_load_reg_2035),
    .din41(Input_41_load_reg_2040),
    .din42(Input_42_load_reg_2045),
    .din43(Input_43_load_reg_2050),
    .din44(Input_44_load_reg_2055),
    .din45(Input_45_load_reg_2060),
    .din46(Input_46_load_reg_2065),
    .din47(Input_47_load_reg_2070),
    .din48(Input_48_load_reg_2075),
    .din49(Input_49_load_reg_2080),
    .din50(Input_50_load_reg_2085),
    .din51(Input_51_load_reg_2090),
    .din52(Input_52_load_reg_2095),
    .din53(Input_53_load_reg_2100),
    .din54(Input_54_load_reg_2105),
    .din55(Input_55_load_reg_2110),
    .din56(Input_56_load_reg_2115),
    .din57(Input_57_load_reg_2120),
    .din58(Input_58_load_reg_2125),
    .din59(Input_59_load_reg_2130),
    .din60(trunc_ln186_reg_1521),
    .dout(tmp1_fu_1238_p62)
);

FPGA_Acc_mul_32s_13ns_45_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 45 ))
mul_32s_13ns_45_5_1_U823(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp1_reg_2135),
    .din1(grp_fu_1306_p1),
    .ce(1'b1),
    .dout(grp_fu_1306_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter7_state9)) begin
                ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter6;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_0_preg <= phi_ln224_1_reg_1105;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_1_preg <= phi_ln224_reg_1096;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln209_fu_1374_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bn_local_fu_198 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln209_fu_1374_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bn_local_fu_198 <= bn_local_1_fu_1368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cnt_fu_202 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln209_reg_2166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cnt_fu_202 <= cnt_2_fu_1411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln224_1_reg_1105 <= tm_n_read;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_ln224_1_reg_1105 <= tm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln224_reg_1096 <= tr_n_read;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_ln224_reg_1096 <= tr;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_fu_1160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tc_reg_1061 <= tc_1_fu_1154_p2;
    end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tc_reg_1061 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_reg_1531 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_0_load_reg_1835 <= Input_0_q0;
        Input_10_load_reg_1885 <= Input_10_q0;
        Input_11_load_reg_1890 <= Input_11_q0;
        Input_12_load_reg_1895 <= Input_12_q0;
        Input_13_load_reg_1900 <= Input_13_q0;
        Input_14_load_reg_1905 <= Input_14_q0;
        Input_15_load_reg_1910 <= Input_15_q0;
        Input_16_load_reg_1915 <= Input_16_q0;
        Input_17_load_reg_1920 <= Input_17_q0;
        Input_18_load_reg_1925 <= Input_18_q0;
        Input_19_load_reg_1930 <= Input_19_q0;
        Input_1_load_reg_1840 <= Input_1_q0;
        Input_20_load_reg_1935 <= Input_20_q0;
        Input_21_load_reg_1940 <= Input_21_q0;
        Input_22_load_reg_1945 <= Input_22_q0;
        Input_23_load_reg_1950 <= Input_23_q0;
        Input_24_load_reg_1955 <= Input_24_q0;
        Input_25_load_reg_1960 <= Input_25_q0;
        Input_26_load_reg_1965 <= Input_26_q0;
        Input_27_load_reg_1970 <= Input_27_q0;
        Input_28_load_reg_1975 <= Input_28_q0;
        Input_29_load_reg_1980 <= Input_29_q0;
        Input_2_load_reg_1845 <= Input_2_q0;
        Input_30_load_reg_1985 <= Input_30_q0;
        Input_31_load_reg_1990 <= Input_31_q0;
        Input_32_load_reg_1995 <= Input_32_q0;
        Input_33_load_reg_2000 <= Input_33_q0;
        Input_34_load_reg_2005 <= Input_34_q0;
        Input_35_load_reg_2010 <= Input_35_q0;
        Input_36_load_reg_2015 <= Input_36_q0;
        Input_37_load_reg_2020 <= Input_37_q0;
        Input_38_load_reg_2025 <= Input_38_q0;
        Input_39_load_reg_2030 <= Input_39_q0;
        Input_3_load_reg_1850 <= Input_3_q0;
        Input_40_load_reg_2035 <= Input_40_q0;
        Input_41_load_reg_2040 <= Input_41_q0;
        Input_42_load_reg_2045 <= Input_42_q0;
        Input_43_load_reg_2050 <= Input_43_q0;
        Input_44_load_reg_2055 <= Input_44_q0;
        Input_45_load_reg_2060 <= Input_45_q0;
        Input_46_load_reg_2065 <= Input_46_q0;
        Input_47_load_reg_2070 <= Input_47_q0;
        Input_48_load_reg_2075 <= Input_48_q0;
        Input_49_load_reg_2080 <= Input_49_q0;
        Input_4_load_reg_1855 <= Input_4_q0;
        Input_50_load_reg_2085 <= Input_50_q0;
        Input_51_load_reg_2090 <= Input_51_q0;
        Input_52_load_reg_2095 <= Input_52_q0;
        Input_53_load_reg_2100 <= Input_53_q0;
        Input_54_load_reg_2105 <= Input_54_q0;
        Input_55_load_reg_2110 <= Input_55_q0;
        Input_56_load_reg_2115 <= Input_56_q0;
        Input_57_load_reg_2120 <= Input_57_q0;
        Input_58_load_reg_2125 <= Input_58_q0;
        Input_59_load_reg_2130 <= Input_59_q0;
        Input_5_load_reg_1860 <= Input_5_q0;
        Input_6_load_reg_1865 <= Input_6_q0;
        Input_7_load_reg_1870 <= Input_7_q0;
        Input_8_load_reg_1875 <= Input_8_q0;
        Input_9_load_reg_1880 <= Input_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        InterSubOutput_cast_reg_1492[4 : 0] <= InterSubOutput_cast_fu_1125_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln182_reg_1531_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_256b_0_0120_reg_1084 <= buf_256b_1_5_fu_1391_p3;
        buf_256b_1_0121_reg_1072 <= buf_256b_1_4_fu_1385_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cmp15_reg_1516 <= cmp15_fu_1139_p2;
        mul_ln186_reg_1511 <= mul_ln186_fu_1133_p2;
        trunc_ln186_reg_1521 <= trunc_ln186_fu_1145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln182_reg_1531 <= icmp_ln182_fu_1160_p2;
        icmp_ln182_reg_1531_pp0_iter1_reg <= icmp_ln182_reg_1531;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln182_reg_1531_pp0_iter2_reg <= icmp_ln182_reg_1531_pp0_iter1_reg;
        icmp_ln182_reg_1531_pp0_iter3_reg <= icmp_ln182_reg_1531_pp0_iter2_reg;
        icmp_ln182_reg_1531_pp0_iter4_reg <= icmp_ln182_reg_1531_pp0_iter3_reg;
        icmp_ln182_reg_1531_pp0_iter5_reg <= icmp_ln182_reg_1531_pp0_iter4_reg;
        icmp_ln182_reg_1531_pp0_iter6_reg <= icmp_ln182_reg_1531_pp0_iter5_reg;
        icmp_ln182_reg_1531_pp0_iter7_reg <= icmp_ln182_reg_1531_pp0_iter6_reg;
        icmp_ln182_reg_1531_pp0_iter8_reg <= icmp_ln182_reg_1531_pp0_iter7_reg;
        tmp1_reg_2135_pp0_iter3_reg <= tmp1_reg_2135;
        tmp1_reg_2135_pp0_iter4_reg <= tmp1_reg_2135_pp0_iter3_reg;
        tmp1_reg_2135_pp0_iter5_reg <= tmp1_reg_2135_pp0_iter4_reg;
        tmp1_reg_2135_pp0_iter6_reg <= tmp1_reg_2135_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_reg_1531_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln209_reg_2166 <= icmp_ln209_fu_1374_p2;
        tmp_int16_reg_2154 <= tmp_int16_fu_1357_p3;
        trunc_ln206_reg_2160 <= trunc_ln206_fu_1364_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_reg_1531_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp1_reg_2135 <= tmp1_fu_1238_p62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_reg_1531_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_out_1_reg_2148 <= tmp_out_1_fu_1340_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_0_ce0 = 1'b1;
    end else begin
        Input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_10_ce0 = 1'b1;
    end else begin
        Input_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_11_ce0 = 1'b1;
    end else begin
        Input_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_12_ce0 = 1'b1;
    end else begin
        Input_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_13_ce0 = 1'b1;
    end else begin
        Input_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_14_ce0 = 1'b1;
    end else begin
        Input_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_15_ce0 = 1'b1;
    end else begin
        Input_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_16_ce0 = 1'b1;
    end else begin
        Input_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_17_ce0 = 1'b1;
    end else begin
        Input_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_18_ce0 = 1'b1;
    end else begin
        Input_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_19_ce0 = 1'b1;
    end else begin
        Input_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_1_ce0 = 1'b1;
    end else begin
        Input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_20_ce0 = 1'b1;
    end else begin
        Input_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_21_ce0 = 1'b1;
    end else begin
        Input_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_22_ce0 = 1'b1;
    end else begin
        Input_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_23_ce0 = 1'b1;
    end else begin
        Input_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_24_ce0 = 1'b1;
    end else begin
        Input_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_25_ce0 = 1'b1;
    end else begin
        Input_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_26_ce0 = 1'b1;
    end else begin
        Input_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_27_ce0 = 1'b1;
    end else begin
        Input_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_28_ce0 = 1'b1;
    end else begin
        Input_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_29_ce0 = 1'b1;
    end else begin
        Input_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_2_ce0 = 1'b1;
    end else begin
        Input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_30_ce0 = 1'b1;
    end else begin
        Input_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_31_ce0 = 1'b1;
    end else begin
        Input_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_32_ce0 = 1'b1;
    end else begin
        Input_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_33_ce0 = 1'b1;
    end else begin
        Input_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_34_ce0 = 1'b1;
    end else begin
        Input_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_35_ce0 = 1'b1;
    end else begin
        Input_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_36_ce0 = 1'b1;
    end else begin
        Input_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_37_ce0 = 1'b1;
    end else begin
        Input_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_38_ce0 = 1'b1;
    end else begin
        Input_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_39_ce0 = 1'b1;
    end else begin
        Input_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_3_ce0 = 1'b1;
    end else begin
        Input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_40_ce0 = 1'b1;
    end else begin
        Input_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_41_ce0 = 1'b1;
    end else begin
        Input_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_42_ce0 = 1'b1;
    end else begin
        Input_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_43_ce0 = 1'b1;
    end else begin
        Input_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_44_ce0 = 1'b1;
    end else begin
        Input_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_45_ce0 = 1'b1;
    end else begin
        Input_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_46_ce0 = 1'b1;
    end else begin
        Input_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_47_ce0 = 1'b1;
    end else begin
        Input_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_48_ce0 = 1'b1;
    end else begin
        Input_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_49_ce0 = 1'b1;
    end else begin
        Input_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_4_ce0 = 1'b1;
    end else begin
        Input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_50_ce0 = 1'b1;
    end else begin
        Input_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_51_ce0 = 1'b1;
    end else begin
        Input_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_52_ce0 = 1'b1;
    end else begin
        Input_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_53_ce0 = 1'b1;
    end else begin
        Input_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_54_ce0 = 1'b1;
    end else begin
        Input_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_55_ce0 = 1'b1;
    end else begin
        Input_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_56_ce0 = 1'b1;
    end else begin
        Input_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_57_ce0 = 1'b1;
    end else begin
        Input_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_58_ce0 = 1'b1;
    end else begin
        Input_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_59_ce0 = 1'b1;
    end else begin
        Input_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_5_ce0 = 1'b1;
    end else begin
        Input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_6_ce0 = 1'b1;
    end else begin
        Input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_7_ce0 = 1'b1;
    end else begin
        Input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_8_ce0 = 1'b1;
    end else begin
        Input_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_9_ce0 = 1'b1;
    end else begin
        Input_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_condition_pp0_exit_iter7_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter7_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_fu_1160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return_0 = phi_ln224_1_reg_1105;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return_1 = phi_ln224_reg_1096;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        local_buf_address0 = zext_ln219_fu_1441_p1;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        local_buf_address0 = zext_ln212_fu_1406_p1;
    end else begin
        local_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        local_buf_ce0 = 1'b1;
    end else begin
        local_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        local_buf_d0 = or1_fu_1432_p3;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        local_buf_d0 = or_fu_1397_p3;
    end else begin
        local_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln217_fu_1426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln209_reg_2166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        local_buf_we0 = 1'b1;
    end else begin
        local_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_0_address0 = zext_ln186_1_fu_1174_p1;

assign Input_10_address0 = zext_ln186_1_fu_1174_p1;

assign Input_11_address0 = zext_ln186_1_fu_1174_p1;

assign Input_12_address0 = zext_ln186_1_fu_1174_p1;

assign Input_13_address0 = zext_ln186_1_fu_1174_p1;

assign Input_14_address0 = zext_ln186_1_fu_1174_p1;

assign Input_15_address0 = zext_ln186_1_fu_1174_p1;

assign Input_16_address0 = zext_ln186_1_fu_1174_p1;

assign Input_17_address0 = zext_ln186_1_fu_1174_p1;

assign Input_18_address0 = zext_ln186_1_fu_1174_p1;

assign Input_19_address0 = zext_ln186_1_fu_1174_p1;

assign Input_1_address0 = zext_ln186_1_fu_1174_p1;

assign Input_20_address0 = zext_ln186_1_fu_1174_p1;

assign Input_21_address0 = zext_ln186_1_fu_1174_p1;

assign Input_22_address0 = zext_ln186_1_fu_1174_p1;

assign Input_23_address0 = zext_ln186_1_fu_1174_p1;

assign Input_24_address0 = zext_ln186_1_fu_1174_p1;

assign Input_25_address0 = zext_ln186_1_fu_1174_p1;

assign Input_26_address0 = zext_ln186_1_fu_1174_p1;

assign Input_27_address0 = zext_ln186_1_fu_1174_p1;

assign Input_28_address0 = zext_ln186_1_fu_1174_p1;

assign Input_29_address0 = zext_ln186_1_fu_1174_p1;

assign Input_2_address0 = zext_ln186_1_fu_1174_p1;

assign Input_30_address0 = zext_ln186_1_fu_1174_p1;

assign Input_31_address0 = zext_ln186_1_fu_1174_p1;

assign Input_32_address0 = zext_ln186_1_fu_1174_p1;

assign Input_33_address0 = zext_ln186_1_fu_1174_p1;

assign Input_34_address0 = zext_ln186_1_fu_1174_p1;

assign Input_35_address0 = zext_ln186_1_fu_1174_p1;

assign Input_36_address0 = zext_ln186_1_fu_1174_p1;

assign Input_37_address0 = zext_ln186_1_fu_1174_p1;

assign Input_38_address0 = zext_ln186_1_fu_1174_p1;

assign Input_39_address0 = zext_ln186_1_fu_1174_p1;

assign Input_3_address0 = zext_ln186_1_fu_1174_p1;

assign Input_40_address0 = zext_ln186_1_fu_1174_p1;

assign Input_41_address0 = zext_ln186_1_fu_1174_p1;

assign Input_42_address0 = zext_ln186_1_fu_1174_p1;

assign Input_43_address0 = zext_ln186_1_fu_1174_p1;

assign Input_44_address0 = zext_ln186_1_fu_1174_p1;

assign Input_45_address0 = zext_ln186_1_fu_1174_p1;

assign Input_46_address0 = zext_ln186_1_fu_1174_p1;

assign Input_47_address0 = zext_ln186_1_fu_1174_p1;

assign Input_48_address0 = zext_ln186_1_fu_1174_p1;

assign Input_49_address0 = zext_ln186_1_fu_1174_p1;

assign Input_4_address0 = zext_ln186_1_fu_1174_p1;

assign Input_50_address0 = zext_ln186_1_fu_1174_p1;

assign Input_51_address0 = zext_ln186_1_fu_1174_p1;

assign Input_52_address0 = zext_ln186_1_fu_1174_p1;

assign Input_53_address0 = zext_ln186_1_fu_1174_p1;

assign Input_54_address0 = zext_ln186_1_fu_1174_p1;

assign Input_55_address0 = zext_ln186_1_fu_1174_p1;

assign Input_56_address0 = zext_ln186_1_fu_1174_p1;

assign Input_57_address0 = zext_ln186_1_fu_1174_p1;

assign Input_58_address0 = zext_ln186_1_fu_1174_p1;

assign Input_59_address0 = zext_ln186_1_fu_1174_p1;

assign Input_5_address0 = zext_ln186_1_fu_1174_p1;

assign Input_6_address0 = zext_ln186_1_fu_1174_p1;

assign Input_7_address0 = zext_ln186_1_fu_1174_p1;

assign Input_8_address0 = zext_ln186_1_fu_1174_p1;

assign Input_9_address0 = zext_ln186_1_fu_1174_p1;

assign InterSubOutput_cast_fu_1125_p1 = InterSubOutput;

assign add_ln186_fu_1169_p2 = (mul_ln186_reg_1511 + zext_ln186_fu_1165_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln200_fu_1346_p2 = $signed(tmp_out_1_reg_2148) >>> InterSubOutput_cast_reg_1492;

assign bn_local_1_fu_1368_p2 = (bn_local_fu_198 + 8'd1);

assign buf_256b_1_4_fu_1385_p3 = ((trunc_ln206_reg_2160[0:0] == 1'b1) ? tmp_int16_reg_2154 : buf_256b_1_0121_reg_1072);

assign buf_256b_1_5_fu_1391_p3 = ((trunc_ln206_reg_2160[0:0] == 1'b1) ? buf_256b_0_0120_reg_1084 : tmp_int16_reg_2154);

assign cmp15_fu_1139_p2 = ((ltype == 8'd0) ? 1'b1 : 1'b0);

assign cnt_2_fu_1411_p2 = (cnt_fu_202 + 8'd1);

assign enable_read_read_fu_218_p2 = enable;

assign grp_fu_1306_p1 = 45'd3276;

assign icmp_ln182_fu_1160_p2 = ((tc_reg_1061 == TC_MIN) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_1374_p2 = ((bn_local_1_fu_1368_p2 == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_1426_p2 = ((trunc_ln182_fu_1422_p1 == 4'd0) ? 1'b1 : 1'b0);

assign mul_ln186_fu_1133_p0 = mul_ln186_fu_1133_p00;

assign mul_ln186_fu_1133_p00 = tr;

assign mul_ln186_fu_1133_p1 = 10'd26;

assign or1_fu_1432_p3 = {{buf_256b_1_0121_reg_1072}, {buf_256b_0_0120_reg_1084}};

assign or_fu_1397_p3 = {{buf_256b_1_4_fu_1385_p3}, {buf_256b_1_5_fu_1391_p3}};

assign select_ln190_fu_1333_p3 = ((tmp_fu_1312_p3[0:0] == 1'b1) ? sext_ln191_1_fu_1329_p1 : tmp1_reg_2135_pp0_iter6_reg);

assign sext_ln191_1_fu_1329_p1 = $signed(tmp_out_fu_1319_p4);

assign tc_1_fu_1154_p2 = (tc_reg_1061 + 8'd1);

assign tmp_fu_1312_p3 = tmp1_reg_2135_pp0_iter6_reg[32'd31];

assign tmp_int16_fu_1357_p3 = ((cmp15_reg_1516[0:0] == 1'b1) ? trunc_ln198_fu_1350_p1 : trunc_ln198_1_fu_1354_p1);

assign tmp_out_1_fu_1340_p0 = IsNL;

assign tmp_out_1_fu_1340_p3 = ((tmp_out_1_fu_1340_p0[0:0] == 1'b1) ? select_ln190_fu_1333_p3 : tmp1_reg_2135_pp0_iter6_reg);

assign tmp_out_fu_1319_p4 = {{grp_fu_1306_p2[44:15]}};

assign trunc_ln182_fu_1422_p1 = bn_local_fu_198[3:0];

assign trunc_ln186_fu_1145_p1 = tm[5:0];

assign trunc_ln198_1_fu_1354_p1 = tmp_out_1_reg_2148[15:0];

assign trunc_ln198_fu_1350_p1 = ashr_ln200_fu_1346_p2[15:0];

assign trunc_ln206_fu_1364_p1 = bn_local_fu_198[0:0];

assign zext_ln186_1_fu_1174_p1 = add_ln186_fu_1169_p2;

assign zext_ln186_fu_1165_p1 = tc_reg_1061;

assign zext_ln212_fu_1406_p1 = cnt_fu_202;

assign zext_ln219_fu_1441_p1 = cnt_fu_202;

always @ (posedge ap_clk) begin
    InterSubOutput_cast_reg_1492[31:5] <= 27'b000000000000000000000000000;
end

endmodule //FPGA_Acc_nonlinear_leaky_row
