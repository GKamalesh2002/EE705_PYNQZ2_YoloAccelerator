// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module YOLO2_FPGA_copy_input_weight (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_DATA_BUS_AWVALID,
        m_axi_DATA_BUS_AWREADY,
        m_axi_DATA_BUS_AWADDR,
        m_axi_DATA_BUS_AWID,
        m_axi_DATA_BUS_AWLEN,
        m_axi_DATA_BUS_AWSIZE,
        m_axi_DATA_BUS_AWBURST,
        m_axi_DATA_BUS_AWLOCK,
        m_axi_DATA_BUS_AWCACHE,
        m_axi_DATA_BUS_AWPROT,
        m_axi_DATA_BUS_AWQOS,
        m_axi_DATA_BUS_AWREGION,
        m_axi_DATA_BUS_AWUSER,
        m_axi_DATA_BUS_WVALID,
        m_axi_DATA_BUS_WREADY,
        m_axi_DATA_BUS_WDATA,
        m_axi_DATA_BUS_WSTRB,
        m_axi_DATA_BUS_WLAST,
        m_axi_DATA_BUS_WID,
        m_axi_DATA_BUS_WUSER,
        m_axi_DATA_BUS_ARVALID,
        m_axi_DATA_BUS_ARREADY,
        m_axi_DATA_BUS_ARADDR,
        m_axi_DATA_BUS_ARID,
        m_axi_DATA_BUS_ARLEN,
        m_axi_DATA_BUS_ARSIZE,
        m_axi_DATA_BUS_ARBURST,
        m_axi_DATA_BUS_ARLOCK,
        m_axi_DATA_BUS_ARCACHE,
        m_axi_DATA_BUS_ARPROT,
        m_axi_DATA_BUS_ARQOS,
        m_axi_DATA_BUS_ARREGION,
        m_axi_DATA_BUS_ARUSER,
        m_axi_DATA_BUS_RVALID,
        m_axi_DATA_BUS_RREADY,
        m_axi_DATA_BUS_RDATA,
        m_axi_DATA_BUS_RLAST,
        m_axi_DATA_BUS_RID,
        m_axi_DATA_BUS_RUSER,
        m_axi_DATA_BUS_RRESP,
        m_axi_DATA_BUS_BVALID,
        m_axi_DATA_BUS_BREADY,
        m_axi_DATA_BUS_BRESP,
        m_axi_DATA_BUS_BID,
        m_axi_DATA_BUS_BUSER,
        m_axi_DATA_BUS2_AWVALID,
        m_axi_DATA_BUS2_AWREADY,
        m_axi_DATA_BUS2_AWADDR,
        m_axi_DATA_BUS2_AWID,
        m_axi_DATA_BUS2_AWLEN,
        m_axi_DATA_BUS2_AWSIZE,
        m_axi_DATA_BUS2_AWBURST,
        m_axi_DATA_BUS2_AWLOCK,
        m_axi_DATA_BUS2_AWCACHE,
        m_axi_DATA_BUS2_AWPROT,
        m_axi_DATA_BUS2_AWQOS,
        m_axi_DATA_BUS2_AWREGION,
        m_axi_DATA_BUS2_AWUSER,
        m_axi_DATA_BUS2_WVALID,
        m_axi_DATA_BUS2_WREADY,
        m_axi_DATA_BUS2_WDATA,
        m_axi_DATA_BUS2_WSTRB,
        m_axi_DATA_BUS2_WLAST,
        m_axi_DATA_BUS2_WID,
        m_axi_DATA_BUS2_WUSER,
        m_axi_DATA_BUS2_ARVALID,
        m_axi_DATA_BUS2_ARREADY,
        m_axi_DATA_BUS2_ARADDR,
        m_axi_DATA_BUS2_ARID,
        m_axi_DATA_BUS2_ARLEN,
        m_axi_DATA_BUS2_ARSIZE,
        m_axi_DATA_BUS2_ARBURST,
        m_axi_DATA_BUS2_ARLOCK,
        m_axi_DATA_BUS2_ARCACHE,
        m_axi_DATA_BUS2_ARPROT,
        m_axi_DATA_BUS2_ARQOS,
        m_axi_DATA_BUS2_ARREGION,
        m_axi_DATA_BUS2_ARUSER,
        m_axi_DATA_BUS2_RVALID,
        m_axi_DATA_BUS2_RREADY,
        m_axi_DATA_BUS2_RDATA,
        m_axi_DATA_BUS2_RLAST,
        m_axi_DATA_BUS2_RID,
        m_axi_DATA_BUS2_RUSER,
        m_axi_DATA_BUS2_RRESP,
        m_axi_DATA_BUS2_BVALID,
        m_axi_DATA_BUS2_BREADY,
        m_axi_DATA_BUS2_BRESP,
        m_axi_DATA_BUS2_BID,
        m_axi_DATA_BUS2_BUSER,
        input_r,
        Weight,
        InFM_num,
        Input_w,
        Input_h,
        Kernel_size,
        Kernel_stride,
        r,
        c,
        m,
        n,
        TM_MIN,
        TN,
        TRow,
        TCol,
        Padding_offset,
        input_buffer_address0,
        input_buffer_ce0,
        input_buffer_we0,
        input_buffer_d0,
        input_buffer1_address0,
        input_buffer1_ce0,
        input_buffer1_we0,
        input_buffer1_d0,
        weight_buffer_address0,
        weight_buffer_ce0,
        weight_buffer_we0,
        weight_buffer_d0,
        weight_buffer1_address0,
        weight_buffer1_ce0,
        weight_buffer1_we0,
        weight_buffer1_d0,
        weight_buffer2_address0,
        weight_buffer2_ce0,
        weight_buffer2_we0,
        weight_buffer2_d0,
        weight_buffer22_address0,
        weight_buffer22_ce0,
        weight_buffer22_we0,
        weight_buffer22_d0,
        weight_buffer3_address0,
        weight_buffer3_ce0,
        weight_buffer3_we0,
        weight_buffer3_d0,
        weight_buffer33_address0,
        weight_buffer33_ce0,
        weight_buffer33_we0,
        weight_buffer33_d0,
        weight_buffer4_address0,
        weight_buffer4_ce0,
        weight_buffer4_we0,
        weight_buffer4_d0,
        weight_buffer44_address0,
        weight_buffer44_ce0,
        weight_buffer44_we0,
        weight_buffer44_d0,
        weight_buffer5_address0,
        weight_buffer5_ce0,
        weight_buffer5_we0,
        weight_buffer5_d0,
        weight_buffer55_address0,
        weight_buffer55_ce0,
        weight_buffer55_we0,
        weight_buffer55_d0,
        weight_buffer6_address0,
        weight_buffer6_ce0,
        weight_buffer6_we0,
        weight_buffer6_d0,
        weight_buffer66_address0,
        weight_buffer66_ce0,
        weight_buffer66_we0,
        weight_buffer66_d0,
        weight_buffer7_address0,
        weight_buffer7_ce0,
        weight_buffer7_we0,
        weight_buffer7_d0,
        weight_buffer77_address0,
        weight_buffer77_ce0,
        weight_buffer77_we0,
        weight_buffer77_d0,
        weight_buffer8_address0,
        weight_buffer8_ce0,
        weight_buffer8_we0,
        weight_buffer8_d0,
        weight_buffer88_address0,
        weight_buffer88_ce0,
        weight_buffer88_we0,
        weight_buffer88_d0,
        weight_buffer9_address0,
        weight_buffer9_ce0,
        weight_buffer9_we0,
        weight_buffer9_d0,
        weight_buffer99_address0,
        weight_buffer99_ce0,
        weight_buffer99_we0,
        weight_buffer99_d0,
        weight_buffer10_address0,
        weight_buffer10_ce0,
        weight_buffer10_we0,
        weight_buffer10_d0,
        weight_buffer1010_address0,
        weight_buffer1010_ce0,
        weight_buffer1010_we0,
        weight_buffer1010_d0,
        weight_buffer11_address0,
        weight_buffer11_ce0,
        weight_buffer11_we0,
        weight_buffer11_d0,
        weight_buffer1111_address0,
        weight_buffer1111_ce0,
        weight_buffer1111_we0,
        weight_buffer1111_d0,
        weight_buffer12_address0,
        weight_buffer12_ce0,
        weight_buffer12_we0,
        weight_buffer12_d0,
        weight_buffer1212_address0,
        weight_buffer1212_ce0,
        weight_buffer1212_we0,
        weight_buffer1212_d0,
        weight_buffer13_address0,
        weight_buffer13_ce0,
        weight_buffer13_we0,
        weight_buffer13_d0,
        weight_buffer1313_address0,
        weight_buffer1313_ce0,
        weight_buffer1313_we0,
        weight_buffer1313_d0,
        weight_buffer14_address0,
        weight_buffer14_ce0,
        weight_buffer14_we0,
        weight_buffer14_d0,
        weight_buffer1414_address0,
        weight_buffer1414_ce0,
        weight_buffer1414_we0,
        weight_buffer1414_d0,
        weight_buffer15_address0,
        weight_buffer15_ce0,
        weight_buffer15_we0,
        weight_buffer15_d0,
        weight_buffer1515_address0,
        weight_buffer1515_ce0,
        weight_buffer1515_we0,
        weight_buffer1515_d0,
        weight_buffer16_address0,
        weight_buffer16_ce0,
        weight_buffer16_we0,
        weight_buffer16_d0,
        weight_buffer1616_address0,
        weight_buffer1616_ce0,
        weight_buffer1616_we0,
        weight_buffer1616_d0,
        weight_buffer17_address0,
        weight_buffer17_ce0,
        weight_buffer17_we0,
        weight_buffer17_d0,
        weight_buffer1717_address0,
        weight_buffer1717_ce0,
        weight_buffer1717_we0,
        weight_buffer1717_d0,
        weight_buffer18_address0,
        weight_buffer18_ce0,
        weight_buffer18_we0,
        weight_buffer18_d0,
        weight_buffer1818_address0,
        weight_buffer1818_ce0,
        weight_buffer1818_we0,
        weight_buffer1818_d0,
        weight_buffer19_address0,
        weight_buffer19_ce0,
        weight_buffer19_we0,
        weight_buffer19_d0,
        weight_buffer1919_address0,
        weight_buffer1919_ce0,
        weight_buffer1919_we0,
        weight_buffer1919_d0,
        weight_buffer20_address0,
        weight_buffer20_ce0,
        weight_buffer20_we0,
        weight_buffer20_d0,
        weight_buffer2020_address0,
        weight_buffer2020_ce0,
        weight_buffer2020_we0,
        weight_buffer2020_d0,
        weight_buffer21_address0,
        weight_buffer21_ce0,
        weight_buffer21_we0,
        weight_buffer21_d0,
        weight_buffer2121_address0,
        weight_buffer2121_ce0,
        weight_buffer2121_we0,
        weight_buffer2121_d0,
        weight_buffer2222_address0,
        weight_buffer2222_ce0,
        weight_buffer2222_we0,
        weight_buffer2222_d0,
        weight_buffer2223_address0,
        weight_buffer2223_ce0,
        weight_buffer2223_we0,
        weight_buffer2223_d0,
        weight_buffer23_address0,
        weight_buffer23_ce0,
        weight_buffer23_we0,
        weight_buffer23_d0,
        weight_buffer2324_address0,
        weight_buffer2324_ce0,
        weight_buffer2324_we0,
        weight_buffer2324_d0,
        weight_buffer24_address0,
        weight_buffer24_ce0,
        weight_buffer24_we0,
        weight_buffer24_d0,
        weight_buffer2425_address0,
        weight_buffer2425_ce0,
        weight_buffer2425_we0,
        weight_buffer2425_d0,
        weight_buffer25_address0,
        weight_buffer25_ce0,
        weight_buffer25_we0,
        weight_buffer25_d0,
        weight_buffer2526_address0,
        weight_buffer2526_ce0,
        weight_buffer2526_we0,
        weight_buffer2526_d0,
        weight_buffer26_address0,
        weight_buffer26_ce0,
        weight_buffer26_we0,
        weight_buffer26_d0,
        weight_buffer2627_address0,
        weight_buffer2627_ce0,
        weight_buffer2627_we0,
        weight_buffer2627_d0,
        weight_buffer27_address0,
        weight_buffer27_ce0,
        weight_buffer27_we0,
        weight_buffer27_d0,
        weight_buffer2728_address0,
        weight_buffer2728_ce0,
        weight_buffer2728_we0,
        weight_buffer2728_d0,
        weight_buffer28_address0,
        weight_buffer28_ce0,
        weight_buffer28_we0,
        weight_buffer28_d0,
        weight_buffer2829_address0,
        weight_buffer2829_ce0,
        weight_buffer2829_we0,
        weight_buffer2829_d0,
        weight_buffer29_address0,
        weight_buffer29_ce0,
        weight_buffer29_we0,
        weight_buffer29_d0,
        weight_buffer2930_address0,
        weight_buffer2930_ce0,
        weight_buffer2930_we0,
        weight_buffer2930_d0,
        weight_buffer30_address0,
        weight_buffer30_ce0,
        weight_buffer30_we0,
        weight_buffer30_d0,
        weight_buffer3031_address0,
        weight_buffer3031_ce0,
        weight_buffer3031_we0,
        weight_buffer3031_d0,
        weight_buffer31_address0,
        weight_buffer31_ce0,
        weight_buffer31_we0,
        weight_buffer31_d0,
        weight_buffer3132_address0,
        weight_buffer3132_ce0,
        weight_buffer3132_we0,
        weight_buffer3132_d0,
        weight_buffer32_address0,
        weight_buffer32_ce0,
        weight_buffer32_we0,
        weight_buffer32_d0,
        weight_buffer3233_address0,
        weight_buffer3233_ce0,
        weight_buffer3233_we0,
        weight_buffer3233_d0,
        p_read,
        enable,
        weight_load_enable_offset,
        IHxIW,
        KxK,
        ap_return
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 19'd16384;
parameter    ap_ST_fsm_state18 = 19'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 19'd65536;
parameter    ap_ST_fsm_state24 = 19'd131072;
parameter    ap_ST_fsm_state25 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_DATA_BUS_AWVALID;
input   m_axi_DATA_BUS_AWREADY;
output  [63:0] m_axi_DATA_BUS_AWADDR;
output  [0:0] m_axi_DATA_BUS_AWID;
output  [31:0] m_axi_DATA_BUS_AWLEN;
output  [2:0] m_axi_DATA_BUS_AWSIZE;
output  [1:0] m_axi_DATA_BUS_AWBURST;
output  [1:0] m_axi_DATA_BUS_AWLOCK;
output  [3:0] m_axi_DATA_BUS_AWCACHE;
output  [2:0] m_axi_DATA_BUS_AWPROT;
output  [3:0] m_axi_DATA_BUS_AWQOS;
output  [3:0] m_axi_DATA_BUS_AWREGION;
output  [0:0] m_axi_DATA_BUS_AWUSER;
output   m_axi_DATA_BUS_WVALID;
input   m_axi_DATA_BUS_WREADY;
output  [31:0] m_axi_DATA_BUS_WDATA;
output  [3:0] m_axi_DATA_BUS_WSTRB;
output   m_axi_DATA_BUS_WLAST;
output  [0:0] m_axi_DATA_BUS_WID;
output  [0:0] m_axi_DATA_BUS_WUSER;
output   m_axi_DATA_BUS_ARVALID;
input   m_axi_DATA_BUS_ARREADY;
output  [63:0] m_axi_DATA_BUS_ARADDR;
output  [0:0] m_axi_DATA_BUS_ARID;
output  [31:0] m_axi_DATA_BUS_ARLEN;
output  [2:0] m_axi_DATA_BUS_ARSIZE;
output  [1:0] m_axi_DATA_BUS_ARBURST;
output  [1:0] m_axi_DATA_BUS_ARLOCK;
output  [3:0] m_axi_DATA_BUS_ARCACHE;
output  [2:0] m_axi_DATA_BUS_ARPROT;
output  [3:0] m_axi_DATA_BUS_ARQOS;
output  [3:0] m_axi_DATA_BUS_ARREGION;
output  [0:0] m_axi_DATA_BUS_ARUSER;
input   m_axi_DATA_BUS_RVALID;
output   m_axi_DATA_BUS_RREADY;
input  [31:0] m_axi_DATA_BUS_RDATA;
input   m_axi_DATA_BUS_RLAST;
input  [0:0] m_axi_DATA_BUS_RID;
input  [0:0] m_axi_DATA_BUS_RUSER;
input  [1:0] m_axi_DATA_BUS_RRESP;
input   m_axi_DATA_BUS_BVALID;
output   m_axi_DATA_BUS_BREADY;
input  [1:0] m_axi_DATA_BUS_BRESP;
input  [0:0] m_axi_DATA_BUS_BID;
input  [0:0] m_axi_DATA_BUS_BUSER;
output   m_axi_DATA_BUS2_AWVALID;
input   m_axi_DATA_BUS2_AWREADY;
output  [63:0] m_axi_DATA_BUS2_AWADDR;
output  [0:0] m_axi_DATA_BUS2_AWID;
output  [31:0] m_axi_DATA_BUS2_AWLEN;
output  [2:0] m_axi_DATA_BUS2_AWSIZE;
output  [1:0] m_axi_DATA_BUS2_AWBURST;
output  [1:0] m_axi_DATA_BUS2_AWLOCK;
output  [3:0] m_axi_DATA_BUS2_AWCACHE;
output  [2:0] m_axi_DATA_BUS2_AWPROT;
output  [3:0] m_axi_DATA_BUS2_AWQOS;
output  [3:0] m_axi_DATA_BUS2_AWREGION;
output  [0:0] m_axi_DATA_BUS2_AWUSER;
output   m_axi_DATA_BUS2_WVALID;
input   m_axi_DATA_BUS2_WREADY;
output  [31:0] m_axi_DATA_BUS2_WDATA;
output  [3:0] m_axi_DATA_BUS2_WSTRB;
output   m_axi_DATA_BUS2_WLAST;
output  [0:0] m_axi_DATA_BUS2_WID;
output  [0:0] m_axi_DATA_BUS2_WUSER;
output   m_axi_DATA_BUS2_ARVALID;
input   m_axi_DATA_BUS2_ARREADY;
output  [63:0] m_axi_DATA_BUS2_ARADDR;
output  [0:0] m_axi_DATA_BUS2_ARID;
output  [31:0] m_axi_DATA_BUS2_ARLEN;
output  [2:0] m_axi_DATA_BUS2_ARSIZE;
output  [1:0] m_axi_DATA_BUS2_ARBURST;
output  [1:0] m_axi_DATA_BUS2_ARLOCK;
output  [3:0] m_axi_DATA_BUS2_ARCACHE;
output  [2:0] m_axi_DATA_BUS2_ARPROT;
output  [3:0] m_axi_DATA_BUS2_ARQOS;
output  [3:0] m_axi_DATA_BUS2_ARREGION;
output  [0:0] m_axi_DATA_BUS2_ARUSER;
input   m_axi_DATA_BUS2_RVALID;
output   m_axi_DATA_BUS2_RREADY;
input  [31:0] m_axi_DATA_BUS2_RDATA;
input   m_axi_DATA_BUS2_RLAST;
input  [0:0] m_axi_DATA_BUS2_RID;
input  [0:0] m_axi_DATA_BUS2_RUSER;
input  [1:0] m_axi_DATA_BUS2_RRESP;
input   m_axi_DATA_BUS2_BVALID;
output   m_axi_DATA_BUS2_BREADY;
input  [1:0] m_axi_DATA_BUS2_BRESP;
input  [0:0] m_axi_DATA_BUS2_BID;
input  [0:0] m_axi_DATA_BUS2_BUSER;
input  [63:0] input_r;
input  [63:0] Weight;
input  [31:0] InFM_num;
input  [31:0] Input_w;
input  [8:0] Input_h;
input  [1:0] Kernel_size;
input  [1:0] Kernel_stride;
input  [8:0] r;
input  [8:0] c;
input  [31:0] m;
input  [31:0] n;
input  [5:0] TM_MIN;
input  [31:0] TN;
input  [5:0] TRow;
input  [5:0] TCol;
input  [0:0] Padding_offset;
output  [11:0] input_buffer_address0;
output   input_buffer_ce0;
output   input_buffer_we0;
output  [15:0] input_buffer_d0;
output  [11:0] input_buffer1_address0;
output   input_buffer1_ce0;
output   input_buffer1_we0;
output  [15:0] input_buffer1_d0;
output  [3:0] weight_buffer_address0;
output   weight_buffer_ce0;
output   weight_buffer_we0;
output  [15:0] weight_buffer_d0;
output  [3:0] weight_buffer1_address0;
output   weight_buffer1_ce0;
output   weight_buffer1_we0;
output  [15:0] weight_buffer1_d0;
output  [3:0] weight_buffer2_address0;
output   weight_buffer2_ce0;
output   weight_buffer2_we0;
output  [15:0] weight_buffer2_d0;
output  [3:0] weight_buffer22_address0;
output   weight_buffer22_ce0;
output   weight_buffer22_we0;
output  [15:0] weight_buffer22_d0;
output  [3:0] weight_buffer3_address0;
output   weight_buffer3_ce0;
output   weight_buffer3_we0;
output  [15:0] weight_buffer3_d0;
output  [3:0] weight_buffer33_address0;
output   weight_buffer33_ce0;
output   weight_buffer33_we0;
output  [15:0] weight_buffer33_d0;
output  [3:0] weight_buffer4_address0;
output   weight_buffer4_ce0;
output   weight_buffer4_we0;
output  [15:0] weight_buffer4_d0;
output  [3:0] weight_buffer44_address0;
output   weight_buffer44_ce0;
output   weight_buffer44_we0;
output  [15:0] weight_buffer44_d0;
output  [3:0] weight_buffer5_address0;
output   weight_buffer5_ce0;
output   weight_buffer5_we0;
output  [15:0] weight_buffer5_d0;
output  [3:0] weight_buffer55_address0;
output   weight_buffer55_ce0;
output   weight_buffer55_we0;
output  [15:0] weight_buffer55_d0;
output  [3:0] weight_buffer6_address0;
output   weight_buffer6_ce0;
output   weight_buffer6_we0;
output  [15:0] weight_buffer6_d0;
output  [3:0] weight_buffer66_address0;
output   weight_buffer66_ce0;
output   weight_buffer66_we0;
output  [15:0] weight_buffer66_d0;
output  [3:0] weight_buffer7_address0;
output   weight_buffer7_ce0;
output   weight_buffer7_we0;
output  [15:0] weight_buffer7_d0;
output  [3:0] weight_buffer77_address0;
output   weight_buffer77_ce0;
output   weight_buffer77_we0;
output  [15:0] weight_buffer77_d0;
output  [3:0] weight_buffer8_address0;
output   weight_buffer8_ce0;
output   weight_buffer8_we0;
output  [15:0] weight_buffer8_d0;
output  [3:0] weight_buffer88_address0;
output   weight_buffer88_ce0;
output   weight_buffer88_we0;
output  [15:0] weight_buffer88_d0;
output  [3:0] weight_buffer9_address0;
output   weight_buffer9_ce0;
output   weight_buffer9_we0;
output  [15:0] weight_buffer9_d0;
output  [3:0] weight_buffer99_address0;
output   weight_buffer99_ce0;
output   weight_buffer99_we0;
output  [15:0] weight_buffer99_d0;
output  [3:0] weight_buffer10_address0;
output   weight_buffer10_ce0;
output   weight_buffer10_we0;
output  [15:0] weight_buffer10_d0;
output  [3:0] weight_buffer1010_address0;
output   weight_buffer1010_ce0;
output   weight_buffer1010_we0;
output  [15:0] weight_buffer1010_d0;
output  [3:0] weight_buffer11_address0;
output   weight_buffer11_ce0;
output   weight_buffer11_we0;
output  [15:0] weight_buffer11_d0;
output  [3:0] weight_buffer1111_address0;
output   weight_buffer1111_ce0;
output   weight_buffer1111_we0;
output  [15:0] weight_buffer1111_d0;
output  [3:0] weight_buffer12_address0;
output   weight_buffer12_ce0;
output   weight_buffer12_we0;
output  [15:0] weight_buffer12_d0;
output  [3:0] weight_buffer1212_address0;
output   weight_buffer1212_ce0;
output   weight_buffer1212_we0;
output  [15:0] weight_buffer1212_d0;
output  [3:0] weight_buffer13_address0;
output   weight_buffer13_ce0;
output   weight_buffer13_we0;
output  [15:0] weight_buffer13_d0;
output  [3:0] weight_buffer1313_address0;
output   weight_buffer1313_ce0;
output   weight_buffer1313_we0;
output  [15:0] weight_buffer1313_d0;
output  [3:0] weight_buffer14_address0;
output   weight_buffer14_ce0;
output   weight_buffer14_we0;
output  [15:0] weight_buffer14_d0;
output  [3:0] weight_buffer1414_address0;
output   weight_buffer1414_ce0;
output   weight_buffer1414_we0;
output  [15:0] weight_buffer1414_d0;
output  [3:0] weight_buffer15_address0;
output   weight_buffer15_ce0;
output   weight_buffer15_we0;
output  [15:0] weight_buffer15_d0;
output  [3:0] weight_buffer1515_address0;
output   weight_buffer1515_ce0;
output   weight_buffer1515_we0;
output  [15:0] weight_buffer1515_d0;
output  [3:0] weight_buffer16_address0;
output   weight_buffer16_ce0;
output   weight_buffer16_we0;
output  [15:0] weight_buffer16_d0;
output  [3:0] weight_buffer1616_address0;
output   weight_buffer1616_ce0;
output   weight_buffer1616_we0;
output  [15:0] weight_buffer1616_d0;
output  [3:0] weight_buffer17_address0;
output   weight_buffer17_ce0;
output   weight_buffer17_we0;
output  [15:0] weight_buffer17_d0;
output  [3:0] weight_buffer1717_address0;
output   weight_buffer1717_ce0;
output   weight_buffer1717_we0;
output  [15:0] weight_buffer1717_d0;
output  [3:0] weight_buffer18_address0;
output   weight_buffer18_ce0;
output   weight_buffer18_we0;
output  [15:0] weight_buffer18_d0;
output  [3:0] weight_buffer1818_address0;
output   weight_buffer1818_ce0;
output   weight_buffer1818_we0;
output  [15:0] weight_buffer1818_d0;
output  [3:0] weight_buffer19_address0;
output   weight_buffer19_ce0;
output   weight_buffer19_we0;
output  [15:0] weight_buffer19_d0;
output  [3:0] weight_buffer1919_address0;
output   weight_buffer1919_ce0;
output   weight_buffer1919_we0;
output  [15:0] weight_buffer1919_d0;
output  [3:0] weight_buffer20_address0;
output   weight_buffer20_ce0;
output   weight_buffer20_we0;
output  [15:0] weight_buffer20_d0;
output  [3:0] weight_buffer2020_address0;
output   weight_buffer2020_ce0;
output   weight_buffer2020_we0;
output  [15:0] weight_buffer2020_d0;
output  [3:0] weight_buffer21_address0;
output   weight_buffer21_ce0;
output   weight_buffer21_we0;
output  [15:0] weight_buffer21_d0;
output  [3:0] weight_buffer2121_address0;
output   weight_buffer2121_ce0;
output   weight_buffer2121_we0;
output  [15:0] weight_buffer2121_d0;
output  [3:0] weight_buffer2222_address0;
output   weight_buffer2222_ce0;
output   weight_buffer2222_we0;
output  [15:0] weight_buffer2222_d0;
output  [3:0] weight_buffer2223_address0;
output   weight_buffer2223_ce0;
output   weight_buffer2223_we0;
output  [15:0] weight_buffer2223_d0;
output  [3:0] weight_buffer23_address0;
output   weight_buffer23_ce0;
output   weight_buffer23_we0;
output  [15:0] weight_buffer23_d0;
output  [3:0] weight_buffer2324_address0;
output   weight_buffer2324_ce0;
output   weight_buffer2324_we0;
output  [15:0] weight_buffer2324_d0;
output  [3:0] weight_buffer24_address0;
output   weight_buffer24_ce0;
output   weight_buffer24_we0;
output  [15:0] weight_buffer24_d0;
output  [3:0] weight_buffer2425_address0;
output   weight_buffer2425_ce0;
output   weight_buffer2425_we0;
output  [15:0] weight_buffer2425_d0;
output  [3:0] weight_buffer25_address0;
output   weight_buffer25_ce0;
output   weight_buffer25_we0;
output  [15:0] weight_buffer25_d0;
output  [3:0] weight_buffer2526_address0;
output   weight_buffer2526_ce0;
output   weight_buffer2526_we0;
output  [15:0] weight_buffer2526_d0;
output  [3:0] weight_buffer26_address0;
output   weight_buffer26_ce0;
output   weight_buffer26_we0;
output  [15:0] weight_buffer26_d0;
output  [3:0] weight_buffer2627_address0;
output   weight_buffer2627_ce0;
output   weight_buffer2627_we0;
output  [15:0] weight_buffer2627_d0;
output  [3:0] weight_buffer27_address0;
output   weight_buffer27_ce0;
output   weight_buffer27_we0;
output  [15:0] weight_buffer27_d0;
output  [3:0] weight_buffer2728_address0;
output   weight_buffer2728_ce0;
output   weight_buffer2728_we0;
output  [15:0] weight_buffer2728_d0;
output  [3:0] weight_buffer28_address0;
output   weight_buffer28_ce0;
output   weight_buffer28_we0;
output  [15:0] weight_buffer28_d0;
output  [3:0] weight_buffer2829_address0;
output   weight_buffer2829_ce0;
output   weight_buffer2829_we0;
output  [15:0] weight_buffer2829_d0;
output  [3:0] weight_buffer29_address0;
output   weight_buffer29_ce0;
output   weight_buffer29_we0;
output  [15:0] weight_buffer29_d0;
output  [3:0] weight_buffer2930_address0;
output   weight_buffer2930_ce0;
output   weight_buffer2930_we0;
output  [15:0] weight_buffer2930_d0;
output  [3:0] weight_buffer30_address0;
output   weight_buffer30_ce0;
output   weight_buffer30_we0;
output  [15:0] weight_buffer30_d0;
output  [3:0] weight_buffer3031_address0;
output   weight_buffer3031_ce0;
output   weight_buffer3031_we0;
output  [15:0] weight_buffer3031_d0;
output  [3:0] weight_buffer31_address0;
output   weight_buffer31_ce0;
output   weight_buffer31_we0;
output  [15:0] weight_buffer31_d0;
output  [3:0] weight_buffer3132_address0;
output   weight_buffer3132_ce0;
output   weight_buffer3132_we0;
output  [15:0] weight_buffer3132_d0;
output  [3:0] weight_buffer32_address0;
output   weight_buffer32_ce0;
output   weight_buffer32_we0;
output  [15:0] weight_buffer32_d0;
output  [3:0] weight_buffer3233_address0;
output   weight_buffer3233_ce0;
output   weight_buffer3233_we0;
output  [15:0] weight_buffer3233_d0;
input  [31:0] p_read;
input  [0:0] enable;
input  [0:0] weight_load_enable_offset;
input  [17:0] IHxIW;
input  [3:0] KxK;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_DATA_BUS_ARVALID;
reg m_axi_DATA_BUS_RREADY;
reg m_axi_DATA_BUS2_ARVALID;
reg m_axi_DATA_BUS2_RREADY;
reg weight_buffer_ce0;
reg weight_buffer_we0;
reg weight_buffer1_ce0;
reg weight_buffer1_we0;
reg weight_buffer2_ce0;
reg weight_buffer2_we0;
reg weight_buffer22_ce0;
reg weight_buffer22_we0;
reg weight_buffer3_ce0;
reg weight_buffer3_we0;
reg weight_buffer33_ce0;
reg weight_buffer33_we0;
reg weight_buffer4_ce0;
reg weight_buffer4_we0;
reg weight_buffer44_ce0;
reg weight_buffer44_we0;
reg weight_buffer5_ce0;
reg weight_buffer5_we0;
reg weight_buffer55_ce0;
reg weight_buffer55_we0;
reg weight_buffer6_ce0;
reg weight_buffer6_we0;
reg weight_buffer66_ce0;
reg weight_buffer66_we0;
reg weight_buffer7_ce0;
reg weight_buffer7_we0;
reg weight_buffer77_ce0;
reg weight_buffer77_we0;
reg weight_buffer8_ce0;
reg weight_buffer8_we0;
reg weight_buffer88_ce0;
reg weight_buffer88_we0;
reg weight_buffer9_ce0;
reg weight_buffer9_we0;
reg weight_buffer99_ce0;
reg weight_buffer99_we0;
reg weight_buffer10_ce0;
reg weight_buffer10_we0;
reg weight_buffer1010_ce0;
reg weight_buffer1010_we0;
reg weight_buffer11_ce0;
reg weight_buffer11_we0;
reg weight_buffer1111_ce0;
reg weight_buffer1111_we0;
reg weight_buffer12_ce0;
reg weight_buffer12_we0;
reg weight_buffer1212_ce0;
reg weight_buffer1212_we0;
reg weight_buffer13_ce0;
reg weight_buffer13_we0;
reg weight_buffer1313_ce0;
reg weight_buffer1313_we0;
reg weight_buffer14_ce0;
reg weight_buffer14_we0;
reg weight_buffer1414_ce0;
reg weight_buffer1414_we0;
reg weight_buffer15_ce0;
reg weight_buffer15_we0;
reg weight_buffer1515_ce0;
reg weight_buffer1515_we0;
reg weight_buffer16_ce0;
reg weight_buffer16_we0;
reg weight_buffer1616_ce0;
reg weight_buffer1616_we0;
reg weight_buffer17_ce0;
reg weight_buffer17_we0;
reg weight_buffer1717_ce0;
reg weight_buffer1717_we0;
reg weight_buffer18_ce0;
reg weight_buffer18_we0;
reg weight_buffer1818_ce0;
reg weight_buffer1818_we0;
reg weight_buffer19_ce0;
reg weight_buffer19_we0;
reg weight_buffer1919_ce0;
reg weight_buffer1919_we0;
reg weight_buffer20_ce0;
reg weight_buffer20_we0;
reg weight_buffer2020_ce0;
reg weight_buffer2020_we0;
reg weight_buffer21_ce0;
reg weight_buffer21_we0;
reg weight_buffer2121_ce0;
reg weight_buffer2121_we0;
reg weight_buffer2222_ce0;
reg weight_buffer2222_we0;
reg weight_buffer2223_ce0;
reg weight_buffer2223_we0;
reg weight_buffer23_ce0;
reg weight_buffer23_we0;
reg weight_buffer2324_ce0;
reg weight_buffer2324_we0;
reg weight_buffer24_ce0;
reg weight_buffer24_we0;
reg weight_buffer2425_ce0;
reg weight_buffer2425_we0;
reg weight_buffer25_ce0;
reg weight_buffer25_we0;
reg weight_buffer2526_ce0;
reg weight_buffer2526_we0;
reg weight_buffer26_ce0;
reg weight_buffer26_we0;
reg weight_buffer2627_ce0;
reg weight_buffer2627_we0;
reg weight_buffer27_ce0;
reg weight_buffer27_we0;
reg weight_buffer2728_ce0;
reg weight_buffer2728_we0;
reg weight_buffer28_ce0;
reg weight_buffer28_we0;
reg weight_buffer2829_ce0;
reg weight_buffer2829_we0;
reg weight_buffer29_ce0;
reg weight_buffer29_we0;
reg weight_buffer2930_ce0;
reg weight_buffer2930_we0;
reg weight_buffer30_ce0;
reg weight_buffer30_we0;
reg weight_buffer3031_ce0;
reg weight_buffer3031_we0;
reg weight_buffer31_ce0;
reg weight_buffer31_we0;
reg weight_buffer3132_ce0;
reg weight_buffer3132_we0;
reg weight_buffer32_ce0;
reg weight_buffer32_we0;
reg weight_buffer3233_ce0;
reg weight_buffer3233_we0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] Woffset;
reg   [8:0] weight_memcpy_buffer_address0;
reg    weight_memcpy_buffer_ce0;
reg    weight_memcpy_buffer_we0;
wire   [31:0] weight_memcpy_buffer_q0;
reg    DATA_BUS2_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    DATA_BUS2_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond49_reg_2349;
reg   [8:0] loop_index_reg_1362;
reg   [8:0] loop_index_reg_1362_pp0_iter1_reg;
wire    ap_block_state15_pp0_stage0_iter0;
reg    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] indvar_flatten60_reg_1374;
reg   [5:0] indvar_flatten19_reg_1385;
reg   [5:0] t1_V_reg_1396;
reg   [1:0] t2_V_reg_1407;
reg   [3:0] indvar_flatten_reg_1418;
reg   [1:0] t3_V_reg_1429;
reg   [0:0] ReadNextFlag_1_reg_1440;
reg   [31:0] weight_memcpy_offset_1_reg_1451;
reg   [1:0] t4_V_reg_1462;
wire   [0:0] weight_load_enable_offset_read_read_fu_384_p2;
wire   [10:0] empty_fu_1508_p1;
reg   [10:0] empty_reg_2272;
wire   [31:0] sub_ln287_fu_1512_p2;
reg   [31:0] sub_ln287_reg_2277;
wire   [0:0] enable_read_read_fu_390_p2;
wire   [5:0] trunc_ln301_1_fu_1518_p1;
reg   [5:0] trunc_ln301_1_reg_2282;
wire   [5:0] TN_MIN_fu_1529_p3;
reg   [5:0] TN_MIN_reg_2287;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln234_fu_1540_p2;
reg   [0:0] icmp_ln234_reg_2296;
wire    ap_CS_fsm_state4;
wire   [11:0] ret_21_fu_1552_p2;
reg   [11:0] ret_21_reg_2301;
wire    ap_CS_fsm_state5;
reg   [14:0] r_6_reg_2316;
wire    ap_CS_fsm_state6;
wire   [31:0] select_ln234_fu_1584_p3;
reg   [31:0] select_ln234_reg_2323;
wire    ap_CS_fsm_state7;
wire   [31:0] zext_ln244_fu_1591_p1;
reg   [31:0] zext_ln244_reg_2328;
wire   [0:0] icmp_ln245_fu_1594_p2;
reg   [63:0] DATA_BUS2_addr_reg_2338;
wire   [8:0] empty_101_fu_1636_p2;
reg   [8:0] empty_101_reg_2344;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond49_fu_1646_p2;
reg   [0:0] exitcond49_reg_2349_pp0_iter1_reg;
reg   [31:0] DATA_BUS2_addr_read_reg_2353;
wire   [3:0] mul_ln246_fu_1669_p2;
reg   [3:0] mul_ln246_reg_2364;
wire    ap_CS_fsm_state18;
wire   [5:0] zext_ln246_1_fu_1683_p1;
reg   [5:0] zext_ln246_1_reg_2369;
wire   [9:0] tmp_s_fu_1687_p3;
reg   [9:0] tmp_s_reg_2374;
wire   [0:0] cmp_i_i_mid144_fu_1695_p2;
reg   [0:0] cmp_i_i_mid144_reg_2379;
wire   [0:0] icmp_ln255_fu_1700_p2;
reg   [0:0] icmp_ln255_reg_2384;
wire   [0:0] icmp_ln254_fu_1705_p2;
reg   [0:0] icmp_ln254_reg_2390;
wire   [9:0] add_ln878_1_fu_1711_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state19_pp1_stage0_iter0;
wire    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
wire    ap_block_state22_pp1_stage0_iter3;
wire    ap_block_state23_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln878_fu_1717_p2;
reg   [0:0] icmp_ln878_reg_2400;
reg   [0:0] icmp_ln878_reg_2400_pp1_iter1_reg;
reg   [0:0] icmp_ln878_reg_2400_pp1_iter2_reg;
wire   [0:0] icmp_ln878_3_fu_1722_p2;
reg   [0:0] icmp_ln878_3_reg_2404;
reg   [0:0] icmp_ln878_3_reg_2404_pp1_iter1_reg;
wire   [5:0] select_ln878_2_fu_1733_p3;
wire   [0:0] cmp_i62_i_fu_1749_p2;
reg   [0:0] cmp_i62_i_reg_2423;
wire   [0:0] cmp_i62_i_mid1_fu_1794_p2;
reg   [0:0] cmp_i62_i_mid1_reg_2428;
wire   [4:0] select_ln226_2_fu_1799_p3;
reg   [4:0] select_ln226_2_reg_2433;
reg   [4:0] select_ln226_2_reg_2433_pp1_iter2_reg;
reg   [4:0] select_ln226_2_reg_2433_pp1_iter3_reg;
wire   [0:0] select_ln226_3_fu_1811_p3;
reg   [0:0] select_ln226_3_reg_2437;
wire   [0:0] select_ln226_5_fu_1834_p3;
reg   [0:0] select_ln226_5_reg_2442;
wire   [5:0] select_ln878_fu_1840_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [0:0] or_ln226_fu_1853_p2;
reg   [0:0] or_ln226_reg_2454;
wire   [0:0] cmp_i_i_mid1_fu_1866_p2;
reg   [0:0] cmp_i_i_mid1_reg_2459;
wire   [0:0] select_ln226_8_fu_1871_p3;
reg   [0:0] select_ln226_8_reg_2464;
reg   [0:0] select_ln226_8_reg_2464_pp1_iter2_reg;
reg   [0:0] select_ln226_8_reg_2464_pp1_iter3_reg;
wire   [1:0] select_ln878_1_fu_1879_p3;
wire   [3:0] select_ln254_fu_1893_p3;
wire   [0:0] select_ln226_7_fu_1929_p3;
reg   [0:0] select_ln226_7_reg_2478;
wire   [1:0] select_ln227_fu_1957_p3;
reg   [1:0] select_ln227_reg_2484;
wire   [1:0] select_ln227_1_fu_1965_p3;
reg   [1:0] select_ln227_1_reg_2489;
reg    ap_enable_reg_pp1_iter2;
wire   [0:0] sel_tmp_fu_1984_p2;
reg   [0:0] sel_tmp_reg_2501;
wire   [31:0] weight_memcpy_offset_fu_1998_p3;
wire   [0:0] ReadNextFlag_fu_2012_p3;
wire   [1:0] t4_V_1_fu_2020_p2;
wire   [3:0] add_ln273_fu_2048_p2;
reg   [3:0] add_ln273_reg_2522;
wire   [15:0] storemerge_fu_2075_p3;
reg   [15:0] storemerge_reg_2527;
wire    ap_CS_fsm_state14;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter3;
reg    ap_condition_pp1_exit_iter2_state21;
reg    ap_enable_reg_pp1_iter4;
wire    grp_input_load_fu_1484_ap_start;
wire    grp_input_load_fu_1484_ap_done;
wire    grp_input_load_fu_1484_ap_idle;
wire    grp_input_load_fu_1484_ap_ready;
wire    grp_input_load_fu_1484_m_axi_DATA_BUS_AWVALID;
wire   [63:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWADDR;
wire   [0:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWID;
wire   [31:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWLEN;
wire   [2:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWSIZE;
wire   [1:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWBURST;
wire   [1:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWLOCK;
wire   [3:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWCACHE;
wire   [2:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWPROT;
wire   [3:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWQOS;
wire   [3:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWREGION;
wire   [0:0] grp_input_load_fu_1484_m_axi_DATA_BUS_AWUSER;
wire    grp_input_load_fu_1484_m_axi_DATA_BUS_WVALID;
wire   [31:0] grp_input_load_fu_1484_m_axi_DATA_BUS_WDATA;
wire   [3:0] grp_input_load_fu_1484_m_axi_DATA_BUS_WSTRB;
wire    grp_input_load_fu_1484_m_axi_DATA_BUS_WLAST;
wire   [0:0] grp_input_load_fu_1484_m_axi_DATA_BUS_WID;
wire   [0:0] grp_input_load_fu_1484_m_axi_DATA_BUS_WUSER;
wire    grp_input_load_fu_1484_m_axi_DATA_BUS_ARVALID;
wire   [63:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARADDR;
wire   [0:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARID;
wire   [31:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARLEN;
wire   [2:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARSIZE;
wire   [1:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARBURST;
wire   [1:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARLOCK;
wire   [3:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARCACHE;
wire   [2:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARPROT;
wire   [3:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARQOS;
wire   [3:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARREGION;
wire   [0:0] grp_input_load_fu_1484_m_axi_DATA_BUS_ARUSER;
wire    grp_input_load_fu_1484_m_axi_DATA_BUS_RREADY;
wire    grp_input_load_fu_1484_m_axi_DATA_BUS_BREADY;
wire   [11:0] grp_input_load_fu_1484_input_buffer_0_address0;
wire    grp_input_load_fu_1484_input_buffer_0_ce0;
wire    grp_input_load_fu_1484_input_buffer_0_we0;
wire   [15:0] grp_input_load_fu_1484_input_buffer_0_d0;
wire   [11:0] grp_input_load_fu_1484_input_buffer_1_address0;
wire    grp_input_load_fu_1484_input_buffer_1_ce0;
wire    grp_input_load_fu_1484_input_buffer_1_we0;
wire   [15:0] grp_input_load_fu_1484_input_buffer_1_d0;
reg   [8:0] ap_phi_mux_loop_index_phi_fu_1366_p4;
reg   [1:0] ap_phi_mux_t3_V_phi_fu_1433_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] phi_ln294_reg_1473;
wire    ap_CS_fsm_state24;
reg    grp_input_load_fu_1484_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [63:0] loop_index_cast8_fu_1651_p1;
wire   [63:0] zext_ln263_fu_1973_p1;
wire   [63:0] zext_ln273_2_fu_2101_p1;
wire  signed [63:0] p_cast_cast_fu_1626_p1;
wire   [31:0] add_ln246_fu_1656_p2;
reg   [15:0] next_value_1_fu_368;
wire   [15:0] next_value_fu_2089_p3;
wire   [0:0] icmp_ln287_fu_1522_p2;
wire   [5:0] trunc_ln301_fu_1526_p1;
wire   [31:0] or_ln234_fu_1536_p2;
wire   [5:0] ret_21_fu_1552_p0;
wire   [5:0] ret_21_fu_1552_p1;
wire   [11:0] grp_fu_1564_p0;
wire   [3:0] grp_fu_1564_p1;
wire   [15:0] grp_fu_1564_p2;
wire   [33:0] tmp_8_fu_1599_p3;
wire  signed [63:0] p_cast7_fu_1607_p1;
wire   [63:0] empty_99_fu_1611_p2;
wire   [61:0] p_cast_fu_1616_p4;
wire   [14:0] loop_index_cast_fu_1642_p1;
wire   [1:0] mul_ln246_fu_1669_p0;
wire   [3:0] zext_ln246_fu_1666_p1;
wire   [1:0] mul_ln246_fu_1669_p1;
wire   [4:0] tmp_9_fu_1675_p3;
wire   [5:0] add_ln878_fu_1727_p2;
wire   [4:0] empty_103_fu_1741_p1;
wire   [5:0] t1_V_cast_cast412_fu_1745_p1;
wire   [0:0] empty_104_fu_1754_p1;
wire   [5:0] t2_V_cast_cast413_fu_1758_p1;
wire   [0:0] cmp_i_i_fu_1762_p2;
wire   [5:0] add_ln691_fu_1773_p2;
wire   [4:0] empty_106_fu_1786_p1;
wire   [5:0] t1_V_cast_mid1_cast_fu_1790_p1;
wire   [0:0] Enable_mid146_fu_1806_p2;
wire   [0:0] Enable_fu_1767_p2;
wire   [0:0] xor_ln226_fu_1818_p2;
wire   [0:0] icmp_ln254_1_fu_1829_p2;
wire   [1:0] select_ln226_fu_1779_p3;
wire   [1:0] add_ln691_5_fu_1847_p2;
wire   [0:0] empty_107_fu_1858_p1;
wire   [5:0] t2_V_cast_mid1_cast_fu_1862_p1;
wire   [0:0] and_ln226_fu_1823_p2;
wire   [3:0] add_ln254_fu_1887_p2;
wire   [0:0] icmp_ln255_1_fu_1906_p2;
wire   [0:0] select_ln226_1_fu_1901_p3;
wire   [0:0] Enable_mid1_fu_1924_p2;
wire   [0:0] select_ln226_4_fu_1911_p3;
wire   [1:0] select_ln226_6_fu_1917_p3;
wire   [0:0] select_ln226_9_fu_1935_p3;
wire   [0:0] or_ln227_fu_1947_p2;
wire   [0:0] or_ln227_1_fu_1952_p2;
wire   [1:0] t3_V_4_fu_1941_p2;
wire   [31:0] weight_memcpy_offset_2_fu_1978_p2;
wire   [31:0] weight_memcpy_offset_3_fu_1990_p3;
wire   [0:0] not_sel_tmp8_fu_2006_p2;
wire   [3:0] p_shl_cast_fu_2032_p3;
wire   [3:0] zext_ln273_fu_2029_p1;
wire   [3:0] sub_ln273_fu_2039_p2;
wire   [3:0] zext_ln273_1_fu_2045_p1;
wire   [15:0] input_value_fu_2054_p1;
wire   [15:0] sel_tmp1_fu_2068_p3;
wire   [15:0] next_value_2_fu_2058_p4;
wire   [15:0] next_value_3_fu_2082_p3;
reg   [31:0] ap_return_preg;
wire    ap_CS_fsm_state25;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [15:0] grp_fu_1564_p00;
wire   [15:0] grp_fu_1564_p10;
wire   [11:0] ret_21_fu_1552_p00;
wire   [11:0] ret_21_fu_1552_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 Woffset = 32'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 grp_input_load_fu_1484_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

YOLO2_FPGA_copy_input_weight_weight_memcpy_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
weight_memcpy_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_memcpy_buffer_address0),
    .ce0(weight_memcpy_buffer_ce0),
    .we0(weight_memcpy_buffer_we0),
    .d0(DATA_BUS2_addr_read_reg_2353),
    .q0(weight_memcpy_buffer_q0)
);

YOLO2_FPGA_input_load grp_input_load_fu_1484(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_input_load_fu_1484_ap_start),
    .ap_done(grp_input_load_fu_1484_ap_done),
    .ap_idle(grp_input_load_fu_1484_ap_idle),
    .ap_ready(grp_input_load_fu_1484_ap_ready),
    .m_axi_DATA_BUS_AWVALID(grp_input_load_fu_1484_m_axi_DATA_BUS_AWVALID),
    .m_axi_DATA_BUS_AWREADY(1'b0),
    .m_axi_DATA_BUS_AWADDR(grp_input_load_fu_1484_m_axi_DATA_BUS_AWADDR),
    .m_axi_DATA_BUS_AWID(grp_input_load_fu_1484_m_axi_DATA_BUS_AWID),
    .m_axi_DATA_BUS_AWLEN(grp_input_load_fu_1484_m_axi_DATA_BUS_AWLEN),
    .m_axi_DATA_BUS_AWSIZE(grp_input_load_fu_1484_m_axi_DATA_BUS_AWSIZE),
    .m_axi_DATA_BUS_AWBURST(grp_input_load_fu_1484_m_axi_DATA_BUS_AWBURST),
    .m_axi_DATA_BUS_AWLOCK(grp_input_load_fu_1484_m_axi_DATA_BUS_AWLOCK),
    .m_axi_DATA_BUS_AWCACHE(grp_input_load_fu_1484_m_axi_DATA_BUS_AWCACHE),
    .m_axi_DATA_BUS_AWPROT(grp_input_load_fu_1484_m_axi_DATA_BUS_AWPROT),
    .m_axi_DATA_BUS_AWQOS(grp_input_load_fu_1484_m_axi_DATA_BUS_AWQOS),
    .m_axi_DATA_BUS_AWREGION(grp_input_load_fu_1484_m_axi_DATA_BUS_AWREGION),
    .m_axi_DATA_BUS_AWUSER(grp_input_load_fu_1484_m_axi_DATA_BUS_AWUSER),
    .m_axi_DATA_BUS_WVALID(grp_input_load_fu_1484_m_axi_DATA_BUS_WVALID),
    .m_axi_DATA_BUS_WREADY(1'b0),
    .m_axi_DATA_BUS_WDATA(grp_input_load_fu_1484_m_axi_DATA_BUS_WDATA),
    .m_axi_DATA_BUS_WSTRB(grp_input_load_fu_1484_m_axi_DATA_BUS_WSTRB),
    .m_axi_DATA_BUS_WLAST(grp_input_load_fu_1484_m_axi_DATA_BUS_WLAST),
    .m_axi_DATA_BUS_WID(grp_input_load_fu_1484_m_axi_DATA_BUS_WID),
    .m_axi_DATA_BUS_WUSER(grp_input_load_fu_1484_m_axi_DATA_BUS_WUSER),
    .m_axi_DATA_BUS_ARVALID(grp_input_load_fu_1484_m_axi_DATA_BUS_ARVALID),
    .m_axi_DATA_BUS_ARREADY(m_axi_DATA_BUS_ARREADY),
    .m_axi_DATA_BUS_ARADDR(grp_input_load_fu_1484_m_axi_DATA_BUS_ARADDR),
    .m_axi_DATA_BUS_ARID(grp_input_load_fu_1484_m_axi_DATA_BUS_ARID),
    .m_axi_DATA_BUS_ARLEN(grp_input_load_fu_1484_m_axi_DATA_BUS_ARLEN),
    .m_axi_DATA_BUS_ARSIZE(grp_input_load_fu_1484_m_axi_DATA_BUS_ARSIZE),
    .m_axi_DATA_BUS_ARBURST(grp_input_load_fu_1484_m_axi_DATA_BUS_ARBURST),
    .m_axi_DATA_BUS_ARLOCK(grp_input_load_fu_1484_m_axi_DATA_BUS_ARLOCK),
    .m_axi_DATA_BUS_ARCACHE(grp_input_load_fu_1484_m_axi_DATA_BUS_ARCACHE),
    .m_axi_DATA_BUS_ARPROT(grp_input_load_fu_1484_m_axi_DATA_BUS_ARPROT),
    .m_axi_DATA_BUS_ARQOS(grp_input_load_fu_1484_m_axi_DATA_BUS_ARQOS),
    .m_axi_DATA_BUS_ARREGION(grp_input_load_fu_1484_m_axi_DATA_BUS_ARREGION),
    .m_axi_DATA_BUS_ARUSER(grp_input_load_fu_1484_m_axi_DATA_BUS_ARUSER),
    .m_axi_DATA_BUS_RVALID(m_axi_DATA_BUS_RVALID),
    .m_axi_DATA_BUS_RREADY(grp_input_load_fu_1484_m_axi_DATA_BUS_RREADY),
    .m_axi_DATA_BUS_RDATA(m_axi_DATA_BUS_RDATA),
    .m_axi_DATA_BUS_RLAST(m_axi_DATA_BUS_RLAST),
    .m_axi_DATA_BUS_RID(m_axi_DATA_BUS_RID),
    .m_axi_DATA_BUS_RUSER(m_axi_DATA_BUS_RUSER),
    .m_axi_DATA_BUS_RRESP(m_axi_DATA_BUS_RRESP),
    .m_axi_DATA_BUS_BVALID(1'b0),
    .m_axi_DATA_BUS_BREADY(grp_input_load_fu_1484_m_axi_DATA_BUS_BREADY),
    .m_axi_DATA_BUS_BRESP(2'd0),
    .m_axi_DATA_BUS_BID(1'd0),
    .m_axi_DATA_BUS_BUSER(1'd0),
    .input_r(input_r),
    .input_buffer_0_address0(grp_input_load_fu_1484_input_buffer_0_address0),
    .input_buffer_0_ce0(grp_input_load_fu_1484_input_buffer_0_ce0),
    .input_buffer_0_we0(grp_input_load_fu_1484_input_buffer_0_we0),
    .input_buffer_0_d0(grp_input_load_fu_1484_input_buffer_0_d0),
    .input_buffer_1_address0(grp_input_load_fu_1484_input_buffer_1_address0),
    .input_buffer_1_ce0(grp_input_load_fu_1484_input_buffer_1_ce0),
    .input_buffer_1_we0(grp_input_load_fu_1484_input_buffer_1_we0),
    .input_buffer_1_d0(grp_input_load_fu_1484_input_buffer_1_d0),
    .r(r),
    .c(c),
    .n(empty_reg_2272),
    .Kernel_stride(Kernel_stride),
    .Padding(Padding_offset),
    .TRow(TRow),
    .TCol(TCol),
    .Input_w(Input_w),
    .Input_h(Input_h),
    .TN_MIN(TN_MIN_reg_2287),
    .IHxIW(IHxIW)
);

YOLO2_FPGA_mul_6ns_6ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mul_6ns_6ns_12_1_1_U53(
    .din0(ret_21_fu_1552_p0),
    .din1(ret_21_fu_1552_p1),
    .dout(ret_21_fu_1552_p2)
);

YOLO2_FPGA_mul_12ns_4ns_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mul_12ns_4ns_16_2_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1564_p0),
    .din1(grp_fu_1564_p1),
    .ce(1'b1),
    .dout(grp_fu_1564_p2)
);

YOLO2_FPGA_mul_2ns_2ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
mul_2ns_2ns_4_1_1_U55(
    .din0(mul_ln246_fu_1669_p0),
    .din1(mul_ln246_fu_1669_p1),
    .dout(mul_ln246_fu_1669_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state15)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state21)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_return_preg <= phi_ln294_reg_1473;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_input_load_fu_1484_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_input_load_fu_1484_ap_start_reg <= 1'b1;
        end else if ((grp_input_load_fu_1484_ap_ready == 1'b1)) begin
            grp_input_load_fu_1484_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln878_reg_2400_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ReadNextFlag_1_reg_1440 <= ReadNextFlag_fu_2012_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ReadNextFlag_1_reg_1440 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_1717_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten19_reg_1385 <= select_ln878_2_fu_1733_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten19_reg_1385 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_1717_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten60_reg_1374 <= add_ln878_1_fu_1711_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten60_reg_1374 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln878_reg_2400 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_1418 <= select_ln254_fu_1893_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten_reg_1418 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        loop_index_reg_1362 <= 9'd0;
    end else if (((exitcond49_reg_2349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_index_reg_1362 <= empty_101_reg_2344;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_390_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln294_reg_1473 <= p_read;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((grp_input_load_fu_1484_ap_done == 1'b1) & (weight_load_enable_offset_read_read_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        phi_ln294_reg_1473 <= n;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln878_reg_2400 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        t1_V_reg_1396 <= select_ln878_fu_1840_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        t1_V_reg_1396 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln878_reg_2400 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        t2_V_reg_1407 <= select_ln878_1_fu_1879_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        t2_V_reg_1407 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln878_reg_2400_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t3_V_reg_1429 <= select_ln227_1_reg_2489;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        t3_V_reg_1429 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln878_reg_2400_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t4_V_reg_1462 <= t4_V_1_fu_2020_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        t4_V_reg_1462 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln878_reg_2400_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_memcpy_offset_1_reg_1451 <= weight_memcpy_offset_fu_1998_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        weight_memcpy_offset_1_reg_1451 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond49_reg_2349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DATA_BUS2_addr_read_reg_2353 <= m_axi_DATA_BUS2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln245_fu_1594_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        DATA_BUS2_addr_reg_2338 <= p_cast_cast_fu_1626_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        TN_MIN_reg_2287 <= TN_MIN_fu_1529_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        Woffset <= add_ln246_fu_1656_p2;
        cmp_i_i_mid144_reg_2379 <= cmp_i_i_mid144_fu_1695_p2;
        icmp_ln254_reg_2390 <= icmp_ln254_fu_1705_p2;
        icmp_ln255_reg_2384 <= icmp_ln255_fu_1700_p2;
        mul_ln246_reg_2364 <= mul_ln246_fu_1669_p2;
        tmp_s_reg_2374[9 : 6] <= tmp_s_fu_1687_p3[9 : 6];
        zext_ln246_1_reg_2369[4 : 1] <= zext_ln246_1_fu_1683_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_2400_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln273_reg_2522 <= add_ln273_fu_2048_p2;
        storemerge_reg_2527 <= storemerge_fu_2075_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_2400 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cmp_i62_i_mid1_reg_2428 <= cmp_i62_i_mid1_fu_1794_p2;
        cmp_i_i_mid1_reg_2459 <= cmp_i_i_mid1_fu_1866_p2;
        or_ln226_reg_2454 <= or_ln226_fu_1853_p2;
        select_ln226_2_reg_2433 <= select_ln226_2_fu_1799_p3;
        select_ln226_3_reg_2437 <= select_ln226_3_fu_1811_p3;
        select_ln226_5_reg_2442 <= select_ln226_5_fu_1834_p3;
        select_ln226_8_reg_2464 <= select_ln226_8_fu_1871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cmp_i62_i_reg_2423 <= cmp_i62_i_fu_1749_p2;
        icmp_ln878_3_reg_2404_pp1_iter1_reg <= icmp_ln878_3_reg_2404;
        icmp_ln878_reg_2400 <= icmp_ln878_fu_1717_p2;
        icmp_ln878_reg_2400_pp1_iter1_reg <= icmp_ln878_reg_2400;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_101_reg_2344 <= empty_101_fu_1636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_2272 <= empty_fu_1508_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond49_reg_2349 <= exitcond49_fu_1646_p2;
        exitcond49_reg_2349_pp0_iter1_reg <= exitcond49_reg_2349;
        loop_index_reg_1362_pp0_iter1_reg <= loop_index_reg_1362;
    end
end

always @ (posedge ap_clk) begin
    if (((weight_load_enable_offset_read_read_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln234_reg_2296 <= icmp_ln234_fu_1540_p2;
        ret_21_reg_2301 <= ret_21_fu_1552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_1717_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln878_3_reg_2404 <= icmp_ln878_3_fu_1722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln878_reg_2400_pp1_iter2_reg <= icmp_ln878_reg_2400_pp1_iter1_reg;
        select_ln226_2_reg_2433_pp1_iter2_reg <= select_ln226_2_reg_2433;
        select_ln226_2_reg_2433_pp1_iter3_reg <= select_ln226_2_reg_2433_pp1_iter2_reg;
        select_ln226_8_reg_2464_pp1_iter2_reg <= select_ln226_8_reg_2464;
        select_ln226_8_reg_2464_pp1_iter3_reg <= select_ln226_8_reg_2464_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln878_reg_2400_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        next_value_1_fu_368 <= next_value_fu_2089_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_6_reg_2316 <= {{grp_fu_1564_p2[15:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_2400_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sel_tmp_reg_2501 <= sel_tmp_fu_1984_p2;
        select_ln226_7_reg_2478 <= select_ln226_7_fu_1929_p3;
        select_ln227_reg_2484 <= select_ln227_fu_1957_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln878_reg_2400_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln227_1_reg_2489 <= select_ln227_1_fu_1965_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln234_reg_2323 <= select_ln234_fu_1584_p3;
        zext_ln244_reg_2328[14 : 0] <= zext_ln244_fu_1591_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_390_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        sub_ln287_reg_2277 <= sub_ln287_fu_1512_p2;
        trunc_ln301_1_reg_2282 <= trunc_ln301_1_fu_1518_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        DATA_BUS2_blk_n_AR = m_axi_DATA_BUS2_ARREADY;
    end else begin
        DATA_BUS2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond49_reg_2349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DATA_BUS2_blk_n_R = m_axi_DATA_BUS2_RVALID;
    end else begin
        DATA_BUS2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond49_fu_1646_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_1717_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond49_reg_2349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_loop_index_phi_fu_1366_p4 = empty_101_reg_2344;
    end else begin
        ap_phi_mux_loop_index_phi_fu_1366_p4 = loop_index_reg_1362;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln878_reg_2400_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_t3_V_phi_fu_1433_p4 = select_ln227_1_reg_2489;
    end else begin
        ap_phi_mux_t3_V_phi_fu_1433_p4 = t3_V_reg_1429;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_return = phi_ln294_reg_1473;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (m_axi_DATA_BUS2_ARREADY == 1'b1))) begin
        m_axi_DATA_BUS2_ARVALID = 1'b1;
    end else begin
        m_axi_DATA_BUS2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond49_reg_2349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_DATA_BUS2_RREADY = 1'b1;
    end else begin
        m_axi_DATA_BUS2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_DATA_BUS_ARVALID = grp_input_load_fu_1484_m_axi_DATA_BUS_ARVALID;
    end else begin
        m_axi_DATA_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_DATA_BUS_RREADY = grp_input_load_fu_1484_m_axi_DATA_BUS_RREADY;
    end else begin
        m_axi_DATA_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1010_ce0 = 1'b1;
    end else begin
        weight_buffer1010_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd9) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1010_we0 = 1'b1;
    end else begin
        weight_buffer1010_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer10_ce0 = 1'b1;
    end else begin
        weight_buffer10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd9) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer10_we0 = 1'b1;
    end else begin
        weight_buffer10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1111_ce0 = 1'b1;
    end else begin
        weight_buffer1111_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd10) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1111_we0 = 1'b1;
    end else begin
        weight_buffer1111_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer11_ce0 = 1'b1;
    end else begin
        weight_buffer11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd10) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer11_we0 = 1'b1;
    end else begin
        weight_buffer11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1212_ce0 = 1'b1;
    end else begin
        weight_buffer1212_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd11) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1212_we0 = 1'b1;
    end else begin
        weight_buffer1212_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer12_ce0 = 1'b1;
    end else begin
        weight_buffer12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd11) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer12_we0 = 1'b1;
    end else begin
        weight_buffer12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1313_ce0 = 1'b1;
    end else begin
        weight_buffer1313_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd12) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1313_we0 = 1'b1;
    end else begin
        weight_buffer1313_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer13_ce0 = 1'b1;
    end else begin
        weight_buffer13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd12) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer13_we0 = 1'b1;
    end else begin
        weight_buffer13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1414_ce0 = 1'b1;
    end else begin
        weight_buffer1414_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd13) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1414_we0 = 1'b1;
    end else begin
        weight_buffer1414_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer14_ce0 = 1'b1;
    end else begin
        weight_buffer14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd13) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer14_we0 = 1'b1;
    end else begin
        weight_buffer14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1515_ce0 = 1'b1;
    end else begin
        weight_buffer1515_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd14) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1515_we0 = 1'b1;
    end else begin
        weight_buffer1515_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer15_ce0 = 1'b1;
    end else begin
        weight_buffer15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd14) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer15_we0 = 1'b1;
    end else begin
        weight_buffer15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1616_ce0 = 1'b1;
    end else begin
        weight_buffer1616_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd15) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1616_we0 = 1'b1;
    end else begin
        weight_buffer1616_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer16_ce0 = 1'b1;
    end else begin
        weight_buffer16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd15) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer16_we0 = 1'b1;
    end else begin
        weight_buffer16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1717_ce0 = 1'b1;
    end else begin
        weight_buffer1717_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd16) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1717_we0 = 1'b1;
    end else begin
        weight_buffer1717_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer17_ce0 = 1'b1;
    end else begin
        weight_buffer17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd16) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer17_we0 = 1'b1;
    end else begin
        weight_buffer17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1818_ce0 = 1'b1;
    end else begin
        weight_buffer1818_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd17) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1818_we0 = 1'b1;
    end else begin
        weight_buffer1818_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer18_ce0 = 1'b1;
    end else begin
        weight_buffer18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd17) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer18_we0 = 1'b1;
    end else begin
        weight_buffer18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1919_ce0 = 1'b1;
    end else begin
        weight_buffer1919_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd18) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1919_we0 = 1'b1;
    end else begin
        weight_buffer1919_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer19_ce0 = 1'b1;
    end else begin
        weight_buffer19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd18) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer19_we0 = 1'b1;
    end else begin
        weight_buffer19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1_ce0 = 1'b1;
    end else begin
        weight_buffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer1_we0 = 1'b1;
    end else begin
        weight_buffer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2020_ce0 = 1'b1;
    end else begin
        weight_buffer2020_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd19) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2020_we0 = 1'b1;
    end else begin
        weight_buffer2020_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer20_ce0 = 1'b1;
    end else begin
        weight_buffer20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd19) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer20_we0 = 1'b1;
    end else begin
        weight_buffer20_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2121_ce0 = 1'b1;
    end else begin
        weight_buffer2121_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd20) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2121_we0 = 1'b1;
    end else begin
        weight_buffer2121_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer21_ce0 = 1'b1;
    end else begin
        weight_buffer21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd20) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer21_we0 = 1'b1;
    end else begin
        weight_buffer21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2222_ce0 = 1'b1;
    end else begin
        weight_buffer2222_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd21) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2222_we0 = 1'b1;
    end else begin
        weight_buffer2222_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2223_ce0 = 1'b1;
    end else begin
        weight_buffer2223_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd21) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2223_we0 = 1'b1;
    end else begin
        weight_buffer2223_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer22_ce0 = 1'b1;
    end else begin
        weight_buffer22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer22_we0 = 1'b1;
    end else begin
        weight_buffer22_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2324_ce0 = 1'b1;
    end else begin
        weight_buffer2324_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd22) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2324_we0 = 1'b1;
    end else begin
        weight_buffer2324_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer23_ce0 = 1'b1;
    end else begin
        weight_buffer23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd22) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer23_we0 = 1'b1;
    end else begin
        weight_buffer23_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2425_ce0 = 1'b1;
    end else begin
        weight_buffer2425_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd23) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2425_we0 = 1'b1;
    end else begin
        weight_buffer2425_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer24_ce0 = 1'b1;
    end else begin
        weight_buffer24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd23) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer24_we0 = 1'b1;
    end else begin
        weight_buffer24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2526_ce0 = 1'b1;
    end else begin
        weight_buffer2526_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd24) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2526_we0 = 1'b1;
    end else begin
        weight_buffer2526_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer25_ce0 = 1'b1;
    end else begin
        weight_buffer25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd24) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer25_we0 = 1'b1;
    end else begin
        weight_buffer25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2627_ce0 = 1'b1;
    end else begin
        weight_buffer2627_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd25) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2627_we0 = 1'b1;
    end else begin
        weight_buffer2627_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer26_ce0 = 1'b1;
    end else begin
        weight_buffer26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd25) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer26_we0 = 1'b1;
    end else begin
        weight_buffer26_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2728_ce0 = 1'b1;
    end else begin
        weight_buffer2728_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd26) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2728_we0 = 1'b1;
    end else begin
        weight_buffer2728_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer27_ce0 = 1'b1;
    end else begin
        weight_buffer27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd26) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer27_we0 = 1'b1;
    end else begin
        weight_buffer27_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2829_ce0 = 1'b1;
    end else begin
        weight_buffer2829_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd27) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2829_we0 = 1'b1;
    end else begin
        weight_buffer2829_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer28_ce0 = 1'b1;
    end else begin
        weight_buffer28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd27) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer28_we0 = 1'b1;
    end else begin
        weight_buffer28_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2930_ce0 = 1'b1;
    end else begin
        weight_buffer2930_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd28) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2930_we0 = 1'b1;
    end else begin
        weight_buffer2930_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer29_ce0 = 1'b1;
    end else begin
        weight_buffer29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd28) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer29_we0 = 1'b1;
    end else begin
        weight_buffer29_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2_ce0 = 1'b1;
    end else begin
        weight_buffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer2_we0 = 1'b1;
    end else begin
        weight_buffer2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3031_ce0 = 1'b1;
    end else begin
        weight_buffer3031_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd29) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3031_we0 = 1'b1;
    end else begin
        weight_buffer3031_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer30_ce0 = 1'b1;
    end else begin
        weight_buffer30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd29) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer30_we0 = 1'b1;
    end else begin
        weight_buffer30_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3132_ce0 = 1'b1;
    end else begin
        weight_buffer3132_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd30) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3132_we0 = 1'b1;
    end else begin
        weight_buffer3132_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer31_ce0 = 1'b1;
    end else begin
        weight_buffer31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd30) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer31_we0 = 1'b1;
    end else begin
        weight_buffer31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3233_ce0 = 1'b1;
    end else begin
        weight_buffer3233_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd31) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3233_we0 = 1'b1;
    end else begin
        weight_buffer3233_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer32_ce0 = 1'b1;
    end else begin
        weight_buffer32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd31) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer32_we0 = 1'b1;
    end else begin
        weight_buffer32_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer33_ce0 = 1'b1;
    end else begin
        weight_buffer33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer33_we0 = 1'b1;
    end else begin
        weight_buffer33_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3_ce0 = 1'b1;
    end else begin
        weight_buffer3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer3_we0 = 1'b1;
    end else begin
        weight_buffer3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer44_ce0 = 1'b1;
    end else begin
        weight_buffer44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer44_we0 = 1'b1;
    end else begin
        weight_buffer44_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer4_ce0 = 1'b1;
    end else begin
        weight_buffer4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer4_we0 = 1'b1;
    end else begin
        weight_buffer4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer55_ce0 = 1'b1;
    end else begin
        weight_buffer55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd4) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer55_we0 = 1'b1;
    end else begin
        weight_buffer55_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer5_ce0 = 1'b1;
    end else begin
        weight_buffer5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd4) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer5_we0 = 1'b1;
    end else begin
        weight_buffer5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer66_ce0 = 1'b1;
    end else begin
        weight_buffer66_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd5) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer66_we0 = 1'b1;
    end else begin
        weight_buffer66_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer6_ce0 = 1'b1;
    end else begin
        weight_buffer6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd5) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer6_we0 = 1'b1;
    end else begin
        weight_buffer6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer77_ce0 = 1'b1;
    end else begin
        weight_buffer77_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd6) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer77_we0 = 1'b1;
    end else begin
        weight_buffer77_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer7_ce0 = 1'b1;
    end else begin
        weight_buffer7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd6) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer7_we0 = 1'b1;
    end else begin
        weight_buffer7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer88_ce0 = 1'b1;
    end else begin
        weight_buffer88_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd7) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer88_we0 = 1'b1;
    end else begin
        weight_buffer88_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer8_ce0 = 1'b1;
    end else begin
        weight_buffer8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd7) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer8_we0 = 1'b1;
    end else begin
        weight_buffer8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer99_ce0 = 1'b1;
    end else begin
        weight_buffer99_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd1) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd8) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer99_we0 = 1'b1;
    end else begin
        weight_buffer99_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer9_ce0 = 1'b1;
    end else begin
        weight_buffer9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd8) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer9_we0 = 1'b1;
    end else begin
        weight_buffer9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer_ce0 = 1'b1;
    end else begin
        weight_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (select_ln226_8_reg_2464_pp1_iter3_reg == 1'd0) & (select_ln226_2_reg_2433_pp1_iter3_reg == 5'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_buffer_we0 = 1'b1;
    end else begin
        weight_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weight_memcpy_buffer_address0 = zext_ln263_fu_1973_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        weight_memcpy_buffer_address0 = loop_index_cast8_fu_1651_p1;
    end else begin
        weight_memcpy_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        weight_memcpy_buffer_ce0 = 1'b1;
    end else begin
        weight_memcpy_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond49_reg_2349_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_memcpy_buffer_we0 = 1'b1;
    end else begin
        weight_memcpy_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((enable_read_read_fu_390_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((enable_read_read_fu_390_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_input_load_fu_1484_ap_done == 1'b1) & (weight_load_enable_offset_read_read_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((grp_input_load_fu_1484_ap_done == 1'b1) & (weight_load_enable_offset_read_read_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln245_fu_1594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axi_DATA_BUS2_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond49_fu_1646_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond49_fu_1646_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Enable_fu_1767_p2 = (cmp_i_i_fu_1762_p2 & cmp_i62_i_fu_1749_p2);

assign Enable_mid146_fu_1806_p2 = (cmp_i_i_mid144_reg_2379 & cmp_i62_i_mid1_fu_1794_p2);

assign Enable_mid1_fu_1924_p2 = (select_ln226_1_fu_1901_p3 & cmp_i_i_mid1_reg_2459);

assign ReadNextFlag_fu_2012_p3 = ((select_ln226_7_fu_1929_p3[0:0] == 1'b1) ? not_sel_tmp8_fu_2006_p2 : ReadNextFlag_1_reg_1440);

assign TN_MIN_fu_1529_p3 = ((icmp_ln287_fu_1522_p2[0:0] == 1'b1) ? trunc_ln301_fu_1526_p1 : trunc_ln301_1_reg_2282);

assign add_ln246_fu_1656_p2 = (select_ln234_reg_2323 + zext_ln244_reg_2328);

assign add_ln254_fu_1887_p2 = (indvar_flatten_reg_1418 + 4'd1);

assign add_ln273_fu_2048_p2 = (sub_ln273_fu_2039_p2 + zext_ln273_1_fu_2045_p1);

assign add_ln691_5_fu_1847_p2 = (select_ln226_fu_1779_p3 + 2'd1);

assign add_ln691_fu_1773_p2 = (t1_V_reg_1396 + 6'd1);

assign add_ln878_1_fu_1711_p2 = (indvar_flatten60_reg_1374 + 10'd1);

assign add_ln878_fu_1727_p2 = (indvar_flatten19_reg_1385 + 6'd1);

assign and_ln226_fu_1823_p2 = (xor_ln226_fu_1818_p2 & empty_104_fu_1754_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond49_reg_2349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_DATA_BUS2_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond49_reg_2349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_DATA_BUS2_RVALID == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter1 = ((exitcond49_reg_2349 == 1'd0) & (m_axi_DATA_BUS2_RVALID == 1'b0));
end

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign cmp_i62_i_fu_1749_p2 = ((t1_V_cast_cast412_fu_1745_p1 < TM_MIN) ? 1'b1 : 1'b0);

assign cmp_i62_i_mid1_fu_1794_p2 = ((t1_V_cast_mid1_cast_fu_1790_p1 < TM_MIN) ? 1'b1 : 1'b0);

assign cmp_i_i_fu_1762_p2 = ((t2_V_cast_cast413_fu_1758_p1 < TN_MIN_reg_2287) ? 1'b1 : 1'b0);

assign cmp_i_i_mid144_fu_1695_p2 = ((TN_MIN_reg_2287 != 6'd0) ? 1'b1 : 1'b0);

assign cmp_i_i_mid1_fu_1866_p2 = ((t2_V_cast_mid1_cast_fu_1862_p1 < TN_MIN_reg_2287) ? 1'b1 : 1'b0);

assign empty_101_fu_1636_p2 = (ap_phi_mux_loop_index_phi_fu_1366_p4 + 9'd1);

assign empty_103_fu_1741_p1 = t1_V_reg_1396[4:0];

assign empty_104_fu_1754_p1 = t2_V_reg_1407[0:0];

assign empty_106_fu_1786_p1 = add_ln691_fu_1773_p2[4:0];

assign empty_107_fu_1858_p1 = add_ln691_5_fu_1847_p2[0:0];

assign empty_99_fu_1611_p2 = ($signed(p_cast7_fu_1607_p1) + $signed(Weight));

assign empty_fu_1508_p1 = n[10:0];

assign enable_read_read_fu_390_p2 = enable;

assign exitcond49_fu_1646_p2 = ((loop_index_cast_fu_1642_p1 == r_6_reg_2316) ? 1'b1 : 1'b0);

assign grp_fu_1564_p0 = grp_fu_1564_p00;

assign grp_fu_1564_p00 = ret_21_reg_2301;

assign grp_fu_1564_p1 = grp_fu_1564_p10;

assign grp_fu_1564_p10 = KxK;

assign grp_input_load_fu_1484_ap_start = grp_input_load_fu_1484_ap_start_reg;

assign icmp_ln234_fu_1540_p2 = ((or_ln234_fu_1536_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_1594_p2 = ((r_6_reg_2316 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln254_1_fu_1829_p2 = ((indvar_flatten_reg_1418 == mul_ln246_reg_2364) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_1705_p2 = ((mul_ln246_fu_1669_p2 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_1_fu_1906_p2 = ((t4_V_reg_1462 == Kernel_size) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_1700_p2 = ((Kernel_size == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_1522_p2 = (($signed(sub_ln287_reg_2277) > $signed(TN)) ? 1'b1 : 1'b0);

assign icmp_ln878_3_fu_1722_p2 = ((indvar_flatten19_reg_1385 == zext_ln246_1_reg_2369) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_1717_p2 = ((indvar_flatten60_reg_1374 == tmp_s_reg_2374) ? 1'b1 : 1'b0);

assign input_buffer1_address0 = grp_input_load_fu_1484_input_buffer_1_address0;

assign input_buffer1_ce0 = grp_input_load_fu_1484_input_buffer_1_ce0;

assign input_buffer1_d0 = grp_input_load_fu_1484_input_buffer_1_d0;

assign input_buffer1_we0 = grp_input_load_fu_1484_input_buffer_1_we0;

assign input_buffer_address0 = grp_input_load_fu_1484_input_buffer_0_address0;

assign input_buffer_ce0 = grp_input_load_fu_1484_input_buffer_0_ce0;

assign input_buffer_d0 = grp_input_load_fu_1484_input_buffer_0_d0;

assign input_buffer_we0 = grp_input_load_fu_1484_input_buffer_0_we0;

assign input_value_fu_2054_p1 = weight_memcpy_buffer_q0[15:0];

assign loop_index_cast8_fu_1651_p1 = loop_index_reg_1362_pp0_iter1_reg;

assign loop_index_cast_fu_1642_p1 = ap_phi_mux_loop_index_phi_fu_1366_p4;

assign m_axi_DATA_BUS2_ARADDR = DATA_BUS2_addr_reg_2338;

assign m_axi_DATA_BUS2_ARBURST = 2'd0;

assign m_axi_DATA_BUS2_ARCACHE = 4'd0;

assign m_axi_DATA_BUS2_ARID = 1'd0;

assign m_axi_DATA_BUS2_ARLEN = zext_ln244_reg_2328;

assign m_axi_DATA_BUS2_ARLOCK = 2'd0;

assign m_axi_DATA_BUS2_ARPROT = 3'd0;

assign m_axi_DATA_BUS2_ARQOS = 4'd0;

assign m_axi_DATA_BUS2_ARREGION = 4'd0;

assign m_axi_DATA_BUS2_ARSIZE = 3'd0;

assign m_axi_DATA_BUS2_ARUSER = 1'd0;

assign m_axi_DATA_BUS2_AWADDR = 64'd0;

assign m_axi_DATA_BUS2_AWBURST = 2'd0;

assign m_axi_DATA_BUS2_AWCACHE = 4'd0;

assign m_axi_DATA_BUS2_AWID = 1'd0;

assign m_axi_DATA_BUS2_AWLEN = 32'd0;

assign m_axi_DATA_BUS2_AWLOCK = 2'd0;

assign m_axi_DATA_BUS2_AWPROT = 3'd0;

assign m_axi_DATA_BUS2_AWQOS = 4'd0;

assign m_axi_DATA_BUS2_AWREGION = 4'd0;

assign m_axi_DATA_BUS2_AWSIZE = 3'd0;

assign m_axi_DATA_BUS2_AWUSER = 1'd0;

assign m_axi_DATA_BUS2_AWVALID = 1'b0;

assign m_axi_DATA_BUS2_BREADY = 1'b0;

assign m_axi_DATA_BUS2_WDATA = 32'd0;

assign m_axi_DATA_BUS2_WID = 1'd0;

assign m_axi_DATA_BUS2_WLAST = 1'b0;

assign m_axi_DATA_BUS2_WSTRB = 4'd0;

assign m_axi_DATA_BUS2_WUSER = 1'd0;

assign m_axi_DATA_BUS2_WVALID = 1'b0;

assign m_axi_DATA_BUS_ARADDR = grp_input_load_fu_1484_m_axi_DATA_BUS_ARADDR;

assign m_axi_DATA_BUS_ARBURST = grp_input_load_fu_1484_m_axi_DATA_BUS_ARBURST;

assign m_axi_DATA_BUS_ARCACHE = grp_input_load_fu_1484_m_axi_DATA_BUS_ARCACHE;

assign m_axi_DATA_BUS_ARID = grp_input_load_fu_1484_m_axi_DATA_BUS_ARID;

assign m_axi_DATA_BUS_ARLEN = grp_input_load_fu_1484_m_axi_DATA_BUS_ARLEN;

assign m_axi_DATA_BUS_ARLOCK = grp_input_load_fu_1484_m_axi_DATA_BUS_ARLOCK;

assign m_axi_DATA_BUS_ARPROT = grp_input_load_fu_1484_m_axi_DATA_BUS_ARPROT;

assign m_axi_DATA_BUS_ARQOS = grp_input_load_fu_1484_m_axi_DATA_BUS_ARQOS;

assign m_axi_DATA_BUS_ARREGION = grp_input_load_fu_1484_m_axi_DATA_BUS_ARREGION;

assign m_axi_DATA_BUS_ARSIZE = grp_input_load_fu_1484_m_axi_DATA_BUS_ARSIZE;

assign m_axi_DATA_BUS_ARUSER = grp_input_load_fu_1484_m_axi_DATA_BUS_ARUSER;

assign m_axi_DATA_BUS_AWADDR = 64'd0;

assign m_axi_DATA_BUS_AWBURST = 2'd0;

assign m_axi_DATA_BUS_AWCACHE = 4'd0;

assign m_axi_DATA_BUS_AWID = 1'd0;

assign m_axi_DATA_BUS_AWLEN = 32'd0;

assign m_axi_DATA_BUS_AWLOCK = 2'd0;

assign m_axi_DATA_BUS_AWPROT = 3'd0;

assign m_axi_DATA_BUS_AWQOS = 4'd0;

assign m_axi_DATA_BUS_AWREGION = 4'd0;

assign m_axi_DATA_BUS_AWSIZE = 3'd0;

assign m_axi_DATA_BUS_AWUSER = 1'd0;

assign m_axi_DATA_BUS_AWVALID = 1'b0;

assign m_axi_DATA_BUS_BREADY = 1'b0;

assign m_axi_DATA_BUS_WDATA = 32'd0;

assign m_axi_DATA_BUS_WID = 1'd0;

assign m_axi_DATA_BUS_WLAST = 1'b0;

assign m_axi_DATA_BUS_WSTRB = 4'd0;

assign m_axi_DATA_BUS_WUSER = 1'd0;

assign m_axi_DATA_BUS_WVALID = 1'b0;

assign mul_ln246_fu_1669_p0 = zext_ln246_fu_1666_p1;

assign mul_ln246_fu_1669_p1 = zext_ln246_fu_1666_p1;

assign next_value_2_fu_2058_p4 = {{weight_memcpy_buffer_q0[31:16]}};

assign next_value_3_fu_2082_p3 = ((sel_tmp_reg_2501[0:0] == 1'b1) ? next_value_2_fu_2058_p4 : next_value_1_fu_368);

assign next_value_fu_2089_p3 = ((select_ln226_7_reg_2478[0:0] == 1'b1) ? next_value_3_fu_2082_p3 : next_value_1_fu_368);

assign not_sel_tmp8_fu_2006_p2 = (sel_tmp_fu_1984_p2 ^ 1'd1);

assign or_ln226_fu_1853_p2 = (select_ln226_5_fu_1834_p3 | icmp_ln878_3_reg_2404);

assign or_ln227_1_fu_1952_p2 = (or_ln227_fu_1947_p2 | icmp_ln878_3_reg_2404_pp1_iter1_reg);

assign or_ln227_fu_1947_p2 = (select_ln226_9_fu_1935_p3 | select_ln226_5_reg_2442);

assign or_ln234_fu_1536_p2 = (n | m);

assign p_cast7_fu_1607_p1 = $signed(tmp_8_fu_1599_p3);

assign p_cast_cast_fu_1626_p1 = $signed(p_cast_fu_1616_p4);

assign p_cast_fu_1616_p4 = {{empty_99_fu_1611_p2[63:2]}};

assign p_shl_cast_fu_2032_p3 = {{select_ln227_1_reg_2489}, {2'd0}};

assign ret_21_fu_1552_p0 = ret_21_fu_1552_p00;

assign ret_21_fu_1552_p00 = TN_MIN_reg_2287;

assign ret_21_fu_1552_p1 = ret_21_fu_1552_p10;

assign ret_21_fu_1552_p10 = TM_MIN;

assign sel_tmp1_fu_2068_p3 = ((sel_tmp_reg_2501[0:0] == 1'b1) ? input_value_fu_2054_p1 : next_value_1_fu_368);

assign sel_tmp_fu_1984_p2 = (select_ln226_7_fu_1929_p3 & ReadNextFlag_1_reg_1440);

assign select_ln226_1_fu_1901_p3 = ((icmp_ln878_3_reg_2404_pp1_iter1_reg[0:0] == 1'b1) ? cmp_i62_i_mid1_reg_2428 : cmp_i62_i_reg_2423);

assign select_ln226_2_fu_1799_p3 = ((icmp_ln878_3_reg_2404[0:0] == 1'b1) ? empty_106_fu_1786_p1 : empty_103_fu_1741_p1);

assign select_ln226_3_fu_1811_p3 = ((icmp_ln878_3_reg_2404[0:0] == 1'b1) ? Enable_mid146_fu_1806_p2 : Enable_fu_1767_p2);

assign select_ln226_4_fu_1911_p3 = ((icmp_ln878_3_reg_2404_pp1_iter1_reg[0:0] == 1'b1) ? icmp_ln255_reg_2384 : icmp_ln255_1_fu_1906_p2);

assign select_ln226_5_fu_1834_p3 = ((icmp_ln878_3_reg_2404[0:0] == 1'b1) ? icmp_ln254_reg_2390 : icmp_ln254_1_fu_1829_p2);

assign select_ln226_6_fu_1917_p3 = ((or_ln226_reg_2454[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_t3_V_phi_fu_1433_p4);

assign select_ln226_7_fu_1929_p3 = ((select_ln226_5_reg_2442[0:0] == 1'b1) ? Enable_mid1_fu_1924_p2 : select_ln226_3_reg_2437);

assign select_ln226_8_fu_1871_p3 = ((select_ln226_5_fu_1834_p3[0:0] == 1'b1) ? empty_107_fu_1858_p1 : and_ln226_fu_1823_p2);

assign select_ln226_9_fu_1935_p3 = ((select_ln226_5_reg_2442[0:0] == 1'b1) ? icmp_ln255_reg_2384 : select_ln226_4_fu_1911_p3);

assign select_ln226_fu_1779_p3 = ((icmp_ln878_3_reg_2404[0:0] == 1'b1) ? 2'd0 : t2_V_reg_1407);

assign select_ln227_1_fu_1965_p3 = ((select_ln226_9_fu_1935_p3[0:0] == 1'b1) ? t3_V_4_fu_1941_p2 : select_ln226_6_fu_1917_p3);

assign select_ln227_fu_1957_p3 = ((or_ln227_1_fu_1952_p2[0:0] == 1'b1) ? 2'd0 : t4_V_reg_1462);

assign select_ln234_fu_1584_p3 = ((icmp_ln234_reg_2296[0:0] == 1'b1) ? 32'd0 : Woffset);

assign select_ln254_fu_1893_p3 = ((or_ln226_fu_1853_p2[0:0] == 1'b1) ? 4'd1 : add_ln254_fu_1887_p2);

assign select_ln878_1_fu_1879_p3 = ((select_ln226_5_fu_1834_p3[0:0] == 1'b1) ? add_ln691_5_fu_1847_p2 : select_ln226_fu_1779_p3);

assign select_ln878_2_fu_1733_p3 = ((icmp_ln878_3_fu_1722_p2[0:0] == 1'b1) ? 6'd1 : add_ln878_fu_1727_p2);

assign select_ln878_fu_1840_p3 = ((icmp_ln878_3_reg_2404[0:0] == 1'b1) ? add_ln691_fu_1773_p2 : t1_V_reg_1396);

assign storemerge_fu_2075_p3 = ((select_ln226_7_reg_2478[0:0] == 1'b1) ? sel_tmp1_fu_2068_p3 : 16'd0);

assign sub_ln273_fu_2039_p2 = (p_shl_cast_fu_2032_p3 - zext_ln273_fu_2029_p1);

assign sub_ln287_fu_1512_p2 = (InFM_num - n);

assign t1_V_cast_cast412_fu_1745_p1 = empty_103_fu_1741_p1;

assign t1_V_cast_mid1_cast_fu_1790_p1 = empty_106_fu_1786_p1;

assign t2_V_cast_cast413_fu_1758_p1 = empty_104_fu_1754_p1;

assign t2_V_cast_mid1_cast_fu_1862_p1 = empty_107_fu_1858_p1;

assign t3_V_4_fu_1941_p2 = (select_ln226_6_fu_1917_p3 + 2'd1);

assign t4_V_1_fu_2020_p2 = (select_ln227_fu_1957_p3 + 2'd1);

assign tmp_8_fu_1599_p3 = {{select_ln234_fu_1584_p3}, {2'd0}};

assign tmp_9_fu_1675_p3 = {{mul_ln246_fu_1669_p2}, {1'd0}};

assign tmp_s_fu_1687_p3 = {{mul_ln246_fu_1669_p2}, {6'd0}};

assign trunc_ln301_1_fu_1518_p1 = sub_ln287_fu_1512_p2[5:0];

assign trunc_ln301_fu_1526_p1 = TN[5:0];

assign weight_buffer1010_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1010_d0 = storemerge_reg_2527;

assign weight_buffer10_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer10_d0 = storemerge_reg_2527;

assign weight_buffer1111_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1111_d0 = storemerge_reg_2527;

assign weight_buffer11_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer11_d0 = storemerge_reg_2527;

assign weight_buffer1212_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1212_d0 = storemerge_reg_2527;

assign weight_buffer12_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer12_d0 = storemerge_reg_2527;

assign weight_buffer1313_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1313_d0 = storemerge_reg_2527;

assign weight_buffer13_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer13_d0 = storemerge_reg_2527;

assign weight_buffer1414_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1414_d0 = storemerge_reg_2527;

assign weight_buffer14_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer14_d0 = storemerge_reg_2527;

assign weight_buffer1515_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1515_d0 = storemerge_reg_2527;

assign weight_buffer15_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer15_d0 = storemerge_reg_2527;

assign weight_buffer1616_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1616_d0 = storemerge_reg_2527;

assign weight_buffer16_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer16_d0 = storemerge_reg_2527;

assign weight_buffer1717_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1717_d0 = storemerge_reg_2527;

assign weight_buffer17_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer17_d0 = storemerge_reg_2527;

assign weight_buffer1818_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1818_d0 = storemerge_reg_2527;

assign weight_buffer18_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer18_d0 = storemerge_reg_2527;

assign weight_buffer1919_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1919_d0 = storemerge_reg_2527;

assign weight_buffer19_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer19_d0 = storemerge_reg_2527;

assign weight_buffer1_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer1_d0 = storemerge_reg_2527;

assign weight_buffer2020_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2020_d0 = storemerge_reg_2527;

assign weight_buffer20_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer20_d0 = storemerge_reg_2527;

assign weight_buffer2121_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2121_d0 = storemerge_reg_2527;

assign weight_buffer21_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer21_d0 = storemerge_reg_2527;

assign weight_buffer2222_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2222_d0 = storemerge_reg_2527;

assign weight_buffer2223_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2223_d0 = storemerge_reg_2527;

assign weight_buffer22_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer22_d0 = storemerge_reg_2527;

assign weight_buffer2324_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2324_d0 = storemerge_reg_2527;

assign weight_buffer23_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer23_d0 = storemerge_reg_2527;

assign weight_buffer2425_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2425_d0 = storemerge_reg_2527;

assign weight_buffer24_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer24_d0 = storemerge_reg_2527;

assign weight_buffer2526_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2526_d0 = storemerge_reg_2527;

assign weight_buffer25_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer25_d0 = storemerge_reg_2527;

assign weight_buffer2627_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2627_d0 = storemerge_reg_2527;

assign weight_buffer26_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer26_d0 = storemerge_reg_2527;

assign weight_buffer2728_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2728_d0 = storemerge_reg_2527;

assign weight_buffer27_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer27_d0 = storemerge_reg_2527;

assign weight_buffer2829_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2829_d0 = storemerge_reg_2527;

assign weight_buffer28_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer28_d0 = storemerge_reg_2527;

assign weight_buffer2930_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2930_d0 = storemerge_reg_2527;

assign weight_buffer29_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer29_d0 = storemerge_reg_2527;

assign weight_buffer2_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer2_d0 = storemerge_reg_2527;

assign weight_buffer3031_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer3031_d0 = storemerge_reg_2527;

assign weight_buffer30_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer30_d0 = storemerge_reg_2527;

assign weight_buffer3132_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer3132_d0 = storemerge_reg_2527;

assign weight_buffer31_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer31_d0 = storemerge_reg_2527;

assign weight_buffer3233_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer3233_d0 = storemerge_reg_2527;

assign weight_buffer32_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer32_d0 = storemerge_reg_2527;

assign weight_buffer33_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer33_d0 = storemerge_reg_2527;

assign weight_buffer3_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer3_d0 = storemerge_reg_2527;

assign weight_buffer44_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer44_d0 = storemerge_reg_2527;

assign weight_buffer4_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer4_d0 = storemerge_reg_2527;

assign weight_buffer55_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer55_d0 = storemerge_reg_2527;

assign weight_buffer5_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer5_d0 = storemerge_reg_2527;

assign weight_buffer66_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer66_d0 = storemerge_reg_2527;

assign weight_buffer6_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer6_d0 = storemerge_reg_2527;

assign weight_buffer77_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer77_d0 = storemerge_reg_2527;

assign weight_buffer7_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer7_d0 = storemerge_reg_2527;

assign weight_buffer88_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer88_d0 = storemerge_reg_2527;

assign weight_buffer8_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer8_d0 = storemerge_reg_2527;

assign weight_buffer99_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer99_d0 = storemerge_reg_2527;

assign weight_buffer9_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer9_d0 = storemerge_reg_2527;

assign weight_buffer_address0 = zext_ln273_2_fu_2101_p1;

assign weight_buffer_d0 = storemerge_reg_2527;

assign weight_load_enable_offset_read_read_fu_384_p2 = weight_load_enable_offset;

assign weight_memcpy_offset_2_fu_1978_p2 = (weight_memcpy_offset_1_reg_1451 + 32'd1);

assign weight_memcpy_offset_3_fu_1990_p3 = ((sel_tmp_fu_1984_p2[0:0] == 1'b1) ? weight_memcpy_offset_2_fu_1978_p2 : weight_memcpy_offset_1_reg_1451);

assign weight_memcpy_offset_fu_1998_p3 = ((select_ln226_7_fu_1929_p3[0:0] == 1'b1) ? weight_memcpy_offset_3_fu_1990_p3 : weight_memcpy_offset_1_reg_1451);

assign xor_ln226_fu_1818_p2 = (icmp_ln878_3_reg_2404 ^ 1'd1);

assign zext_ln244_fu_1591_p1 = r_6_reg_2316;

assign zext_ln246_1_fu_1683_p1 = tmp_9_fu_1675_p3;

assign zext_ln246_fu_1666_p1 = Kernel_size;

assign zext_ln263_fu_1973_p1 = weight_memcpy_offset_1_reg_1451;

assign zext_ln273_1_fu_2045_p1 = select_ln227_reg_2484;

assign zext_ln273_2_fu_2101_p1 = add_ln273_reg_2522;

assign zext_ln273_fu_2029_p1 = select_ln227_1_reg_2489;

always @ (posedge ap_clk) begin
    zext_ln244_reg_2328[31:15] <= 17'b00000000000000000;
    zext_ln246_1_reg_2369[0] <= 1'b0;
    zext_ln246_1_reg_2369[5] <= 1'b0;
    tmp_s_reg_2374[5:0] <= 6'b000000;
end

endmodule //YOLO2_FPGA_copy_input_weight
