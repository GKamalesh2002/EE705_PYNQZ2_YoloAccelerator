// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_ifm_copy_lbuf2ibuf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_buffer_0_address0,
        input_buffer_0_ce0,
        input_buffer_0_we0,
        input_buffer_0_d0,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_we0,
        input_buffer_1_d0,
        local_buf_address0,
        local_buf_ce0,
        local_buf_q0,
        TCol,
        Input_w,
        Input_h,
        TN_MIN,
        pad_val,
        Coffset,
        Roffset,
        t1,
        t2,
        bn,
        enable
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_buffer_0_address0;
output   input_buffer_0_ce0;
output   input_buffer_0_we0;
output  [15:0] input_buffer_0_d0;
output  [11:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
output   input_buffer_1_we0;
output  [15:0] input_buffer_1_d0;
output  [4:0] local_buf_address0;
output   local_buf_ce0;
input  [31:0] local_buf_q0;
input  [15:0] TCol;
input  [11:0] Input_w;
input  [11:0] Input_h;
input  [7:0] TN_MIN;
input  [15:0] pad_val;
input  [17:0] Coffset;
input  [17:0] Roffset;
input  [7:0] t1;
input  [7:0] t2;
input  [7:0] bn;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_buffer_0_ce0;
reg input_buffer_0_we0;
reg input_buffer_1_ce0;
reg input_buffer_1_we0;
reg[4:0] local_buf_address0;
reg local_buf_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] t3_reg_192;
reg   [15:0] buf_256b_1_0_reg_203;
reg   [15:0] buf_256b_0_0_reg_213;
reg   [7:0] bn_local_reg_223;
reg   [15:0] cnt_3_reg_233;
wire   [0:0] enable_read_read_fu_78_p2;
wire  signed [18:0] Coffset_cast_fu_254_p1;
reg  signed [18:0] Coffset_cast_reg_507;
wire   [0:0] TN_Enable_fu_262_p2;
reg   [0:0] TN_Enable_reg_517;
wire   [18:0] yoffset_fu_272_p2;
reg   [18:0] yoffset_reg_522;
wire   [0:0] trunc_ln51_fu_278_p1;
reg   [0:0] trunc_ln51_reg_528;
wire   [15:0] buf_256b_0_fu_303_p1;
wire    ap_CS_fsm_state2;
wire   [15:0] grp_fu_244_p4;
wire   [18:0] Input_w_cast_fu_307_p1;
reg   [18:0] Input_w_cast_reg_542;
wire   [11:0] mul_ln51_fu_313_p2;
reg   [11:0] mul_ln51_reg_547;
wire   [0:0] and_ln49_3_fu_325_p2;
reg   [0:0] and_ln49_3_reg_552;
wire   [7:0] t3_3_fu_330_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_340_p2;
reg   [0:0] icmp_ln43_reg_562;
reg   [0:0] icmp_ln43_reg_562_pp0_iter1_reg;
wire   [18:0] xoffset_fu_349_p2;
reg   [18:0] xoffset_reg_566;
wire   [11:0] add_ln51_fu_358_p2;
reg   [11:0] add_ln51_reg_572;
reg   [11:0] add_ln51_reg_572_pp0_iter1_reg;
wire   [0:0] and_ln49_fu_386_p2;
reg   [0:0] and_ln49_reg_577;
wire   [0:0] icmp_ln56_fu_397_p2;
reg   [0:0] icmp_ln56_reg_582;
wire   [15:0] cnt_4_fu_414_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] bn_local_3_fu_422_p3;
reg   [7:0] bn_local_3_reg_598;
wire   [15:0] buf_256b_1_6_fu_459_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] buf_256b_0_5_fu_466_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state4;
reg   [7:0] ap_phi_mux_bn_local_phi_fu_226_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln59_fu_403_p1;
wire   [63:0] zext_ln51_2_fu_430_p1;
wire   [15:0] select_ln49_fu_447_p3;
wire   [18:0] zext_ln33_fu_268_p1;
wire  signed [18:0] Roffset_cast_fu_258_p1;
wire   [0:0] tmp_fu_282_p3;
wire   [18:0] zext_ln34_fu_295_p1;
wire   [7:0] mul_ln51_fu_313_p0;
wire   [6:0] mul_ln51_fu_313_p1;
wire   [0:0] icmp_ln34_fu_298_p2;
wire   [0:0] xor_ln34_fu_289_p2;
wire   [0:0] and_ln49_2_fu_319_p2;
wire   [15:0] zext_ln43_1_fu_336_p1;
wire   [18:0] zext_ln43_fu_345_p1;
wire   [11:0] zext_ln51_1_fu_354_p1;
wire   [0:0] tmp_1_fu_363_p3;
wire   [0:0] icmp_ln48_fu_376_p2;
wire   [0:0] xor_ln48_fu_370_p2;
wire   [0:0] and_ln49_1_fu_380_p2;
wire   [7:0] bn_local_2_fu_391_p2;
wire   [15:0] cnt_fu_408_p2;
wire   [0:0] trunc_ln51_1_fu_435_p1;
wire   [15:0] select_ln51_fu_439_p3;
wire   [15:0] buf_256b_0_4_fu_455_p1;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] mul_ln51_fu_313_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

FPGA_Acc_mul_8ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_8ns_7ns_12_1_1_U1(
    .din0(mul_ln51_fu_313_p0),
    .din1(mul_ln51_fu_313_p1),
    .dout(mul_ln51_fu_313_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_condition_pp0_exit_iter1_state4) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter1_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln43_reg_562_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bn_local_reg_223 <= bn_local_3_reg_598;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bn_local_reg_223 <= bn;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln43_reg_562_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_256b_0_0_reg_213 <= buf_256b_0_5_fu_466_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_256b_0_0_reg_213 <= buf_256b_0_fu_303_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln43_reg_562_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_256b_1_0_reg_203 <= buf_256b_1_6_fu_459_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_256b_1_0_reg_203 <= {{local_buf_q0[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_562 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cnt_3_reg_233 <= cnt_4_fu_414_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cnt_3_reg_233 <= 16'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_340_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        t3_reg_192 <= t3_3_fu_330_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t3_reg_192 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Coffset_cast_reg_507 <= Coffset_cast_fu_254_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Input_w_cast_reg_542[11 : 0] <= Input_w_cast_fu_307_p1[11 : 0];
        and_ln49_3_reg_552 <= and_ln49_3_fu_325_p2;
        mul_ln51_reg_547 <= mul_ln51_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        TN_Enable_reg_517 <= TN_Enable_fu_262_p2;
        trunc_ln51_reg_528 <= trunc_ln51_fu_278_p1;
        yoffset_reg_522 <= yoffset_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_340_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln51_reg_572 <= add_ln51_fu_358_p2;
        xoffset_reg_566 <= xoffset_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln51_reg_572_pp0_iter1_reg <= add_ln51_reg_572;
        icmp_ln43_reg_562 <= icmp_ln43_fu_340_p2;
        icmp_ln43_reg_562_pp0_iter1_reg <= icmp_ln43_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_reg_562 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln49_reg_577 <= and_ln49_fu_386_p2;
        icmp_ln56_reg_582 <= icmp_ln56_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_562 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bn_local_3_reg_598 <= bn_local_3_fu_422_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_340_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln43_reg_562_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_bn_local_phi_fu_226_p4 = bn_local_3_reg_598;
    end else begin
        ap_phi_mux_bn_local_phi_fu_226_p4 = bn_local_reg_223;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_buffer_0_ce0 = 1'b1;
    end else begin
        input_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln51_reg_528 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_buffer_0_we0 = 1'b1;
    end else begin
        input_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_buffer_1_ce0 = 1'b1;
    end else begin
        input_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln51_reg_528 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_buffer_1_we0 = 1'b1;
    end else begin
        input_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        local_buf_address0 = zext_ln59_fu_403_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        local_buf_address0 = 64'd0;
    end else begin
        local_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        local_buf_ce0 = 1'b1;
    end else begin
        local_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (enable_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((ap_start == 1'b1) & (enable_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Coffset_cast_fu_254_p1 = $signed(Coffset);

assign Input_w_cast_fu_307_p1 = Input_w;

assign Roffset_cast_fu_258_p1 = $signed(Roffset);

assign TN_Enable_fu_262_p2 = ((t1 < TN_MIN) ? 1'b1 : 1'b0);

assign add_ln51_fu_358_p2 = (mul_ln51_reg_547 + zext_ln51_1_fu_354_p1);

assign and_ln49_1_fu_380_p2 = (xor_ln48_fu_370_p2 & icmp_ln48_fu_376_p2);

assign and_ln49_2_fu_319_p2 = (xor_ln34_fu_289_p2 & icmp_ln34_fu_298_p2);

assign and_ln49_3_fu_325_p2 = (and_ln49_2_fu_319_p2 & TN_Enable_reg_517);

assign and_ln49_fu_386_p2 = (and_ln49_3_reg_552 & and_ln49_1_fu_380_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bn_local_2_fu_391_p2 = (ap_phi_mux_bn_local_phi_fu_226_p4 + 8'd1);

assign bn_local_3_fu_422_p3 = ((icmp_ln56_fu_397_p2[0:0] == 1'b1) ? 8'd0 : bn_local_2_fu_391_p2);

assign buf_256b_0_4_fu_455_p1 = local_buf_q0[15:0];

assign buf_256b_0_5_fu_466_p3 = ((icmp_ln56_reg_582[0:0] == 1'b1) ? buf_256b_0_4_fu_455_p1 : buf_256b_0_0_reg_213);

assign buf_256b_0_fu_303_p1 = local_buf_q0[15:0];

assign buf_256b_1_6_fu_459_p3 = ((icmp_ln56_reg_582[0:0] == 1'b1) ? grp_fu_244_p4 : buf_256b_1_0_reg_203);

assign cnt_4_fu_414_p3 = ((icmp_ln56_fu_397_p2[0:0] == 1'b1) ? cnt_fu_408_p2 : cnt_3_reg_233);

assign cnt_fu_408_p2 = (cnt_3_reg_233 + 16'd1);

assign enable_read_read_fu_78_p2 = enable;

assign grp_fu_244_p4 = {{local_buf_q0[31:16]}};

assign icmp_ln34_fu_298_p2 = (($signed(yoffset_reg_522) < $signed(zext_ln34_fu_295_p1)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_340_p2 = ((zext_ln43_1_fu_336_p1 < TCol) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_376_p2 = (($signed(xoffset_reg_566) < $signed(Input_w_cast_reg_542)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_397_p2 = ((bn_local_2_fu_391_p2 == 8'd2) ? 1'b1 : 1'b0);

assign input_buffer_0_address0 = zext_ln51_2_fu_430_p1;

assign input_buffer_0_d0 = select_ln49_fu_447_p3;

assign input_buffer_1_address0 = zext_ln51_2_fu_430_p1;

assign input_buffer_1_d0 = select_ln49_fu_447_p3;

assign mul_ln51_fu_313_p0 = mul_ln51_fu_313_p00;

assign mul_ln51_fu_313_p00 = t2;

assign mul_ln51_fu_313_p1 = 12'd53;

assign select_ln49_fu_447_p3 = ((and_ln49_reg_577[0:0] == 1'b1) ? select_ln51_fu_439_p3 : pad_val);

assign select_ln51_fu_439_p3 = ((trunc_ln51_1_fu_435_p1[0:0] == 1'b1) ? buf_256b_1_0_reg_203 : buf_256b_0_0_reg_213);

assign t3_3_fu_330_p2 = (t3_reg_192 + 8'd1);

assign tmp_1_fu_363_p3 = xoffset_reg_566[32'd18];

assign tmp_fu_282_p3 = yoffset_reg_522[32'd18];

assign trunc_ln51_1_fu_435_p1 = bn_local_reg_223[0:0];

assign trunc_ln51_fu_278_p1 = t1[0:0];

assign xoffset_fu_349_p2 = ($signed(zext_ln43_fu_345_p1) + $signed(Coffset_cast_reg_507));

assign xor_ln34_fu_289_p2 = (tmp_fu_282_p3 ^ 1'd1);

assign xor_ln48_fu_370_p2 = (tmp_1_fu_363_p3 ^ 1'd1);

assign yoffset_fu_272_p2 = ($signed(zext_ln33_fu_268_p1) + $signed(Roffset_cast_fu_258_p1));

assign zext_ln33_fu_268_p1 = t2;

assign zext_ln34_fu_295_p1 = Input_h;

assign zext_ln43_1_fu_336_p1 = t3_reg_192;

assign zext_ln43_fu_345_p1 = t3_reg_192;

assign zext_ln51_1_fu_354_p1 = t3_reg_192;

assign zext_ln51_2_fu_430_p1 = add_ln51_reg_572_pp0_iter1_reg;

assign zext_ln59_fu_403_p1 = cnt_3_reg_233;

always @ (posedge ap_clk) begin
    Input_w_cast_reg_542[18:12] <= 7'b0000000;
end

endmodule //FPGA_Acc_ifm_copy_lbuf2ibuf
