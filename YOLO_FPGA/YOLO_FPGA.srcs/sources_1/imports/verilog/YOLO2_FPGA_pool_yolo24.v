// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module YOLO2_FPGA_pool_yolo24 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_r_address0,
        Input_r_ce0,
        Input_r_q0,
        Input1_address0,
        Input1_ce0,
        Input1_q0,
        Output_r_address0,
        Output_r_ce0,
        Output_r_we0,
        Output_r_d0,
        Output2_address0,
        Output2_ce0,
        Output2_we0,
        Output2_d0,
        TR_MIN,
        TC_MIN,
        enable
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state17 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] Input_r_address0;
output   Input_r_ce0;
input  [15:0] Input_r_q0;
output  [11:0] Input1_address0;
output   Input1_ce0;
input  [15:0] Input1_q0;
output  [9:0] Output_r_address0;
output   Output_r_ce0;
output   Output_r_we0;
output  [15:0] Output_r_d0;
output  [9:0] Output2_address0;
output   Output2_ce0;
output   Output2_we0;
output  [15:0] Output2_d0;
input  [31:0] TR_MIN;
input  [31:0] TC_MIN;
input  [0:0] enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_r_ce0;
reg Input1_ce0;
reg Output_r_ce0;
reg Output_r_we0;
reg Output2_ce0;
reg Output2_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [64:0] indvar_flatten71_reg_162;
reg   [34:0] indvar_flatten27_reg_173;
reg   [3:0] indvar_flatten_reg_184;
reg   [30:0] y_reg_195;
reg   [1:0] ky_reg_206;
reg   [1:0] kx_reg_217;
reg   [31:0] x_reg_228;
wire   [0:0] and_ln492_fu_245_p2;
wire   [33:0] tmp_fu_255_p3;
reg   [33:0] tmp_reg_762;
wire   [34:0] zext_ln495_fu_277_p1;
reg   [34:0] zext_ln495_reg_777;
wire    ap_CS_fsm_state5;
wire   [64:0] grp_fu_271_p2;
reg   [64:0] mul_ln495_reg_782;
wire   [64:0] add_ln495_1_fu_280_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state12_pp0_stage0_iter6;
wire    ap_block_state13_pp0_stage0_iter7;
wire    ap_block_state14_pp0_stage0_iter8;
wire    ap_block_state15_pp0_stage0_iter9;
wire    ap_block_state16_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln495_1_fu_286_p2;
reg   [0:0] icmp_ln495_1_reg_792;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter1_reg;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter2_reg;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter3_reg;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter4_reg;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter5_reg;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter6_reg;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter7_reg;
reg   [0:0] icmp_ln495_1_reg_792_pp0_iter8_reg;
wire   [0:0] icmp_ln496_fu_291_p2;
reg   [0:0] icmp_ln496_reg_796;
reg   [0:0] icmp_ln496_reg_796_pp0_iter1_reg;
reg   [0:0] icmp_ln496_reg_796_pp0_iter2_reg;
reg   [0:0] icmp_ln496_reg_796_pp0_iter3_reg;
reg   [0:0] icmp_ln496_reg_796_pp0_iter4_reg;
wire   [34:0] select_ln496_5_fu_302_p3;
wire   [0:0] xor_ln495_fu_310_p2;
reg   [0:0] xor_ln495_reg_816;
wire   [0:0] icmp_ln497_fu_315_p2;
reg   [0:0] icmp_ln497_reg_822;
wire   [0:0] and_ln495_2_fu_321_p2;
reg   [0:0] and_ln495_2_reg_827;
reg   [0:0] and_ln495_2_reg_827_pp0_iter2_reg;
reg   [0:0] and_ln495_2_reg_827_pp0_iter3_reg;
reg   [0:0] and_ln495_2_reg_827_pp0_iter4_reg;
wire   [0:0] or_ln496_fu_327_p2;
reg   [0:0] or_ln496_reg_837;
wire   [3:0] select_ln497_5_fu_338_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] empty_fu_362_p2;
reg   [5:0] empty_reg_847;
wire   [30:0] select_ln495_1_fu_374_p3;
reg   [30:0] select_ln495_1_reg_852;
reg    ap_enable_reg_pp0_iter2;
wire  signed [9:0] trunc_ln510_fu_381_p1;
reg  signed [9:0] trunc_ln510_reg_857;
wire   [5:0] shl_ln496_mid1_fu_389_p3;
reg   [5:0] shl_ln496_mid1_reg_862;
wire   [5:0] select_ln495_2_fu_397_p3;
reg   [5:0] select_ln495_2_reg_867;
wire   [0:0] cmp30_not41_fu_413_p2;
reg   [0:0] cmp30_not41_reg_873;
wire   [1:0] select_ln496_fu_430_p3;
reg   [1:0] select_ln496_reg_878;
wire   [0:0] and_ln496_1_fu_453_p2;
reg   [0:0] and_ln496_1_reg_883;
wire   [1:0] add_ln497_fu_459_p2;
reg   [1:0] add_ln497_reg_889;
wire   [1:0] select_ln497_fu_475_p3;
reg   [1:0] select_ln497_reg_894;
reg   [1:0] select_ln497_reg_894_pp0_iter3_reg;
reg   [1:0] select_ln497_reg_894_pp0_iter4_reg;
wire   [1:0] select_ln497_4_fu_495_p3;
wire   [0:0] empty_80_fu_507_p2;
reg   [0:0] empty_80_reg_905;
reg   [0:0] empty_80_reg_905_pp0_iter3_reg;
reg   [0:0] empty_80_reg_905_pp0_iter4_reg;
reg   [0:0] empty_80_reg_905_pp0_iter5_reg;
reg   [0:0] empty_80_reg_905_pp0_iter6_reg;
reg   [0:0] empty_80_reg_905_pp0_iter7_reg;
reg   [0:0] empty_80_reg_905_pp0_iter8_reg;
wire   [1:0] add_ln498_fu_513_p2;
wire   [0:0] brmerge16_fu_575_p2;
reg   [0:0] brmerge16_reg_921;
reg   [0:0] brmerge16_reg_921_pp0_iter4_reg;
reg   [0:0] brmerge16_reg_921_pp0_iter5_reg;
reg   [0:0] brmerge16_reg_921_pp0_iter6_reg;
reg   [0:0] brmerge16_reg_921_pp0_iter7_reg;
reg   [0:0] brmerge16_reg_921_pp0_iter8_reg;
reg   [0:0] brmerge16_reg_921_pp0_iter9_reg;
wire   [10:0] trunc_ln497_fu_585_p1;
reg   [10:0] trunc_ln497_reg_925;
wire   [31:0] add_ln496_fu_603_p2;
reg   [31:0] add_ln496_reg_930;
wire   [9:0] select_ln496_1_fu_613_p3;
reg   [9:0] select_ln496_1_reg_935;
wire   [31:0] select_ln496_4_fu_620_p3;
reg    ap_enable_reg_pp0_iter4;
wire  signed [9:0] grp_fu_732_p3;
reg  signed [9:0] add_ln510_reg_950;
reg    ap_enable_reg_pp0_iter6;
reg  signed [9:0] add_ln510_reg_950_pp0_iter7_reg;
reg  signed [9:0] add_ln510_reg_950_pp0_iter8_reg;
reg  signed [9:0] add_ln510_reg_950_pp0_iter9_reg;
wire   [11:0] grp_fu_738_p3;
reg   [11:0] add_ln506_reg_955;
reg   [15:0] tmp_0_reg_970;
reg   [15:0] tmp_1_reg_976;
wire   [15:0] tmp_0_3_fu_688_p3;
reg   [15:0] tmp_0_3_reg_982;
wire   [15:0] tmp_1_3_fu_715_p3;
reg   [15:0] tmp_1_3_reg_987;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_condition_pp0_exit_iter5_state11;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg   [30:0] ap_phi_mux_y_phi_fu_199_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln506_1_fu_668_p1;
wire   [63:0] zext_ln510_fu_727_p1;
reg   [15:0] tmp_0_2_fu_84;
reg   [15:0] tmp_1_2_fu_88;
wire   [0:0] icmp_ln495_fu_239_p2;
wire   [30:0] trunc_ln495_fu_251_p1;
wire   [30:0] grp_fu_271_p0;
wire   [33:0] grp_fu_271_p1;
wire   [34:0] add_ln496_1_fu_296_p2;
wire   [3:0] add_ln497_1_fu_332_p2;
wire   [4:0] trunc_ln496_fu_346_p1;
wire   [5:0] zext_ln497_fu_358_p1;
wire   [5:0] shl_ln_fu_350_p3;
wire   [30:0] add_ln495_fu_368_p2;
wire   [4:0] trunc_ln496_1_fu_385_p1;
wire   [0:0] trunc_ln497_1_fu_404_p1;
wire   [0:0] icmp_ln498_fu_419_p2;
wire   [0:0] xor_ln496_fu_437_p2;
wire   [0:0] and_ln495_fu_408_p2;
wire   [0:0] or_ln496_1_fu_442_p2;
wire   [0:0] and_ln495_1_fu_425_p2;
wire   [0:0] or_ln497_fu_465_p2;
wire   [0:0] or_ln497_1_fu_470_p2;
wire   [0:0] trunc_ln497_3_fu_483_p1;
wire   [0:0] and_ln496_fu_447_p2;
wire   [0:0] trunc_ln498_fu_503_p1;
wire   [0:0] select_ln497_1_fu_487_p3;
wire   [5:0] select_ln495_5_fu_519_p3;
wire   [0:0] or_ln495_fu_524_p2;
wire   [5:0] zext_ln497_1_fu_539_p1;
wire   [5:0] p_mid1_fu_542_p2;
wire   [5:0] select_ln496_3_fu_528_p3;
wire   [5:0] select_ln497_2_fu_547_p3;
wire   [0:0] cmp30_not_mid1_fu_558_p2;
wire   [0:0] or_ln496_2_fu_534_p2;
wire   [0:0] cmp29_not_fu_570_p2;
wire   [0:0] select_ln497_3_fu_563_p3;
wire   [9:0] trunc_ln483_fu_581_p1;
wire   [31:0] select_ln495_fu_589_p3;
wire   [9:0] trunc_ln496_2_fu_609_p1;
wire   [9:0] select_ln495_3_fu_596_p3;
wire   [11:0] shl_ln1_fu_627_p3;
wire   [10:0] trunc_ln497_2_fu_641_p1;
wire   [11:0] shl_ln497_mid1_fu_644_p3;
wire   [11:0] select_ln495_4_fu_634_p3;
wire   [11:0] zext_ln498_fu_659_p1;
wire   [11:0] select_ln496_2_fu_652_p3;
wire   [15:0] select_ln503_fu_676_p3;
wire   [0:0] icmp_ln506_fu_683_p2;
wire   [15:0] select_ln503_1_fu_703_p3;
wire   [0:0] icmp_ln506_1_fu_710_p2;
wire   [5:0] grp_fu_732_p1;
wire   [5:0] grp_fu_738_p0;
wire   [6:0] grp_fu_738_p1;
wire   [11:0] grp_fu_738_p2;
wire    ap_CS_fsm_state17;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [64:0] grp_fu_271_p00;
wire   [64:0] grp_fu_271_p10;
wire   [11:0] grp_fu_738_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

YOLO2_FPGA_mul_31ns_34ns_65_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_31ns_34ns_65_5_1_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_271_p0),
    .din1(grp_fu_271_p1),
    .ce(1'b1),
    .dout(grp_fu_271_p2)
);

YOLO2_FPGA_mac_muladd_10s_6ns_10ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_10s_6ns_10ns_10_4_1_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln510_reg_857),
    .din1(grp_fu_732_p1),
    .din2(select_ln496_1_reg_935),
    .ce(1'b1),
    .dout(grp_fu_732_p3)
);

YOLO2_FPGA_mac_muladd_6ns_7ns_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_7ns_12ns_12_4_1_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_738_p0),
    .din1(grp_fu_738_p1),
    .din2(grp_fu_738_p2),
    .ce(1'b1),
    .dout(grp_fu_738_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter5_state11)) begin
                ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter4;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln495_1_fu_286_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten27_reg_173 <= select_ln496_5_fu_302_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten27_reg_173 <= 35'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln495_1_fu_286_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten71_reg_162 <= add_ln495_1_fu_280_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten71_reg_162 <= 65'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln495_1_reg_792 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_184 <= select_ln497_5_fu_338_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten_reg_184 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kx_reg_217 <= add_ln498_fu_513_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kx_reg_217 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ky_reg_206 <= select_ln497_4_fu_495_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ky_reg_206 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_228 <= select_ln496_4_fu_620_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_reg_228 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_reg_195 <= select_ln495_1_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_195 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln495_1_reg_792_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln496_reg_930 <= add_ln496_fu_603_p2;
        select_ln496_1_reg_935 <= select_ln496_1_fu_613_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln495_1_reg_792_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln497_reg_889 <= add_ln497_fu_459_p2;
        and_ln496_1_reg_883 <= and_ln496_1_fu_453_p2;
        cmp30_not41_reg_873 <= cmp30_not41_fu_413_p2;
        empty_80_reg_905 <= empty_80_fu_507_p2;
        select_ln495_2_reg_867[5 : 1] <= select_ln495_2_fu_397_p3[5 : 1];
        select_ln496_reg_878 <= select_ln496_fu_430_p3;
        select_ln497_reg_894 <= select_ln497_fu_475_p3;
        shl_ln496_mid1_reg_862[5 : 1] <= shl_ln496_mid1_fu_389_p3[5 : 1];
        trunc_ln510_reg_857 <= trunc_ln510_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln506_reg_955 <= grp_fu_738_p3;
        add_ln510_reg_950 <= grp_fu_732_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln510_reg_950_pp0_iter7_reg <= add_ln510_reg_950;
        add_ln510_reg_950_pp0_iter8_reg <= add_ln510_reg_950_pp0_iter7_reg;
        add_ln510_reg_950_pp0_iter9_reg <= add_ln510_reg_950_pp0_iter8_reg;
        and_ln495_2_reg_827_pp0_iter2_reg <= and_ln495_2_reg_827;
        and_ln495_2_reg_827_pp0_iter3_reg <= and_ln495_2_reg_827_pp0_iter2_reg;
        and_ln495_2_reg_827_pp0_iter4_reg <= and_ln495_2_reg_827_pp0_iter3_reg;
        brmerge16_reg_921_pp0_iter4_reg <= brmerge16_reg_921;
        brmerge16_reg_921_pp0_iter5_reg <= brmerge16_reg_921_pp0_iter4_reg;
        brmerge16_reg_921_pp0_iter6_reg <= brmerge16_reg_921_pp0_iter5_reg;
        brmerge16_reg_921_pp0_iter7_reg <= brmerge16_reg_921_pp0_iter6_reg;
        brmerge16_reg_921_pp0_iter8_reg <= brmerge16_reg_921_pp0_iter7_reg;
        brmerge16_reg_921_pp0_iter9_reg <= brmerge16_reg_921_pp0_iter8_reg;
        empty_80_reg_905_pp0_iter3_reg <= empty_80_reg_905;
        empty_80_reg_905_pp0_iter4_reg <= empty_80_reg_905_pp0_iter3_reg;
        empty_80_reg_905_pp0_iter5_reg <= empty_80_reg_905_pp0_iter4_reg;
        empty_80_reg_905_pp0_iter6_reg <= empty_80_reg_905_pp0_iter5_reg;
        empty_80_reg_905_pp0_iter7_reg <= empty_80_reg_905_pp0_iter6_reg;
        empty_80_reg_905_pp0_iter8_reg <= empty_80_reg_905_pp0_iter7_reg;
        icmp_ln495_1_reg_792_pp0_iter2_reg <= icmp_ln495_1_reg_792_pp0_iter1_reg;
        icmp_ln495_1_reg_792_pp0_iter3_reg <= icmp_ln495_1_reg_792_pp0_iter2_reg;
        icmp_ln495_1_reg_792_pp0_iter4_reg <= icmp_ln495_1_reg_792_pp0_iter3_reg;
        icmp_ln495_1_reg_792_pp0_iter5_reg <= icmp_ln495_1_reg_792_pp0_iter4_reg;
        icmp_ln495_1_reg_792_pp0_iter6_reg <= icmp_ln495_1_reg_792_pp0_iter5_reg;
        icmp_ln495_1_reg_792_pp0_iter7_reg <= icmp_ln495_1_reg_792_pp0_iter6_reg;
        icmp_ln495_1_reg_792_pp0_iter8_reg <= icmp_ln495_1_reg_792_pp0_iter7_reg;
        icmp_ln496_reg_796_pp0_iter2_reg <= icmp_ln496_reg_796_pp0_iter1_reg;
        icmp_ln496_reg_796_pp0_iter3_reg <= icmp_ln496_reg_796_pp0_iter2_reg;
        icmp_ln496_reg_796_pp0_iter4_reg <= icmp_ln496_reg_796_pp0_iter3_reg;
        select_ln497_reg_894_pp0_iter3_reg <= select_ln497_reg_894;
        select_ln497_reg_894_pp0_iter4_reg <= select_ln497_reg_894_pp0_iter3_reg;
        tmp_1_3_reg_987 <= tmp_1_3_fu_715_p3;
        tmp_1_reg_976 <= Input1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln495_1_reg_792 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln495_2_reg_827 <= and_ln495_2_fu_321_p2;
        icmp_ln497_reg_822 <= icmp_ln497_fu_315_p2;
        or_ln496_reg_837 <= or_ln496_fu_327_p2;
        xor_ln495_reg_816 <= xor_ln495_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln495_1_reg_792_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        brmerge16_reg_921 <= brmerge16_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln496_reg_796_pp0_iter1_reg == 1'd0) & (1'd0 == and_ln495_2_reg_827) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_847 <= empty_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln495_1_reg_792 <= icmp_ln495_1_fu_286_p2;
        icmp_ln495_1_reg_792_pp0_iter1_reg <= icmp_ln495_1_reg_792;
        icmp_ln496_reg_796_pp0_iter1_reg <= icmp_ln496_reg_796;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln495_1_fu_286_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln496_reg_796 <= icmp_ln496_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln495_reg_782 <= grp_fu_271_p2;
        zext_ln495_reg_777[33 : 2] <= zext_ln495_fu_277_p1[33 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln495_1_reg_852 <= select_ln495_1_fu_374_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_0_2_fu_84 <= tmp_0_3_fu_688_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln495_1_reg_792_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_0_3_reg_982 <= tmp_0_3_fu_688_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln495_1_reg_792_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_0_reg_970 <= Input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_2_fu_88 <= tmp_1_3_fu_715_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln492_fu_245_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_762[33 : 2] <= tmp_fu_255_p3[33 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln496_reg_796_pp0_iter3_reg == 1'd0) & (1'd0 == and_ln495_2_reg_827_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln497_reg_925 <= trunc_ln497_fu_585_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input1_ce0 = 1'b1;
    end else begin
        Input1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_r_ce0 = 1'b1;
    end else begin
        Input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output2_ce0 = 1'b1;
    end else begin
        Output2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (brmerge16_reg_921_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output2_we0 = 1'b1;
    end else begin
        Output2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output_r_ce0 = 1'b1;
    end else begin
        Output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (brmerge16_reg_921_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Output_r_we0 = 1'b1;
    end else begin
        Output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_condition_pp0_exit_iter5_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter5_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln495_1_fu_286_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln495_1_reg_792_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_y_phi_fu_199_p4 = select_ln495_1_reg_852;
    end else begin
        ap_phi_mux_y_phi_fu_199_p4 = y_reg_195;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln492_fu_245_p2) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'd1 == and_ln492_fu_245_p2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input1_address0 = zext_ln506_1_fu_668_p1;

assign Input_r_address0 = zext_ln506_1_fu_668_p1;

assign Output2_address0 = zext_ln510_fu_727_p1;

assign Output2_d0 = tmp_1_3_reg_987;

assign Output_r_address0 = zext_ln510_fu_727_p1;

assign Output_r_d0 = tmp_0_3_reg_982;

assign add_ln495_1_fu_280_p2 = (indvar_flatten71_reg_162 + 65'd1);

assign add_ln495_fu_368_p2 = (ap_phi_mux_y_phi_fu_199_p4 + 31'd1);

assign add_ln496_1_fu_296_p2 = (indvar_flatten27_reg_173 + 35'd1);

assign add_ln496_fu_603_p2 = (select_ln495_fu_589_p3 + 32'd1);

assign add_ln497_1_fu_332_p2 = (indvar_flatten_reg_184 + 4'd1);

assign add_ln497_fu_459_p2 = (select_ln496_fu_430_p3 + 2'd1);

assign add_ln498_fu_513_p2 = (select_ln497_fu_475_p3 + 2'd1);

assign and_ln492_fu_245_p2 = (icmp_ln495_fu_239_p2 & enable);

assign and_ln495_1_fu_425_p2 = (xor_ln495_reg_816 & icmp_ln498_fu_419_p2);

assign and_ln495_2_fu_321_p2 = (xor_ln495_fu_310_p2 & icmp_ln497_fu_315_p2);

assign and_ln495_fu_408_p2 = (xor_ln495_reg_816 & trunc_ln497_1_fu_404_p1);

assign and_ln496_1_fu_453_p2 = (or_ln496_1_fu_442_p2 & and_ln495_1_fu_425_p2);

assign and_ln496_fu_447_p2 = (or_ln496_1_fu_442_p2 & and_ln495_fu_408_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign brmerge16_fu_575_p2 = (select_ln497_3_fu_563_p3 | cmp29_not_fu_570_p2);

assign cmp29_not_fu_570_p2 = ((select_ln497_reg_894 != 2'd1) ? 1'b1 : 1'b0);

assign cmp30_not41_fu_413_p2 = ((ky_reg_206 != 2'd1) ? 1'b1 : 1'b0);

assign cmp30_not_mid1_fu_558_p2 = ((select_ln496_reg_878 != 2'd0) ? 1'b1 : 1'b0);

assign empty_80_fu_507_p2 = (trunc_ln498_fu_503_p1 | select_ln497_1_fu_487_p3);

assign empty_fu_362_p2 = (zext_ln497_fu_358_p1 + shl_ln_fu_350_p3);

assign grp_fu_271_p0 = grp_fu_271_p00;

assign grp_fu_271_p00 = trunc_ln495_fu_251_p1;

assign grp_fu_271_p1 = grp_fu_271_p10;

assign grp_fu_271_p10 = tmp_fu_255_p3;

assign grp_fu_732_p1 = 10'd26;

assign grp_fu_738_p0 = grp_fu_738_p00;

assign grp_fu_738_p00 = select_ln497_2_fu_547_p3;

assign grp_fu_738_p1 = 12'd53;

assign grp_fu_738_p2 = (zext_ln498_fu_659_p1 + select_ln496_2_fu_652_p3);

assign icmp_ln495_1_fu_286_p2 = ((indvar_flatten71_reg_162 == mul_ln495_reg_782) ? 1'b1 : 1'b0);

assign icmp_ln495_fu_239_p2 = (($signed(TR_MIN) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln496_fu_291_p2 = ((indvar_flatten27_reg_173 == zext_ln495_reg_777) ? 1'b1 : 1'b0);

assign icmp_ln497_fu_315_p2 = ((indvar_flatten_reg_184 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_419_p2 = ((kx_reg_217 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln506_1_fu_710_p2 = (($signed(tmp_1_reg_976) > $signed(select_ln503_1_fu_703_p3)) ? 1'b1 : 1'b0);

assign icmp_ln506_fu_683_p2 = (($signed(tmp_0_reg_970) > $signed(select_ln503_fu_676_p3)) ? 1'b1 : 1'b0);

assign or_ln495_fu_524_p2 = (icmp_ln496_reg_796_pp0_iter2_reg | cmp30_not41_reg_873);

assign or_ln496_1_fu_442_p2 = (xor_ln496_fu_437_p2 | icmp_ln496_reg_796_pp0_iter1_reg);

assign or_ln496_2_fu_534_p2 = (or_ln495_fu_524_p2 | and_ln495_2_reg_827_pp0_iter2_reg);

assign or_ln496_fu_327_p2 = (icmp_ln496_reg_796 | and_ln495_2_fu_321_p2);

assign or_ln497_1_fu_470_p2 = (or_ln497_fu_465_p2 | icmp_ln496_reg_796_pp0_iter1_reg);

assign or_ln497_fu_465_p2 = (and_ln496_1_fu_453_p2 | and_ln495_2_reg_827);

assign p_mid1_fu_542_p2 = (zext_ln497_1_fu_539_p1 + select_ln495_2_reg_867);

assign select_ln495_1_fu_374_p3 = ((icmp_ln496_reg_796_pp0_iter1_reg[0:0] == 1'b1) ? add_ln495_fu_368_p2 : ap_phi_mux_y_phi_fu_199_p4);

assign select_ln495_2_fu_397_p3 = ((icmp_ln496_reg_796_pp0_iter1_reg[0:0] == 1'b1) ? shl_ln496_mid1_fu_389_p3 : shl_ln_fu_350_p3);

assign select_ln495_3_fu_596_p3 = ((icmp_ln496_reg_796_pp0_iter3_reg[0:0] == 1'b1) ? 10'd0 : trunc_ln483_fu_581_p1);

assign select_ln495_4_fu_634_p3 = ((icmp_ln496_reg_796_pp0_iter4_reg[0:0] == 1'b1) ? 12'd0 : shl_ln1_fu_627_p3);

assign select_ln495_5_fu_519_p3 = ((icmp_ln496_reg_796_pp0_iter2_reg[0:0] == 1'b1) ? shl_ln496_mid1_reg_862 : empty_reg_847);

assign select_ln495_fu_589_p3 = ((icmp_ln496_reg_796_pp0_iter3_reg[0:0] == 1'b1) ? 32'd0 : x_reg_228);

assign select_ln496_1_fu_613_p3 = ((and_ln495_2_reg_827_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln496_2_fu_609_p1 : select_ln495_3_fu_596_p3);

assign select_ln496_2_fu_652_p3 = ((and_ln495_2_reg_827_pp0_iter4_reg[0:0] == 1'b1) ? shl_ln497_mid1_fu_644_p3 : select_ln495_4_fu_634_p3);

assign select_ln496_3_fu_528_p3 = ((and_ln495_2_reg_827_pp0_iter2_reg[0:0] == 1'b1) ? select_ln495_2_reg_867 : select_ln495_5_fu_519_p3);

assign select_ln496_4_fu_620_p3 = ((and_ln495_2_reg_827_pp0_iter3_reg[0:0] == 1'b1) ? add_ln496_fu_603_p2 : select_ln495_fu_589_p3);

assign select_ln496_5_fu_302_p3 = ((icmp_ln496_fu_291_p2[0:0] == 1'b1) ? 35'd1 : add_ln496_1_fu_296_p2);

assign select_ln496_fu_430_p3 = ((or_ln496_reg_837[0:0] == 1'b1) ? 2'd0 : ky_reg_206);

assign select_ln497_1_fu_487_p3 = ((and_ln496_1_fu_453_p2[0:0] == 1'b1) ? trunc_ln497_3_fu_483_p1 : and_ln496_fu_447_p2);

assign select_ln497_2_fu_547_p3 = ((and_ln496_1_reg_883[0:0] == 1'b1) ? p_mid1_fu_542_p2 : select_ln496_3_fu_528_p3);

assign select_ln497_3_fu_563_p3 = ((and_ln496_1_reg_883[0:0] == 1'b1) ? cmp30_not_mid1_fu_558_p2 : or_ln496_2_fu_534_p2);

assign select_ln497_4_fu_495_p3 = ((and_ln496_1_fu_453_p2[0:0] == 1'b1) ? add_ln497_fu_459_p2 : select_ln496_fu_430_p3);

assign select_ln497_5_fu_338_p3 = ((or_ln496_fu_327_p2[0:0] == 1'b1) ? 4'd1 : add_ln497_1_fu_332_p2);

assign select_ln497_fu_475_p3 = ((or_ln497_1_fu_470_p2[0:0] == 1'b1) ? 2'd0 : kx_reg_217);

assign select_ln503_1_fu_703_p3 = ((empty_80_reg_905_pp0_iter8_reg[0:0] == 1'b1) ? tmp_1_2_fu_88 : 16'd32769);

assign select_ln503_fu_676_p3 = ((empty_80_reg_905_pp0_iter8_reg[0:0] == 1'b1) ? tmp_0_2_fu_84 : 16'd32769);

assign shl_ln1_fu_627_p3 = {{trunc_ln497_reg_925}, {1'd0}};

assign shl_ln496_mid1_fu_389_p3 = {{trunc_ln496_1_fu_385_p1}, {1'd0}};

assign shl_ln497_mid1_fu_644_p3 = {{trunc_ln497_2_fu_641_p1}, {1'd0}};

assign shl_ln_fu_350_p3 = {{trunc_ln496_fu_346_p1}, {1'd0}};

assign tmp_0_3_fu_688_p3 = ((icmp_ln506_fu_683_p2[0:0] == 1'b1) ? tmp_0_reg_970 : select_ln503_fu_676_p3);

assign tmp_1_3_fu_715_p3 = ((icmp_ln506_1_fu_710_p2[0:0] == 1'b1) ? tmp_1_reg_976 : select_ln503_1_fu_703_p3);

assign tmp_fu_255_p3 = {{TC_MIN}, {2'd0}};

assign trunc_ln483_fu_581_p1 = x_reg_228[9:0];

assign trunc_ln495_fu_251_p1 = TR_MIN[30:0];

assign trunc_ln496_1_fu_385_p1 = add_ln495_fu_368_p2[4:0];

assign trunc_ln496_2_fu_609_p1 = add_ln496_fu_603_p2[9:0];

assign trunc_ln496_fu_346_p1 = ap_phi_mux_y_phi_fu_199_p4[4:0];

assign trunc_ln497_1_fu_404_p1 = ky_reg_206[0:0];

assign trunc_ln497_2_fu_641_p1 = add_ln496_reg_930[10:0];

assign trunc_ln497_3_fu_483_p1 = add_ln497_fu_459_p2[0:0];

assign trunc_ln497_fu_585_p1 = x_reg_228[10:0];

assign trunc_ln498_fu_503_p1 = select_ln497_fu_475_p3[0:0];

assign trunc_ln510_fu_381_p1 = select_ln495_1_fu_374_p3[9:0];

assign xor_ln495_fu_310_p2 = (icmp_ln496_reg_796 ^ 1'd1);

assign xor_ln496_fu_437_p2 = (icmp_ln497_reg_822 ^ 1'd1);

assign zext_ln495_fu_277_p1 = tmp_reg_762;

assign zext_ln497_1_fu_539_p1 = add_ln497_reg_889;

assign zext_ln497_fu_358_p1 = ky_reg_206;

assign zext_ln498_fu_659_p1 = select_ln497_reg_894_pp0_iter4_reg;

assign zext_ln506_1_fu_668_p1 = add_ln506_reg_955;

assign zext_ln510_fu_727_p1 = $unsigned(add_ln510_reg_950_pp0_iter9_reg);

always @ (posedge ap_clk) begin
    tmp_reg_762[1:0] <= 2'b00;
    zext_ln495_reg_777[1:0] <= 2'b00;
    zext_ln495_reg_777[34] <= 1'b0;
    shl_ln496_mid1_reg_862[0] <= 1'b0;
    select_ln495_2_reg_867[0] <= 1'b0;
end

endmodule //YOLO2_FPGA_pool_yolo24
