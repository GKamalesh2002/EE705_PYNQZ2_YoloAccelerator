// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module YOLO2_FPGA_write_back_output_reorg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_DATA_BUS_AWVALID,
        m_axi_DATA_BUS_AWREADY,
        m_axi_DATA_BUS_AWADDR,
        m_axi_DATA_BUS_AWID,
        m_axi_DATA_BUS_AWLEN,
        m_axi_DATA_BUS_AWSIZE,
        m_axi_DATA_BUS_AWBURST,
        m_axi_DATA_BUS_AWLOCK,
        m_axi_DATA_BUS_AWCACHE,
        m_axi_DATA_BUS_AWPROT,
        m_axi_DATA_BUS_AWQOS,
        m_axi_DATA_BUS_AWREGION,
        m_axi_DATA_BUS_AWUSER,
        m_axi_DATA_BUS_WVALID,
        m_axi_DATA_BUS_WREADY,
        m_axi_DATA_BUS_WDATA,
        m_axi_DATA_BUS_WSTRB,
        m_axi_DATA_BUS_WLAST,
        m_axi_DATA_BUS_WID,
        m_axi_DATA_BUS_WUSER,
        m_axi_DATA_BUS_ARVALID,
        m_axi_DATA_BUS_ARREADY,
        m_axi_DATA_BUS_ARADDR,
        m_axi_DATA_BUS_ARID,
        m_axi_DATA_BUS_ARLEN,
        m_axi_DATA_BUS_ARSIZE,
        m_axi_DATA_BUS_ARBURST,
        m_axi_DATA_BUS_ARLOCK,
        m_axi_DATA_BUS_ARCACHE,
        m_axi_DATA_BUS_ARPROT,
        m_axi_DATA_BUS_ARQOS,
        m_axi_DATA_BUS_ARREGION,
        m_axi_DATA_BUS_ARUSER,
        m_axi_DATA_BUS_RVALID,
        m_axi_DATA_BUS_RREADY,
        m_axi_DATA_BUS_RDATA,
        m_axi_DATA_BUS_RLAST,
        m_axi_DATA_BUS_RID,
        m_axi_DATA_BUS_RUSER,
        m_axi_DATA_BUS_RRESP,
        m_axi_DATA_BUS_BVALID,
        m_axi_DATA_BUS_BREADY,
        m_axi_DATA_BUS_BRESP,
        m_axi_DATA_BUS_BID,
        m_axi_DATA_BUS_BUSER,
        output_buffer_address0,
        output_buffer_ce0,
        output_buffer_q0,
        output_buffer1_address0,
        output_buffer1_ce0,
        output_buffer1_q0,
        output_buffer2_address0,
        output_buffer2_ce0,
        output_buffer2_q0,
        output_buffer3_address0,
        output_buffer3_ce0,
        output_buffer3_q0,
        output_buffer4_address0,
        output_buffer4_ce0,
        output_buffer4_q0,
        output_buffer5_address0,
        output_buffer5_ce0,
        output_buffer5_q0,
        output_buffer6_address0,
        output_buffer6_ce0,
        output_buffer6_q0,
        output_buffer7_address0,
        output_buffer7_ce0,
        output_buffer7_q0,
        output_buffer8_address0,
        output_buffer8_ce0,
        output_buffer8_q0,
        output_buffer9_address0,
        output_buffer9_ce0,
        output_buffer9_q0,
        output_buffer10_address0,
        output_buffer10_ce0,
        output_buffer10_q0,
        output_buffer11_address0,
        output_buffer11_ce0,
        output_buffer11_q0,
        output_buffer12_address0,
        output_buffer12_ce0,
        output_buffer12_q0,
        output_buffer13_address0,
        output_buffer13_ce0,
        output_buffer13_q0,
        output_buffer14_address0,
        output_buffer14_ce0,
        output_buffer14_q0,
        output_buffer15_address0,
        output_buffer15_ce0,
        output_buffer15_q0,
        output_buffer16_address0,
        output_buffer16_ce0,
        output_buffer16_q0,
        output_buffer17_address0,
        output_buffer17_ce0,
        output_buffer17_q0,
        output_buffer18_address0,
        output_buffer18_ce0,
        output_buffer18_q0,
        output_buffer19_address0,
        output_buffer19_ce0,
        output_buffer19_q0,
        output_buffer20_address0,
        output_buffer20_ce0,
        output_buffer20_q0,
        output_buffer21_address0,
        output_buffer21_ce0,
        output_buffer21_q0,
        output_buffer22_address0,
        output_buffer22_ce0,
        output_buffer22_q0,
        output_buffer23_address0,
        output_buffer23_ce0,
        output_buffer23_q0,
        output_buffer24_address0,
        output_buffer24_ce0,
        output_buffer24_q0,
        output_buffer25_address0,
        output_buffer25_ce0,
        output_buffer25_q0,
        output_buffer26_address0,
        output_buffer26_ce0,
        output_buffer26_q0,
        output_buffer27_address0,
        output_buffer27_ce0,
        output_buffer27_q0,
        output_buffer28_address0,
        output_buffer28_ce0,
        output_buffer28_q0,
        output_buffer29_address0,
        output_buffer29_ce0,
        output_buffer29_q0,
        output_buffer30_address0,
        output_buffer30_ce0,
        output_buffer30_q0,
        output_buffer31_address0,
        output_buffer31_ce0,
        output_buffer31_q0,
        Output_r,
        r,
        c,
        m,
        Output_w,
        TM_MIN,
        TR_MIN,
        TC_MIN,
        OHxOW,
        write_flag
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_pp0_stage0 = 23'd32;
parameter    ap_ST_fsm_pp0_stage1 = 23'd64;
parameter    ap_ST_fsm_state15 = 23'd128;
parameter    ap_ST_fsm_state16 = 23'd256;
parameter    ap_ST_fsm_state17 = 23'd512;
parameter    ap_ST_fsm_state18 = 23'd1024;
parameter    ap_ST_fsm_state19 = 23'd2048;
parameter    ap_ST_fsm_state20 = 23'd4096;
parameter    ap_ST_fsm_state21 = 23'd8192;
parameter    ap_ST_fsm_state22 = 23'd16384;
parameter    ap_ST_fsm_state23 = 23'd32768;
parameter    ap_ST_fsm_state24 = 23'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 23'd131072;
parameter    ap_ST_fsm_state29 = 23'd262144;
parameter    ap_ST_fsm_state30 = 23'd524288;
parameter    ap_ST_fsm_state31 = 23'd1048576;
parameter    ap_ST_fsm_state32 = 23'd2097152;
parameter    ap_ST_fsm_state33 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_DATA_BUS_AWVALID;
input   m_axi_DATA_BUS_AWREADY;
output  [63:0] m_axi_DATA_BUS_AWADDR;
output  [0:0] m_axi_DATA_BUS_AWID;
output  [31:0] m_axi_DATA_BUS_AWLEN;
output  [2:0] m_axi_DATA_BUS_AWSIZE;
output  [1:0] m_axi_DATA_BUS_AWBURST;
output  [1:0] m_axi_DATA_BUS_AWLOCK;
output  [3:0] m_axi_DATA_BUS_AWCACHE;
output  [2:0] m_axi_DATA_BUS_AWPROT;
output  [3:0] m_axi_DATA_BUS_AWQOS;
output  [3:0] m_axi_DATA_BUS_AWREGION;
output  [0:0] m_axi_DATA_BUS_AWUSER;
output   m_axi_DATA_BUS_WVALID;
input   m_axi_DATA_BUS_WREADY;
output  [31:0] m_axi_DATA_BUS_WDATA;
output  [3:0] m_axi_DATA_BUS_WSTRB;
output   m_axi_DATA_BUS_WLAST;
output  [0:0] m_axi_DATA_BUS_WID;
output  [0:0] m_axi_DATA_BUS_WUSER;
output   m_axi_DATA_BUS_ARVALID;
input   m_axi_DATA_BUS_ARREADY;
output  [63:0] m_axi_DATA_BUS_ARADDR;
output  [0:0] m_axi_DATA_BUS_ARID;
output  [31:0] m_axi_DATA_BUS_ARLEN;
output  [2:0] m_axi_DATA_BUS_ARSIZE;
output  [1:0] m_axi_DATA_BUS_ARBURST;
output  [1:0] m_axi_DATA_BUS_ARLOCK;
output  [3:0] m_axi_DATA_BUS_ARCACHE;
output  [2:0] m_axi_DATA_BUS_ARPROT;
output  [3:0] m_axi_DATA_BUS_ARQOS;
output  [3:0] m_axi_DATA_BUS_ARREGION;
output  [0:0] m_axi_DATA_BUS_ARUSER;
input   m_axi_DATA_BUS_RVALID;
output   m_axi_DATA_BUS_RREADY;
input  [31:0] m_axi_DATA_BUS_RDATA;
input   m_axi_DATA_BUS_RLAST;
input  [0:0] m_axi_DATA_BUS_RID;
input  [0:0] m_axi_DATA_BUS_RUSER;
input  [1:0] m_axi_DATA_BUS_RRESP;
input   m_axi_DATA_BUS_BVALID;
output   m_axi_DATA_BUS_BREADY;
input  [1:0] m_axi_DATA_BUS_BRESP;
input  [0:0] m_axi_DATA_BUS_BID;
input  [0:0] m_axi_DATA_BUS_BUSER;
output  [9:0] output_buffer_address0;
output   output_buffer_ce0;
input  [15:0] output_buffer_q0;
output  [9:0] output_buffer1_address0;
output   output_buffer1_ce0;
input  [15:0] output_buffer1_q0;
output  [9:0] output_buffer2_address0;
output   output_buffer2_ce0;
input  [15:0] output_buffer2_q0;
output  [9:0] output_buffer3_address0;
output   output_buffer3_ce0;
input  [15:0] output_buffer3_q0;
output  [9:0] output_buffer4_address0;
output   output_buffer4_ce0;
input  [15:0] output_buffer4_q0;
output  [9:0] output_buffer5_address0;
output   output_buffer5_ce0;
input  [15:0] output_buffer5_q0;
output  [9:0] output_buffer6_address0;
output   output_buffer6_ce0;
input  [15:0] output_buffer6_q0;
output  [9:0] output_buffer7_address0;
output   output_buffer7_ce0;
input  [15:0] output_buffer7_q0;
output  [9:0] output_buffer8_address0;
output   output_buffer8_ce0;
input  [15:0] output_buffer8_q0;
output  [9:0] output_buffer9_address0;
output   output_buffer9_ce0;
input  [15:0] output_buffer9_q0;
output  [9:0] output_buffer10_address0;
output   output_buffer10_ce0;
input  [15:0] output_buffer10_q0;
output  [9:0] output_buffer11_address0;
output   output_buffer11_ce0;
input  [15:0] output_buffer11_q0;
output  [9:0] output_buffer12_address0;
output   output_buffer12_ce0;
input  [15:0] output_buffer12_q0;
output  [9:0] output_buffer13_address0;
output   output_buffer13_ce0;
input  [15:0] output_buffer13_q0;
output  [9:0] output_buffer14_address0;
output   output_buffer14_ce0;
input  [15:0] output_buffer14_q0;
output  [9:0] output_buffer15_address0;
output   output_buffer15_ce0;
input  [15:0] output_buffer15_q0;
output  [9:0] output_buffer16_address0;
output   output_buffer16_ce0;
input  [15:0] output_buffer16_q0;
output  [9:0] output_buffer17_address0;
output   output_buffer17_ce0;
input  [15:0] output_buffer17_q0;
output  [9:0] output_buffer18_address0;
output   output_buffer18_ce0;
input  [15:0] output_buffer18_q0;
output  [9:0] output_buffer19_address0;
output   output_buffer19_ce0;
input  [15:0] output_buffer19_q0;
output  [9:0] output_buffer20_address0;
output   output_buffer20_ce0;
input  [15:0] output_buffer20_q0;
output  [9:0] output_buffer21_address0;
output   output_buffer21_ce0;
input  [15:0] output_buffer21_q0;
output  [9:0] output_buffer22_address0;
output   output_buffer22_ce0;
input  [15:0] output_buffer22_q0;
output  [9:0] output_buffer23_address0;
output   output_buffer23_ce0;
input  [15:0] output_buffer23_q0;
output  [9:0] output_buffer24_address0;
output   output_buffer24_ce0;
input  [15:0] output_buffer24_q0;
output  [9:0] output_buffer25_address0;
output   output_buffer25_ce0;
input  [15:0] output_buffer25_q0;
output  [9:0] output_buffer26_address0;
output   output_buffer26_ce0;
input  [15:0] output_buffer26_q0;
output  [9:0] output_buffer27_address0;
output   output_buffer27_ce0;
input  [15:0] output_buffer27_q0;
output  [9:0] output_buffer28_address0;
output   output_buffer28_ce0;
input  [15:0] output_buffer28_q0;
output  [9:0] output_buffer29_address0;
output   output_buffer29_ce0;
input  [15:0] output_buffer29_q0;
output  [9:0] output_buffer30_address0;
output   output_buffer30_ce0;
input  [15:0] output_buffer30_q0;
output  [9:0] output_buffer31_address0;
output   output_buffer31_ce0;
input  [15:0] output_buffer31_q0;
input  [63:0] Output_r;
input  [31:0] r;
input  [31:0] c;
input  [31:0] m;
input  [8:0] Output_w;
input  [5:0] TM_MIN;
input  [5:0] TR_MIN;
input  [5:0] TC_MIN;
input  [17:0] OHxOW;
input  [0:0] write_flag;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_DATA_BUS_AWVALID;
reg m_axi_DATA_BUS_WVALID;
reg m_axi_DATA_BUS_BREADY;
reg output_buffer_ce0;
reg output_buffer1_ce0;
reg output_buffer2_ce0;
reg output_buffer3_ce0;
reg output_buffer4_ce0;
reg output_buffer5_ce0;
reg output_buffer6_ce0;
reg output_buffer7_ce0;
reg output_buffer8_ce0;
reg output_buffer9_ce0;
reg output_buffer10_ce0;
reg output_buffer11_ce0;
reg output_buffer12_ce0;
reg output_buffer13_ce0;
reg output_buffer14_ce0;
reg output_buffer15_ce0;
reg output_buffer16_ce0;
reg output_buffer17_ce0;
reg output_buffer18_ce0;
reg output_buffer19_ce0;
reg output_buffer20_ce0;
reg output_buffer21_ce0;
reg output_buffer22_ce0;
reg output_buffer23_ce0;
reg output_buffer24_ce0;
reg output_buffer25_ce0;
reg output_buffer26_ce0;
reg output_buffer27_ce0;
reg output_buffer28_ce0;
reg output_buffer29_ce0;
reg output_buffer30_ce0;
reg output_buffer31_ce0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] output_tmp_address0;
reg    output_tmp_ce0;
reg    output_tmp_we0;
wire   [31:0] output_tmp_d0;
wire   [31:0] output_tmp_q0;
reg    DATA_BUS_blk_n_AW;
wire    ap_CS_fsm_state24;
reg    DATA_BUS_blk_n_W;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_2396;
reg   [0:0] exitcond1_reg_2396_pp1_iter2_reg;
reg    DATA_BUS_blk_n_B;
wire    ap_CS_fsm_state33;
reg   [0:0] empty_reg_2300;
reg   [17:0] indvar_flatten21_reg_774;
reg   [5:0] tm_V_reg_785;
reg   [11:0] indvar_flatten_reg_797;
reg   [5:0] tr_V_reg_809;
reg   [5:0] tc_V_reg_820;
reg   [12:0] loop_index_reg_900;
wire   [0:0] write_flag_read_read_fu_262_p2;
wire   [0:0] icmp_ln870_fu_936_p2;
reg   [0:0] icmp_ln870_reg_1753;
wire   [11:0] mul_ln301_fu_950_p2;
reg   [11:0] mul_ln301_reg_1759;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_920_p2;
reg   [31:0] mul_ln410_reg_1775;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_930_p2;
reg   [31:0] mul_ln410_1_reg_1780;
wire   [17:0] grp_fu_1655_p2;
reg   [17:0] mul_ln301_1_reg_1785;
wire   [0:0] icmp_ln424_fu_974_p2;
reg   [0:0] icmp_ln424_reg_1790;
wire   [17:0] add_ln422_fu_979_p2;
reg   [17:0] add_ln422_reg_1795;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln422_fu_985_p2;
reg   [0:0] icmp_ln422_reg_1800;
reg   [0:0] icmp_ln422_reg_1800_pp0_iter1_reg;
reg   [0:0] icmp_ln422_reg_1800_pp0_iter2_reg;
reg   [0:0] icmp_ln422_reg_1800_pp0_iter3_reg;
wire   [0:0] icmp_ln423_fu_990_p2;
reg   [0:0] icmp_ln423_reg_1804;
reg   [0:0] icmp_ln423_reg_1804_pp0_iter1_reg;
reg   [0:0] icmp_ln423_reg_1804_pp0_iter2_reg;
reg   [0:0] icmp_ln423_reg_1804_pp0_iter3_reg;
wire   [5:0] select_ln399_fu_995_p3;
reg   [5:0] select_ln399_reg_1812;
wire   [0:0] icmp_ln424_1_fu_1003_p2;
reg   [0:0] icmp_ln424_1_reg_1818;
wire   [5:0] select_ln399_3_fu_1023_p3;
reg   [5:0] select_ln399_3_reg_1823;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_state13_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [5:0] select_ln399_4_fu_1031_p3;
reg   [5:0] select_ln399_4_reg_1828;
wire   [5:0] tc_V_1_fu_1042_p2;
reg   [5:0] tc_V_1_reg_1838;
wire   [11:0] select_ln423_fu_1054_p3;
reg   [11:0] select_ln423_reg_1843;
wire   [9:0] grp_fu_1661_p3;
reg   [9:0] add_ln427_reg_1853;
reg    ap_enable_reg_pp0_iter2;
wire   [5:0] tm_V_2_fu_1099_p2;
reg   [5:0] tm_V_2_reg_2018;
reg   [15:0] output_buffer_load_reg_2023;
reg   [15:0] output_buffer1_load_reg_2028;
reg   [15:0] output_buffer2_load_reg_2033;
reg   [15:0] output_buffer3_load_reg_2038;
reg   [15:0] output_buffer4_load_reg_2043;
reg   [15:0] output_buffer5_load_reg_2048;
reg   [15:0] output_buffer6_load_reg_2053;
reg   [15:0] output_buffer7_load_reg_2058;
reg   [15:0] output_buffer8_load_reg_2063;
reg   [15:0] output_buffer9_load_reg_2068;
reg   [15:0] output_buffer10_load_reg_2073;
reg   [15:0] output_buffer11_load_reg_2078;
reg   [15:0] output_buffer12_load_reg_2083;
reg   [15:0] output_buffer13_load_reg_2088;
reg   [15:0] output_buffer14_load_reg_2093;
reg   [15:0] output_buffer15_load_reg_2098;
reg   [15:0] output_buffer16_load_reg_2103;
reg   [15:0] output_buffer17_load_reg_2108;
reg   [15:0] output_buffer18_load_reg_2113;
reg   [15:0] output_buffer19_load_reg_2118;
reg   [15:0] output_buffer20_load_reg_2123;
reg   [15:0] output_buffer21_load_reg_2128;
reg   [15:0] output_buffer22_load_reg_2133;
reg   [15:0] output_buffer23_load_reg_2138;
reg   [15:0] output_buffer24_load_reg_2143;
reg   [15:0] output_buffer25_load_reg_2148;
reg   [15:0] output_buffer26_load_reg_2153;
reg   [15:0] output_buffer27_load_reg_2158;
reg   [15:0] output_buffer28_load_reg_2163;
reg   [15:0] output_buffer29_load_reg_2168;
reg   [15:0] output_buffer30_load_reg_2173;
reg   [15:0] output_buffer31_load_reg_2178;
wire   [5:0] select_ln399_1_fu_1108_p3;
reg   [5:0] select_ln399_1_reg_2183;
reg    ap_enable_reg_pp0_iter3;
wire   [15:0] ouput_array_0_fu_1118_p34;
reg   [15:0] ouput_array_0_reg_2188;
wire   [0:0] trunc_ln427_fu_1156_p1;
reg   [0:0] trunc_ln427_reg_2194;
wire   [7:0] cnt_1_fu_1160_p2;
reg   [7:0] cnt_1_reg_2200;
wire   [0:0] icmp_ln429_fu_1166_p2;
reg   [0:0] icmp_ln429_reg_2205;
wire   [0:0] icmp_ln870_1_fu_1232_p2;
reg   [0:0] icmp_ln870_1_reg_2209;
wire    ap_CS_fsm_state15;
wire   [0:0] and_ln870_fu_1243_p2;
reg   [0:0] and_ln870_reg_2216;
wire   [0:0] or_ln870_fu_1248_p2;
reg   [0:0] or_ln870_reg_2227;
wire   [12:0] OutputLength_fu_1267_p2;
reg   [12:0] OutputLength_reg_2235;
wire    ap_CS_fsm_state16;
wire   [5:0] Loop1_V_fu_1279_p3;
reg   [5:0] Loop1_V_reg_2240;
wire   [3:0] Loop2_V_fu_1293_p3;
reg   [3:0] Loop2_V_reg_2246;
wire   [17:0] OutputOffset1_V_fu_1306_p3;
reg   [17:0] OutputOffset1_V_reg_2251;
wire   [8:0] OutputOffset2_V_fu_1319_p3;
reg   [8:0] OutputOffset2_V_reg_2256;
wire  signed [4:0] sext_ln870_fu_1326_p1;
reg  signed [4:0] sext_ln870_reg_2261;
wire    ap_CS_fsm_state17;
wire   [12:0] OutputLength_1_fu_1364_p3;
reg   [12:0] OutputLength_1_reg_2266;
wire   [31:0] zext_ln443_fu_1370_p1;
reg   [31:0] zext_ln443_reg_2271;
wire   [0:0] icmp_ln878_fu_1374_p2;
reg   [0:0] icmp_ln878_reg_2276;
wire   [13:0] OutputOffset2_V_cast_fu_1379_p1;
reg   [13:0] OutputOffset2_V_cast_reg_2280;
wire   [9:0] OtuputTmpOffset2_V_cast_cast_cast_cast_fu_1386_p1;
reg   [9:0] OtuputTmpOffset2_V_cast_cast_cast_cast_reg_2285;
wire   [23:0] OutputOffset1_V_cast_fu_1390_p1;
reg   [23:0] OutputOffset1_V_cast_reg_2290;
wire   [15:0] OtuputTmpOffset1_V_cast_fu_1393_p1;
reg   [15:0] OtuputTmpOffset1_V_cast_reg_2295;
wire   [0:0] empty_fu_1397_p2;
wire   [10:0] bound26_fu_1410_p2;
reg   [10:0] bound26_reg_2304;
wire   [10:0] add_ln472_1_fu_1416_p2;
reg   [10:0] add_ln472_1_reg_2309;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln473_fu_1437_p2;
reg   [0:0] icmp_ln473_reg_2317;
wire   [0:0] icmp_ln472_fu_1422_p2;
wire   [13:0] select_ln472_1_fu_1442_p3;
reg   [13:0] select_ln472_1_reg_2323;
wire   [23:0] select_ln472_2_fu_1450_p3;
reg   [23:0] select_ln472_2_reg_2329;
wire   [15:0] select_ln472_3_fu_1458_p3;
reg   [15:0] select_ln472_3_reg_2335;
wire   [14:0] trunc_ln472_fu_1466_p1;
reg   [14:0] trunc_ln472_reg_2340;
wire   [9:0] select_ln472_fu_1470_p3;
reg   [9:0] select_ln472_reg_2345;
wire    ap_CS_fsm_state19;
wire   [31:0] add_ln475_2_fu_1485_p2;
reg   [31:0] add_ln475_2_reg_2350;
reg   [13:0] trunc_ln475_2_reg_2355;
wire   [31:0] add_ln475_1_fu_1517_p2;
reg   [31:0] add_ln475_1_reg_2360;
wire    ap_CS_fsm_state20;
reg   [0:0] tmp_1_reg_2365;
reg   [30:0] lshr_ln475_2_reg_2370;
reg   [30:0] lshr_ln475_1_reg_2375;
wire    ap_CS_fsm_state21;
wire   [31:0] select_ln475_fu_1567_p3;
reg   [31:0] select_ln475_reg_2380;
wire    ap_CS_fsm_state22;
reg   [63:0] DATA_BUS_addr_reg_2385;
wire    ap_CS_fsm_state23;
wire   [12:0] empty_76_fu_1610_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state25_pp1_stage0_iter0;
wire    ap_block_state26_pp1_stage0_iter1;
wire    ap_block_state27_pp1_stage0_iter2;
wire    ap_block_state28_pp1_stage0_iter3;
reg    ap_block_state28_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond1_fu_1616_p2;
reg   [0:0] exitcond1_reg_2396_pp1_iter1_reg;
wire   [13:0] add_ptr561_sum_fu_1625_p2;
reg   [13:0] add_ptr561_sum_reg_2400;
reg   [31:0] output_tmp_load_reg_2410;
reg    ap_enable_reg_pp1_iter2;
wire   [4:0] tr_V_3_fu_1640_p3;
wire   [13:0] OutputOffset2_sum_1_fu_1647_p2;
wire   [9:0] OtuputTmpOffset2_sum_1_fu_1651_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state25;
reg    ap_enable_reg_pp1_iter1;
reg   [17:0] ap_phi_mux_indvar_flatten21_phi_fu_778_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_tm_V_phi_fu_789_p4;
reg   [11:0] ap_phi_mux_indvar_flatten_phi_fu_801_p4;
reg   [5:0] ap_phi_mux_tr_V_phi_fu_813_p4;
reg   [5:0] ap_phi_mux_tc_V_phi_fu_824_p4;
reg   [10:0] indvar_flatten28_reg_832;
reg    ap_block_state33;
reg   [15:0] OtuputTmpOffset1_sum_reg_843;
reg   [23:0] OutputOffset1_sum_reg_854;
reg   [9:0] OtuputTmpOffset2_sum_reg_865;
reg   [13:0] OutputOffset2_sum_reg_877;
reg   [4:0] tr_V_5_reg_888;
wire   [63:0] zext_ln427_1_fu_1064_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln431_fu_1216_p1;
wire   [63:0] add_ptr561_sum_cast_fu_1630_p1;
wire  signed [63:0] p_cast_cast_fu_1600_p1;
wire    ap_block_pp1_stage0_01001;
reg   [15:0] ouput_array_1_fu_246;
wire   [15:0] ouput_array_1_6_fu_1184_p3;
reg   [15:0] ouput_array_1_3_fu_250;
wire   [15:0] ouput_array_1_5_fu_1178_p3;
reg   [7:0] cnt_fu_254;
reg   [31:0] outputoffset_fu_258;
wire   [31:0] outputoffset_1_fu_1221_p2;
wire   [17:0] grp_fu_920_p0;
wire   [8:0] grp_fu_930_p0;
wire   [5:0] mul_ln301_fu_950_p0;
wire   [5:0] mul_ln301_fu_950_p1;
wire   [5:0] TM_MIN_g_V_fu_961_p3;
wire   [0:0] select_ln399_2_fu_1008_p3;
wire   [0:0] or_ln399_fu_1018_p2;
wire   [5:0] tr_V_4_fu_1013_p2;
wire   [11:0] add_ln423_fu_1048_p2;
wire   [4:0] ouput_array_0_fu_1118_p33;
wire   [0:0] xor_ln870_fu_1237_p2;
wire   [4:0] r_1_fu_1254_p4;
wire   [4:0] OutputLength_fu_1267_p0;
wire   [8:0] OutputLength_fu_1267_p1;
wire   [5:0] select_ln870_fu_1273_p3;
wire   [3:0] select_ln870_2_fu_1286_p3;
wire   [17:0] select_ln870_4_fu_1300_p3;
wire   [8:0] select_ln870_6_fu_1313_p3;
wire   [9:0] select_ln870_8_fu_1329_p3;
wire   [3:0] select_ln870_10_fu_1343_p3;
wire   [12:0] select_ln870_12_fu_1357_p3;
wire   [3:0] OtuputTmpOffset2_V_fu_1350_p3;
wire  signed [4:0] OtuputTmpOffset2_V_cast_cast_cast_fu_1382_p1;
wire   [9:0] OtuputTmpOffset1_V_fu_1336_p3;
wire   [5:0] bound26_fu_1410_p0;
wire   [4:0] bound26_fu_1410_p1;
wire   [23:0] OutputOffset1_sum_2_fu_1427_p2;
wire   [15:0] OtuputTmpOffset1_sum_2_fu_1432_p2;
wire   [31:0] zext_ln473_fu_1477_p1;
wire   [31:0] add_ln475_fu_1480_p2;
wire   [14:0] zext_ln475_1_fu_1490_p1;
wire   [14:0] add_ln475_3_fu_1494_p2;
wire   [31:0] zext_ln472_fu_1509_p1;
wire   [31:0] add_ln472_fu_1512_p2;
wire   [31:0] sub_ln475_fu_1540_p2;
wire   [31:0] zext_ln475_fu_1555_p1;
wire   [31:0] sub_ln475_1_fu_1558_p2;
wire   [31:0] zext_ln475_2_fu_1564_p1;
wire   [33:0] tmp_fu_1574_p3;
wire  signed [63:0] p_cast2_fu_1581_p1;
wire   [63:0] empty_74_fu_1585_p2;
wire   [61:0] p_cast_fu_1590_p4;
wire   [13:0] loop_index_cast_fu_1621_p1;
wire   [4:0] add_ln691_2_fu_1634_p2;
wire   [5:0] grp_fu_1655_p0;
wire   [11:0] grp_fu_1655_p1;
wire   [5:0] grp_fu_1661_p0;
wire   [5:0] grp_fu_1661_p1;
wire   [5:0] grp_fu_1661_p2;
reg   [22:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [12:0] OutputLength_fu_1267_p00;
wire   [10:0] bound26_fu_1410_p00;
wire   [10:0] bound26_fu_1410_p10;
wire   [17:0] grp_fu_1655_p00;
wire   [17:0] grp_fu_1655_p10;
wire   [9:0] grp_fu_1661_p00;
wire   [9:0] grp_fu_1661_p20;
wire   [31:0] grp_fu_920_p00;
wire   [31:0] grp_fu_930_p00;
wire   [11:0] mul_ln301_fu_950_p00;
wire   [11:0] mul_ln301_fu_950_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

YOLO2_FPGA_write_back_output_reorg_output_tmp #(
    .DataWidth( 32 ),
    .AddressRange( 10816 ),
    .AddressWidth( 14 ))
output_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_tmp_address0),
    .ce0(output_tmp_ce0),
    .we0(output_tmp_we0),
    .d0(output_tmp_d0),
    .q0(output_tmp_q0)
);

YOLO2_FPGA_mul_18ns_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_18ns_32s_32_5_1_U461(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_920_p0),
    .din1(m),
    .ce(1'b1),
    .dout(grp_fu_920_p2)
);

YOLO2_FPGA_mul_9ns_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_9ns_32s_32_5_1_U462(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_930_p0),
    .din1(r),
    .ce(1'b1),
    .dout(grp_fu_930_p2)
);

YOLO2_FPGA_mul_6ns_6ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mul_6ns_6ns_12_1_1_U463(
    .din0(mul_ln301_fu_950_p0),
    .din1(mul_ln301_fu_950_p1),
    .dout(mul_ln301_fu_950_p2)
);

YOLO2_FPGA_mux_325_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
mux_325_16_1_1_U464(
    .din0(output_buffer_load_reg_2023),
    .din1(output_buffer1_load_reg_2028),
    .din2(output_buffer2_load_reg_2033),
    .din3(output_buffer3_load_reg_2038),
    .din4(output_buffer4_load_reg_2043),
    .din5(output_buffer5_load_reg_2048),
    .din6(output_buffer6_load_reg_2053),
    .din7(output_buffer7_load_reg_2058),
    .din8(output_buffer8_load_reg_2063),
    .din9(output_buffer9_load_reg_2068),
    .din10(output_buffer10_load_reg_2073),
    .din11(output_buffer11_load_reg_2078),
    .din12(output_buffer12_load_reg_2083),
    .din13(output_buffer13_load_reg_2088),
    .din14(output_buffer14_load_reg_2093),
    .din15(output_buffer15_load_reg_2098),
    .din16(output_buffer16_load_reg_2103),
    .din17(output_buffer17_load_reg_2108),
    .din18(output_buffer18_load_reg_2113),
    .din19(output_buffer19_load_reg_2118),
    .din20(output_buffer20_load_reg_2123),
    .din21(output_buffer21_load_reg_2128),
    .din22(output_buffer22_load_reg_2133),
    .din23(output_buffer23_load_reg_2138),
    .din24(output_buffer24_load_reg_2143),
    .din25(output_buffer25_load_reg_2148),
    .din26(output_buffer26_load_reg_2153),
    .din27(output_buffer27_load_reg_2158),
    .din28(output_buffer28_load_reg_2163),
    .din29(output_buffer29_load_reg_2168),
    .din30(output_buffer30_load_reg_2173),
    .din31(output_buffer31_load_reg_2178),
    .din32(ouput_array_0_fu_1118_p33),
    .dout(ouput_array_0_fu_1118_p34)
);

YOLO2_FPGA_mul_5ns_9ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
mul_5ns_9ns_13_1_1_U465(
    .din0(OutputLength_fu_1267_p0),
    .din1(OutputLength_fu_1267_p1),
    .dout(OutputLength_fu_1267_p2)
);

YOLO2_FPGA_mul_6ns_5ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
mul_6ns_5ns_11_1_1_U466(
    .din0(bound26_fu_1410_p0),
    .din1(bound26_fu_1410_p1),
    .dout(bound26_fu_1410_p2)
);

YOLO2_FPGA_mul_mul_6ns_12ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 18 ))
mul_mul_6ns_12ns_18_4_1_U467(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1655_p0),
    .din1(grp_fu_1655_p1),
    .ce(1'b1),
    .dout(grp_fu_1655_p2)
);

YOLO2_FPGA_mac_muladd_6ns_6ns_6ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mac_muladd_6ns_6ns_6ns_10_4_1_U468(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1661_p0),
    .din1(grp_fu_1661_p1),
    .din2(grp_fu_1661_p2),
    .ce(1'b1),
    .dout(grp_fu_1661_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state25)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (1'b1 == ap_CS_fsm_state33))) begin
        OtuputTmpOffset1_sum_reg_843 <= select_ln472_3_reg_2335;
    end else if (((icmp_ln878_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        OtuputTmpOffset1_sum_reg_843 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (1'b1 == ap_CS_fsm_state33))) begin
        OtuputTmpOffset2_sum_reg_865 <= OtuputTmpOffset2_sum_1_fu_1651_p2;
    end else if (((icmp_ln878_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        OtuputTmpOffset2_sum_reg_865 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (1'b1 == ap_CS_fsm_state33))) begin
        OutputOffset1_sum_reg_854 <= select_ln472_2_reg_2329;
    end else if (((icmp_ln878_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        OutputOffset1_sum_reg_854 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (1'b1 == ap_CS_fsm_state33))) begin
        OutputOffset2_sum_reg_877 <= OutputOffset2_sum_1_fu_1647_p2;
    end else if (((icmp_ln878_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        OutputOffset2_sum_reg_877 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln429_reg_2205 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((write_flag_read_read_fu_262_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        cnt_fu_254 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln429_reg_2205 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cnt_fu_254 <= cnt_1_reg_2200;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten21_reg_774 <= add_ln422_reg_1795;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten21_reg_774 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (1'b1 == ap_CS_fsm_state33))) begin
        indvar_flatten28_reg_832 <= add_ln472_1_reg_2309;
    end else if (((icmp_ln878_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        indvar_flatten28_reg_832 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_797 <= select_ln423_reg_1843;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten_reg_797 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        loop_index_reg_900 <= 13'd0;
    end else if (((exitcond1_fu_1616_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_index_reg_900 <= empty_76_fu_1610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((write_flag_read_read_fu_262_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        outputoffset_fu_258 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln429_reg_2205 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outputoffset_fu_258 <= outputoffset_1_fu_1221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tc_V_reg_820 <= tc_V_1_reg_1838;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tc_V_reg_820 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln422_reg_1800_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tm_V_reg_785 <= select_ln399_1_reg_2183;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tm_V_reg_785 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (1'b1 == ap_CS_fsm_state33))) begin
        tr_V_5_reg_888 <= tr_V_3_fu_1640_p3;
    end else if (((icmp_ln878_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tr_V_5_reg_888 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tr_V_reg_809 <= select_ln399_4_reg_1828;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tr_V_reg_809 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        DATA_BUS_addr_reg_2385 <= p_cast_cast_fu_1600_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        Loop1_V_reg_2240 <= Loop1_V_fu_1279_p3;
        Loop2_V_reg_2246[1 : 0] <= Loop2_V_fu_1293_p3[1 : 0];
Loop2_V_reg_2246[3] <= Loop2_V_fu_1293_p3[3];
        OutputOffset1_V_reg_2251 <= OutputOffset1_V_fu_1306_p3;
        OutputOffset2_V_reg_2256 <= OutputOffset2_V_fu_1319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        OtuputTmpOffset1_V_cast_reg_2295[2] <= OtuputTmpOffset1_V_cast_fu_1393_p1[2];
OtuputTmpOffset1_V_cast_reg_2295[5] <= OtuputTmpOffset1_V_cast_fu_1393_p1[5];
OtuputTmpOffset1_V_cast_reg_2295[7] <= OtuputTmpOffset1_V_cast_fu_1393_p1[7];
OtuputTmpOffset1_V_cast_reg_2295[9] <= OtuputTmpOffset1_V_cast_fu_1393_p1[9];
        OtuputTmpOffset2_V_cast_cast_cast_cast_reg_2285[1] <= OtuputTmpOffset2_V_cast_cast_cast_cast_fu_1386_p1[1];
OtuputTmpOffset2_V_cast_cast_cast_cast_reg_2285[4 : 3] <= OtuputTmpOffset2_V_cast_cast_cast_cast_fu_1386_p1[4 : 3];
        OutputOffset1_V_cast_reg_2290[17 : 0] <= OutputOffset1_V_cast_fu_1390_p1[17 : 0];
        OutputOffset2_V_cast_reg_2280[8 : 0] <= OutputOffset2_V_cast_fu_1379_p1[8 : 0];
        bound26_reg_2304 <= bound26_fu_1410_p2;
        empty_reg_2300 <= empty_fu_1397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        OutputLength_1_reg_2266 <= OutputLength_1_fu_1364_p3;
        icmp_ln878_reg_2276 <= icmp_ln878_fu_1374_p2;
        sext_ln870_reg_2261[1 : 0] <= sext_ln870_fu_1326_p1[1 : 0];
sext_ln870_reg_2261[4 : 3] <= sext_ln870_fu_1326_p1[4 : 3];
        zext_ln443_reg_2271[12 : 0] <= zext_ln443_fu_1370_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln870_reg_2227 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        OutputLength_reg_2235 <= OutputLength_fu_1267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln422_reg_1795 <= add_ln422_fu_979_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln422_reg_1800_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln427_reg_1853 <= grp_fu_1661_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_2276 == 1'd0) & (write_flag_read_read_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        add_ln472_1_reg_2309 <= add_ln472_1_fu_1416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln475_1_reg_2360 <= add_ln475_1_fu_1517_p2;
        lshr_ln475_2_reg_2370 <= {{add_ln475_1_fu_1517_p2[31:1]}};
        tmp_1_reg_2365 <= add_ln475_1_fu_1517_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln475_2_reg_2350 <= add_ln475_2_fu_1485_p2;
        select_ln472_reg_2345 <= select_ln472_fu_1470_p3;
        trunc_ln475_2_reg_2355 <= {{add_ln475_3_fu_1494_p2[14:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1616_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ptr561_sum_reg_2400 <= add_ptr561_sum_fu_1625_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        and_ln870_reg_2216 <= and_ln870_fu_1243_p2;
        icmp_ln870_1_reg_2209 <= icmp_ln870_1_fu_1232_p2;
        or_ln870_reg_2227 <= or_ln870_fu_1248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln422_reg_1800_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cnt_1_reg_2200 <= cnt_1_fu_1160_p2;
        icmp_ln429_reg_2205 <= icmp_ln429_fu_1166_p2;
        ouput_array_0_reg_2188 <= ouput_array_0_fu_1118_p34;
        trunc_ln427_reg_2194 <= trunc_ln427_fu_1156_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond1_reg_2396 <= exitcond1_fu_1616_p2;
        exitcond1_reg_2396_pp1_iter1_reg <= exitcond1_reg_2396;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        exitcond1_reg_2396_pp1_iter2_reg <= exitcond1_reg_2396_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln422_reg_1800 <= icmp_ln422_fu_985_p2;
        icmp_ln422_reg_1800_pp0_iter1_reg <= icmp_ln422_reg_1800;
        icmp_ln422_reg_1800_pp0_iter2_reg <= icmp_ln422_reg_1800_pp0_iter1_reg;
        icmp_ln422_reg_1800_pp0_iter3_reg <= icmp_ln422_reg_1800_pp0_iter2_reg;
        icmp_ln423_reg_1804_pp0_iter1_reg <= icmp_ln423_reg_1804;
        icmp_ln423_reg_1804_pp0_iter2_reg <= icmp_ln423_reg_1804_pp0_iter1_reg;
        icmp_ln423_reg_1804_pp0_iter3_reg <= icmp_ln423_reg_1804_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln422_fu_985_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln423_reg_1804 <= icmp_ln423_fu_990_p2;
        icmp_ln424_1_reg_1818 <= icmp_ln424_1_fu_1003_p2;
        select_ln399_reg_1812 <= select_ln399_fu_995_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln424_reg_1790 <= icmp_ln424_fu_974_p2;
        mul_ln301_1_reg_1785 <= grp_fu_1655_p2;
        mul_ln410_1_reg_1780 <= grp_fu_930_p2;
        mul_ln410_reg_1775 <= grp_fu_920_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln472_fu_1422_p2 == 1'd0) & (icmp_ln878_reg_2276 == 1'd0) & (write_flag_read_read_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        icmp_ln473_reg_2317 <= icmp_ln473_fu_1437_p2;
        select_ln472_1_reg_2323 <= select_ln472_1_fu_1442_p3;
        select_ln472_2_reg_2329 <= select_ln472_2_fu_1450_p3;
        select_ln472_3_reg_2335 <= select_ln472_3_fu_1458_p3;
        trunc_ln472_reg_2340 <= trunc_ln472_fu_1466_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((write_flag_read_read_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln870_reg_1753 <= icmp_ln870_fu_936_p2;
        mul_ln301_reg_1759 <= mul_ln301_fu_950_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_2365 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        lshr_ln475_1_reg_2375 <= {{sub_ln475_fu_1540_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln422_reg_1800_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ouput_array_1_3_fu_250 <= ouput_array_1_5_fu_1178_p3;
        ouput_array_1_fu_246 <= ouput_array_1_6_fu_1184_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln422_reg_1800_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer10_load_reg_2073 <= output_buffer10_q0;
        output_buffer11_load_reg_2078 <= output_buffer11_q0;
        output_buffer12_load_reg_2083 <= output_buffer12_q0;
        output_buffer13_load_reg_2088 <= output_buffer13_q0;
        output_buffer14_load_reg_2093 <= output_buffer14_q0;
        output_buffer15_load_reg_2098 <= output_buffer15_q0;
        output_buffer16_load_reg_2103 <= output_buffer16_q0;
        output_buffer17_load_reg_2108 <= output_buffer17_q0;
        output_buffer18_load_reg_2113 <= output_buffer18_q0;
        output_buffer19_load_reg_2118 <= output_buffer19_q0;
        output_buffer1_load_reg_2028 <= output_buffer1_q0;
        output_buffer20_load_reg_2123 <= output_buffer20_q0;
        output_buffer21_load_reg_2128 <= output_buffer21_q0;
        output_buffer22_load_reg_2133 <= output_buffer22_q0;
        output_buffer23_load_reg_2138 <= output_buffer23_q0;
        output_buffer24_load_reg_2143 <= output_buffer24_q0;
        output_buffer25_load_reg_2148 <= output_buffer25_q0;
        output_buffer26_load_reg_2153 <= output_buffer26_q0;
        output_buffer27_load_reg_2158 <= output_buffer27_q0;
        output_buffer28_load_reg_2163 <= output_buffer28_q0;
        output_buffer29_load_reg_2168 <= output_buffer29_q0;
        output_buffer2_load_reg_2033 <= output_buffer2_q0;
        output_buffer30_load_reg_2173 <= output_buffer30_q0;
        output_buffer31_load_reg_2178 <= output_buffer31_q0;
        output_buffer3_load_reg_2038 <= output_buffer3_q0;
        output_buffer4_load_reg_2043 <= output_buffer4_q0;
        output_buffer5_load_reg_2048 <= output_buffer5_q0;
        output_buffer6_load_reg_2053 <= output_buffer6_q0;
        output_buffer7_load_reg_2058 <= output_buffer7_q0;
        output_buffer8_load_reg_2063 <= output_buffer8_q0;
        output_buffer9_load_reg_2068 <= output_buffer9_q0;
        output_buffer_load_reg_2023 <= output_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond1_reg_2396_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_tmp_load_reg_2410 <= output_tmp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln422_reg_1800_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln399_1_reg_2183 <= select_ln399_1_fu_1108_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln399_3_reg_1823 <= select_ln399_3_fu_1023_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln422_reg_1800 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln399_4_reg_1828 <= select_ln399_4_fu_1031_p3;
        select_ln423_reg_1843 <= select_ln423_fu_1054_p3;
        tc_V_1_reg_1838 <= tc_V_1_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        select_ln475_reg_2380 <= select_ln475_fu_1567_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln423_reg_1804_pp0_iter2_reg == 1'd1) & (icmp_ln422_reg_1800_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tm_V_2_reg_2018 <= tm_V_2_fu_1099_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        DATA_BUS_blk_n_AW = m_axi_DATA_BUS_AWREADY;
    end else begin
        DATA_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((empty_reg_2300 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        DATA_BUS_blk_n_B = m_axi_DATA_BUS_BVALID;
    end else begin
        DATA_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2396_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        DATA_BUS_blk_n_W = m_axi_DATA_BUS_WREADY;
    end else begin
        DATA_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln422_fu_985_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_1616_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state18) & ((write_flag_read_read_fu_262_p2 == 1'd0) | ((icmp_ln472_fu_1422_p2 == 1'd1) | (icmp_ln878_reg_2276 == 1'd1)))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_778_p4 = add_ln422_reg_1795;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_778_p4 = indvar_flatten21_reg_774;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_801_p4 = select_ln423_reg_1843;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_801_p4 = indvar_flatten_reg_797;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tc_V_phi_fu_824_p4 = tc_V_1_reg_1838;
    end else begin
        ap_phi_mux_tc_V_phi_fu_824_p4 = tc_V_reg_820;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln422_reg_1800_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tm_V_phi_fu_789_p4 = select_ln399_1_reg_2183;
    end else begin
        ap_phi_mux_tm_V_phi_fu_789_p4 = tm_V_reg_785;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln422_reg_1800 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tr_V_phi_fu_813_p4 = select_ln399_4_reg_1828;
    end else begin
        ap_phi_mux_tr_V_phi_fu_813_p4 = tr_V_reg_809;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & ((write_flag_read_read_fu_262_p2 == 1'd0) | ((icmp_ln472_fu_1422_p2 == 1'd1) | (icmp_ln878_reg_2276 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        m_axi_DATA_BUS_AWVALID = 1'b1;
    end else begin
        m_axi_DATA_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (empty_reg_2300 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        m_axi_DATA_BUS_BREADY = 1'b1;
    end else begin
        m_axi_DATA_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2396_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        m_axi_DATA_BUS_WVALID = 1'b1;
    end else begin
        m_axi_DATA_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer10_ce0 = 1'b1;
    end else begin
        output_buffer10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer11_ce0 = 1'b1;
    end else begin
        output_buffer11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer12_ce0 = 1'b1;
    end else begin
        output_buffer12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer13_ce0 = 1'b1;
    end else begin
        output_buffer13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer14_ce0 = 1'b1;
    end else begin
        output_buffer14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer15_ce0 = 1'b1;
    end else begin
        output_buffer15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer16_ce0 = 1'b1;
    end else begin
        output_buffer16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer17_ce0 = 1'b1;
    end else begin
        output_buffer17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer18_ce0 = 1'b1;
    end else begin
        output_buffer18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer19_ce0 = 1'b1;
    end else begin
        output_buffer19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer1_ce0 = 1'b1;
    end else begin
        output_buffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer20_ce0 = 1'b1;
    end else begin
        output_buffer20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer21_ce0 = 1'b1;
    end else begin
        output_buffer21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer22_ce0 = 1'b1;
    end else begin
        output_buffer22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer23_ce0 = 1'b1;
    end else begin
        output_buffer23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer24_ce0 = 1'b1;
    end else begin
        output_buffer24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer25_ce0 = 1'b1;
    end else begin
        output_buffer25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer26_ce0 = 1'b1;
    end else begin
        output_buffer26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer27_ce0 = 1'b1;
    end else begin
        output_buffer27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer28_ce0 = 1'b1;
    end else begin
        output_buffer28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer29_ce0 = 1'b1;
    end else begin
        output_buffer29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer2_ce0 = 1'b1;
    end else begin
        output_buffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer30_ce0 = 1'b1;
    end else begin
        output_buffer30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer31_ce0 = 1'b1;
    end else begin
        output_buffer31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer3_ce0 = 1'b1;
    end else begin
        output_buffer3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer4_ce0 = 1'b1;
    end else begin
        output_buffer4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer5_ce0 = 1'b1;
    end else begin
        output_buffer5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer6_ce0 = 1'b1;
    end else begin
        output_buffer6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer7_ce0 = 1'b1;
    end else begin
        output_buffer7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer8_ce0 = 1'b1;
    end else begin
        output_buffer8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer9_ce0 = 1'b1;
    end else begin
        output_buffer9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_ce0 = 1'b1;
    end else begin
        output_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_tmp_address0 = add_ptr561_sum_cast_fu_1630_p1;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_address0 = zext_ln431_fu_1216_p1;
    end else begin
        output_tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_tmp_ce0 = 1'b1;
    end else begin
        output_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln429_reg_2205 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_we0 = 1'b1;
    end else begin
        output_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((write_flag_read_read_fu_262_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((write_flag_read_read_fu_262_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln422_fu_985_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln422_fu_985_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & ((write_flag_read_read_fu_262_p2 == 1'd0) | ((icmp_ln472_fu_1422_p2 == 1'd1) | (icmp_ln878_reg_2276 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((empty_reg_2300 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((m_axi_DATA_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond1_fu_1616_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond1_fu_1616_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if ((~((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0)) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Loop1_V_fu_1279_p3 = ((and_ln870_reg_2216[0:0] == 1'b1) ? 6'd1 : select_ln870_fu_1273_p3);

assign Loop2_V_fu_1293_p3 = ((or_ln870_reg_2227[0:0] == 1'b1) ? select_ln870_2_fu_1286_p3 : 4'd1);

assign OtuputTmpOffset1_V_cast_fu_1393_p1 = OtuputTmpOffset1_V_fu_1336_p3;

assign OtuputTmpOffset1_V_fu_1336_p3 = ((or_ln870_reg_2227[0:0] == 1'b1) ? select_ln870_8_fu_1329_p3 : 10'd0);

assign OtuputTmpOffset1_sum_2_fu_1432_p2 = (OtuputTmpOffset1_V_cast_reg_2295 + OtuputTmpOffset1_sum_reg_843);

assign OtuputTmpOffset2_V_cast_cast_cast_cast_fu_1386_p1 = $unsigned(OtuputTmpOffset2_V_cast_cast_cast_fu_1382_p1);

assign OtuputTmpOffset2_V_cast_cast_cast_fu_1382_p1 = $signed(OtuputTmpOffset2_V_fu_1350_p3);

assign OtuputTmpOffset2_V_fu_1350_p3 = ((or_ln870_reg_2227[0:0] == 1'b1) ? select_ln870_10_fu_1343_p3 : 4'd0);

assign OtuputTmpOffset2_sum_1_fu_1651_p2 = (OtuputTmpOffset2_V_cast_cast_cast_cast_reg_2285 + select_ln472_reg_2345);

assign OutputLength_1_fu_1364_p3 = ((or_ln870_reg_2227[0:0] == 1'b1) ? select_ln870_12_fu_1357_p3 : OutputLength_reg_2235);

assign OutputLength_fu_1267_p0 = OutputLength_fu_1267_p00;

assign OutputLength_fu_1267_p00 = r_1_fu_1254_p4;

assign OutputLength_fu_1267_p1 = 13'd169;

assign OutputOffset1_V_cast_fu_1390_p1 = OutputOffset1_V_reg_2251;

assign OutputOffset1_V_fu_1306_p3 = ((and_ln870_reg_2216[0:0] == 1'b1) ? 18'd0 : select_ln870_4_fu_1300_p3);

assign OutputOffset1_sum_2_fu_1427_p2 = (OutputOffset1_V_cast_reg_2290 + OutputOffset1_sum_reg_854);

assign OutputOffset2_V_cast_fu_1379_p1 = OutputOffset2_V_reg_2256;

assign OutputOffset2_V_fu_1319_p3 = ((and_ln870_reg_2216[0:0] == 1'b1) ? 9'd0 : select_ln870_6_fu_1313_p3);

assign OutputOffset2_sum_1_fu_1647_p2 = (OutputOffset2_V_cast_reg_2280 + select_ln472_1_reg_2323);

assign TM_MIN_g_V_fu_961_p3 = ((icmp_ln870_reg_1753[0:0] == 1'b1) ? 6'd12 : TM_MIN);

assign add_ln422_fu_979_p2 = (ap_phi_mux_indvar_flatten21_phi_fu_778_p4 + 18'd1);

assign add_ln423_fu_1048_p2 = (indvar_flatten_reg_797 + 12'd1);

assign add_ln472_1_fu_1416_p2 = (indvar_flatten28_reg_832 + 11'd1);

assign add_ln472_fu_1512_p2 = (mul_ln410_reg_1775 + zext_ln472_fu_1509_p1);

assign add_ln475_1_fu_1517_p2 = (add_ln475_2_reg_2350 + add_ln472_fu_1512_p2);

assign add_ln475_2_fu_1485_p2 = (add_ln475_fu_1480_p2 + c);

assign add_ln475_3_fu_1494_p2 = (zext_ln475_1_fu_1490_p1 + trunc_ln472_reg_2340);

assign add_ln475_fu_1480_p2 = (mul_ln410_1_reg_1780 + zext_ln473_fu_1477_p1);

assign add_ln691_2_fu_1634_p2 = (tr_V_5_reg_888 + 5'd1);

assign add_ptr561_sum_cast_fu_1630_p1 = add_ptr561_sum_reg_2400;

assign add_ptr561_sum_fu_1625_p2 = (loop_index_cast_fu_1621_p1 + trunc_ln475_2_reg_2355);

assign and_ln870_fu_1243_p2 = (xor_ln870_fu_1237_p2 & icmp_ln870_reg_1753);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp1_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp1_iter3 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((m_axi_DATA_BUS_WREADY == 1'b0) & (exitcond1_reg_2396_pp1_iter2_reg == 1'd0));
end

assign ap_block_state28_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33 = ((m_axi_DATA_BUS_BVALID == 1'b0) & (empty_reg_2300 == 1'd0));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bound26_fu_1410_p0 = bound26_fu_1410_p00;

assign bound26_fu_1410_p00 = Loop1_V_reg_2240;

assign bound26_fu_1410_p1 = bound26_fu_1410_p10;

assign bound26_fu_1410_p10 = $unsigned(sext_ln870_fu_1326_p1);

assign cnt_1_fu_1160_p2 = (cnt_fu_254 + 8'd1);

assign empty_74_fu_1585_p2 = ($signed(p_cast2_fu_1581_p1) + $signed(Output_r));

assign empty_76_fu_1610_p2 = (loop_index_reg_900 + 13'd1);

assign empty_fu_1397_p2 = ((OutputLength_1_fu_1364_p3 == 13'd0) ? 1'b1 : 1'b0);

assign exitcond1_fu_1616_p2 = ((loop_index_reg_900 == OutputLength_1_reg_2266) ? 1'b1 : 1'b0);

assign grp_fu_1655_p0 = grp_fu_1655_p00;

assign grp_fu_1655_p00 = TM_MIN_g_V_fu_961_p3;

assign grp_fu_1655_p1 = grp_fu_1655_p10;

assign grp_fu_1655_p10 = mul_ln301_reg_1759;

assign grp_fu_1661_p0 = grp_fu_1661_p00;

assign grp_fu_1661_p00 = select_ln399_4_fu_1031_p3;

assign grp_fu_1661_p1 = 10'd26;

assign grp_fu_1661_p2 = grp_fu_1661_p20;

assign grp_fu_1661_p20 = select_ln399_3_reg_1823;

assign grp_fu_920_p0 = grp_fu_920_p00;

assign grp_fu_920_p00 = OHxOW;

assign grp_fu_930_p0 = grp_fu_930_p00;

assign grp_fu_930_p00 = Output_w;

assign icmp_ln422_fu_985_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_778_p4 == mul_ln301_1_reg_1785) ? 1'b1 : 1'b0);

assign icmp_ln423_fu_990_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_801_p4 == mul_ln301_reg_1759) ? 1'b1 : 1'b0);

assign icmp_ln424_1_fu_1003_p2 = ((ap_phi_mux_tc_V_phi_fu_824_p4 == TC_MIN) ? 1'b1 : 1'b0);

assign icmp_ln424_fu_974_p2 = ((TC_MIN == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln429_fu_1166_p2 = ((cnt_1_fu_1160_p2 == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln472_fu_1422_p2 = ((indvar_flatten28_reg_832 == bound26_reg_2304) ? 1'b1 : 1'b0);

assign icmp_ln473_fu_1437_p2 = ((tr_V_5_reg_888 == sext_ln870_reg_2261) ? 1'b1 : 1'b0);

assign icmp_ln870_1_fu_1232_p2 = ((TC_MIN == 6'd26) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_936_p2 = ((TM_MIN == 6'd9) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_1374_p2 = ((Loop1_V_reg_2240 == 6'd0) ? 1'b1 : 1'b0);

assign loop_index_cast_fu_1621_p1 = loop_index_reg_900;

assign m_axi_DATA_BUS_ARADDR = 64'd0;

assign m_axi_DATA_BUS_ARBURST = 2'd0;

assign m_axi_DATA_BUS_ARCACHE = 4'd0;

assign m_axi_DATA_BUS_ARID = 1'd0;

assign m_axi_DATA_BUS_ARLEN = 32'd0;

assign m_axi_DATA_BUS_ARLOCK = 2'd0;

assign m_axi_DATA_BUS_ARPROT = 3'd0;

assign m_axi_DATA_BUS_ARQOS = 4'd0;

assign m_axi_DATA_BUS_ARREGION = 4'd0;

assign m_axi_DATA_BUS_ARSIZE = 3'd0;

assign m_axi_DATA_BUS_ARUSER = 1'd0;

assign m_axi_DATA_BUS_ARVALID = 1'b0;

assign m_axi_DATA_BUS_AWADDR = DATA_BUS_addr_reg_2385;

assign m_axi_DATA_BUS_AWBURST = 2'd0;

assign m_axi_DATA_BUS_AWCACHE = 4'd0;

assign m_axi_DATA_BUS_AWID = 1'd0;

assign m_axi_DATA_BUS_AWLEN = zext_ln443_reg_2271;

assign m_axi_DATA_BUS_AWLOCK = 2'd0;

assign m_axi_DATA_BUS_AWPROT = 3'd0;

assign m_axi_DATA_BUS_AWQOS = 4'd0;

assign m_axi_DATA_BUS_AWREGION = 4'd0;

assign m_axi_DATA_BUS_AWSIZE = 3'd0;

assign m_axi_DATA_BUS_AWUSER = 1'd0;

assign m_axi_DATA_BUS_RREADY = 1'b0;

assign m_axi_DATA_BUS_WDATA = output_tmp_load_reg_2410;

assign m_axi_DATA_BUS_WID = 1'd0;

assign m_axi_DATA_BUS_WLAST = 1'b0;

assign m_axi_DATA_BUS_WSTRB = 4'd15;

assign m_axi_DATA_BUS_WUSER = 1'd0;

assign mul_ln301_fu_950_p0 = mul_ln301_fu_950_p00;

assign mul_ln301_fu_950_p00 = TR_MIN;

assign mul_ln301_fu_950_p1 = mul_ln301_fu_950_p10;

assign mul_ln301_fu_950_p10 = TC_MIN;

assign or_ln399_fu_1018_p2 = (select_ln399_2_fu_1008_p3 | icmp_ln423_reg_1804);

assign or_ln870_fu_1248_p2 = (icmp_ln870_1_fu_1232_p2 | and_ln870_fu_1243_p2);

assign ouput_array_0_fu_1118_p33 = select_ln399_1_fu_1108_p3[4:0];

assign ouput_array_1_5_fu_1178_p3 = ((trunc_ln427_reg_2194[0:0] == 1'b1) ? ouput_array_0_reg_2188 : ouput_array_1_3_fu_250);

assign ouput_array_1_6_fu_1184_p3 = ((trunc_ln427_reg_2194[0:0] == 1'b1) ? ouput_array_1_fu_246 : ouput_array_0_reg_2188);

assign output_buffer10_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer11_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer12_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer13_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer14_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer15_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer16_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer17_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer18_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer19_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer1_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer20_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer21_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer22_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer23_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer24_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer25_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer26_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer27_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer28_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer29_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer2_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer30_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer31_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer3_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer4_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer5_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer6_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer7_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer8_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer9_address0 = zext_ln427_1_fu_1064_p1;

assign output_buffer_address0 = zext_ln427_1_fu_1064_p1;

assign output_tmp_d0 = {{ouput_array_1_5_fu_1178_p3}, {ouput_array_1_6_fu_1184_p3}};

assign outputoffset_1_fu_1221_p2 = (outputoffset_fu_258 + 32'd1);

assign p_cast2_fu_1581_p1 = $signed(tmp_fu_1574_p3);

assign p_cast_cast_fu_1600_p1 = $signed(p_cast_fu_1590_p4);

assign p_cast_fu_1590_p4 = {{empty_74_fu_1585_p2[63:2]}};

assign r_1_fu_1254_p4 = {{TM_MIN[5:1]}};

assign select_ln399_1_fu_1108_p3 = ((icmp_ln423_reg_1804_pp0_iter3_reg[0:0] == 1'b1) ? tm_V_2_reg_2018 : tm_V_reg_785);

assign select_ln399_2_fu_1008_p3 = ((icmp_ln423_reg_1804[0:0] == 1'b1) ? icmp_ln424_reg_1790 : icmp_ln424_1_reg_1818);

assign select_ln399_3_fu_1023_p3 = ((or_ln399_fu_1018_p2[0:0] == 1'b1) ? 6'd0 : tc_V_reg_820);

assign select_ln399_4_fu_1031_p3 = ((select_ln399_2_fu_1008_p3[0:0] == 1'b1) ? tr_V_4_fu_1013_p2 : select_ln399_reg_1812);

assign select_ln399_fu_995_p3 = ((icmp_ln423_fu_990_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_tr_V_phi_fu_813_p4);

assign select_ln423_fu_1054_p3 = ((icmp_ln423_reg_1804[0:0] == 1'b1) ? 12'd1 : add_ln423_fu_1048_p2);

assign select_ln472_1_fu_1442_p3 = ((icmp_ln473_fu_1437_p2[0:0] == 1'b1) ? 14'd0 : OutputOffset2_sum_reg_877);

assign select_ln472_2_fu_1450_p3 = ((icmp_ln473_fu_1437_p2[0:0] == 1'b1) ? OutputOffset1_sum_2_fu_1427_p2 : OutputOffset1_sum_reg_854);

assign select_ln472_3_fu_1458_p3 = ((icmp_ln473_fu_1437_p2[0:0] == 1'b1) ? OtuputTmpOffset1_sum_2_fu_1432_p2 : OtuputTmpOffset1_sum_reg_843);

assign select_ln472_fu_1470_p3 = ((icmp_ln473_reg_2317[0:0] == 1'b1) ? 10'd0 : OtuputTmpOffset2_sum_reg_865);

assign select_ln475_fu_1567_p3 = ((tmp_1_reg_2365[0:0] == 1'b1) ? sub_ln475_1_fu_1558_p2 : zext_ln475_2_fu_1564_p1);

assign select_ln870_10_fu_1343_p3 = ((and_ln870_reg_2216[0:0] == 1'b1) ? 4'd0 : 4'd10);

assign select_ln870_12_fu_1357_p3 = ((and_ln870_reg_2216[0:0] == 1'b1) ? 13'd1014 : 13'd13);

assign select_ln870_2_fu_1286_p3 = ((and_ln870_reg_2216[0:0] == 1'b1) ? 4'd1 : 4'd10);

assign select_ln870_4_fu_1300_p3 = ((icmp_ln870_1_reg_2209[0:0] == 1'b1) ? OHxOW : 18'd0);

assign select_ln870_6_fu_1313_p3 = ((icmp_ln870_1_reg_2209[0:0] == 1'b1) ? Output_w : 9'd0);

assign select_ln870_8_fu_1329_p3 = ((and_ln870_reg_2216[0:0] == 1'b1) ? 10'd0 : 10'd676);

assign select_ln870_fu_1273_p3 = ((icmp_ln870_1_reg_2209[0:0] == 1'b1) ? TM_MIN : 6'd1);

assign sext_ln870_fu_1326_p1 = $signed(Loop2_V_reg_2246);

assign sub_ln475_1_fu_1558_p2 = (32'd0 - zext_ln475_fu_1555_p1);

assign sub_ln475_fu_1540_p2 = (32'd0 - add_ln475_1_reg_2360);

assign tc_V_1_fu_1042_p2 = (select_ln399_3_fu_1023_p3 + 6'd1);

assign tm_V_2_fu_1099_p2 = (ap_phi_mux_tm_V_phi_fu_789_p4 + 6'd1);

assign tmp_fu_1574_p3 = {{select_ln475_reg_2380}, {2'd0}};

assign tr_V_3_fu_1640_p3 = ((icmp_ln473_reg_2317[0:0] == 1'b1) ? 5'd1 : add_ln691_2_fu_1634_p2);

assign tr_V_4_fu_1013_p2 = (select_ln399_reg_1812 + 6'd1);

assign trunc_ln427_fu_1156_p1 = cnt_fu_254[0:0];

assign trunc_ln472_fu_1466_p1 = select_ln472_3_fu_1458_p3[14:0];

assign write_flag_read_read_fu_262_p2 = write_flag;

assign xor_ln870_fu_1237_p2 = (icmp_ln870_1_fu_1232_p2 ^ 1'd1);

assign zext_ln427_1_fu_1064_p1 = add_ln427_reg_1853;

assign zext_ln431_fu_1216_p1 = outputoffset_fu_258;

assign zext_ln443_fu_1370_p1 = OutputLength_1_fu_1364_p3;

assign zext_ln472_fu_1509_p1 = select_ln472_2_reg_2329;

assign zext_ln473_fu_1477_p1 = select_ln472_1_reg_2323;

assign zext_ln475_1_fu_1490_p1 = select_ln472_fu_1470_p3;

assign zext_ln475_2_fu_1564_p1 = lshr_ln475_2_reg_2370;

assign zext_ln475_fu_1555_p1 = lshr_ln475_1_reg_2375;

always @ (posedge ap_clk) begin
    Loop2_V_reg_2246[2] <= 1'b0;
    sext_ln870_reg_2261[2] <= 1'b0;
    zext_ln443_reg_2271[31:13] <= 19'b0000000000000000000;
    OutputOffset2_V_cast_reg_2280[13:9] <= 5'b00000;
    OtuputTmpOffset2_V_cast_cast_cast_cast_reg_2285[0] <= 1'b0;
    OtuputTmpOffset2_V_cast_cast_cast_cast_reg_2285[2:2] <= 1'b0;
    OtuputTmpOffset2_V_cast_cast_cast_cast_reg_2285[9:5] <= 5'b00000;
    OutputOffset1_V_cast_reg_2290[23:18] <= 6'b000000;
    OtuputTmpOffset1_V_cast_reg_2295[1:0] <= 2'b00;
    OtuputTmpOffset1_V_cast_reg_2295[4:3] <= 2'b00;
    OtuputTmpOffset1_V_cast_reg_2295[6:6] <= 1'b0;
    OtuputTmpOffset1_V_cast_reg_2295[8:8] <= 1'b0;
    OtuputTmpOffset1_V_cast_reg_2295[15:10] <= 6'b000000;
end

endmodule //YOLO2_FPGA_write_back_output_reorg
