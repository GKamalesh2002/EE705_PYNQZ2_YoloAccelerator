// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module YOLO2_FPGA_clear_input_buffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_buffer_0_address0,
        input_buffer_0_ce0,
        input_buffer_0_we0,
        input_buffer_0_d0,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_we0,
        input_buffer_1_d0,
        TRow,
        TCol
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_buffer_0_address0;
output   input_buffer_0_ce0;
output   input_buffer_0_we0;
output  [15:0] input_buffer_0_d0;
output  [11:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
output   input_buffer_1_we0;
output  [15:0] input_buffer_1_d0;
input  [5:0] TRow;
input  [5:0] TCol;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_buffer_0_ce0;
reg input_buffer_0_we0;
reg input_buffer_1_ce0;
reg input_buffer_1_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten_reg_78;
reg   [5:0] t2_V_reg_89;
reg   [5:0] t3_V_reg_100;
wire   [11:0] mul_ln23_fu_119_p2;
reg   [11:0] mul_ln23_reg_194;
wire   [11:0] add_ln29_fu_125_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln29_fu_131_p2;
reg   [0:0] icmp_ln29_reg_204;
reg   [0:0] icmp_ln29_reg_204_pp0_iter1_reg;
reg   [0:0] icmp_ln29_reg_204_pp0_iter2_reg;
reg   [0:0] icmp_ln29_reg_204_pp0_iter3_reg;
wire   [5:0] select_ln26_fu_147_p3;
reg   [5:0] select_ln26_reg_208;
reg   [5:0] select_ln26_reg_208_pp0_iter1_reg;
wire   [5:0] select_ln26_1_fu_155_p3;
reg   [5:0] select_ln26_1_reg_213;
wire   [5:0] t3_V_5_fu_167_p2;
wire   [11:0] grp_fu_181_p3;
reg   [11:0] add_ln35_reg_233;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg   [5:0] ap_phi_mux_t2_V_phi_fu_93_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln35_2_fu_176_p1;
wire   [5:0] mul_ln23_fu_119_p0;
wire   [5:0] mul_ln23_fu_119_p1;
wire   [0:0] icmp_ln30_fu_142_p2;
wire   [5:0] t2_V_4_fu_136_p2;
wire   [5:0] grp_fu_181_p0;
wire   [6:0] grp_fu_181_p1;
wire   [5:0] grp_fu_181_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_181_p00;
wire   [11:0] grp_fu_181_p20;
wire   [11:0] mul_ln23_fu_119_p00;
wire   [11:0] mul_ln23_fu_119_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

YOLO2_FPGA_mul_6ns_6ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mul_6ns_6ns_12_1_1_U1(
    .din0(mul_ln23_fu_119_p0),
    .din1(mul_ln23_fu_119_p1),
    .dout(mul_ln23_fu_119_p2)
);

YOLO2_FPGA_mac_muladd_6ns_7ns_6ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_7ns_6ns_12_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(grp_fu_181_p1),
    .din2(grp_fu_181_p2),
    .ce(1'b1),
    .dout(grp_fu_181_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_78 <= add_ln29_fu_125_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_78 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t2_V_reg_89 <= select_ln26_1_reg_213;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t2_V_reg_89 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t3_V_reg_100 <= t3_V_5_fu_167_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t3_V_reg_100 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln29_reg_204_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln35_reg_233 <= grp_fu_181_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln29_reg_204 <= icmp_ln29_fu_131_p2;
        icmp_ln29_reg_204_pp0_iter1_reg <= icmp_ln29_reg_204;
        select_ln26_reg_208_pp0_iter1_reg <= select_ln26_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln29_reg_204_pp0_iter2_reg <= icmp_ln29_reg_204_pp0_iter1_reg;
        icmp_ln29_reg_204_pp0_iter3_reg <= icmp_ln29_reg_204_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_ln23_reg_194 <= mul_ln23_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln26_1_reg_213 <= select_ln26_1_fu_155_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln26_reg_208 <= select_ln26_fu_147_p3;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_131_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_t2_V_phi_fu_93_p4 = select_ln26_1_reg_213;
    end else begin
        ap_phi_mux_t2_V_phi_fu_93_p4 = t2_V_reg_89;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_buffer_0_ce0 = 1'b1;
    end else begin
        input_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_204_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_buffer_0_we0 = 1'b1;
    end else begin
        input_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_buffer_1_ce0 = 1'b1;
    end else begin
        input_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_204_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_buffer_1_we0 = 1'b1;
    end else begin
        input_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln29_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln29_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_125_p2 = (indvar_flatten_reg_78 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_181_p0 = grp_fu_181_p00;

assign grp_fu_181_p00 = select_ln26_1_fu_155_p3;

assign grp_fu_181_p1 = 12'd53;

assign grp_fu_181_p2 = grp_fu_181_p20;

assign grp_fu_181_p20 = select_ln26_reg_208_pp0_iter1_reg;

assign icmp_ln29_fu_131_p2 = ((indvar_flatten_reg_78 == mul_ln23_reg_194) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_142_p2 = ((t3_V_reg_100 == TCol) ? 1'b1 : 1'b0);

assign input_buffer_0_address0 = zext_ln35_2_fu_176_p1;

assign input_buffer_0_d0 = 16'd0;

assign input_buffer_1_address0 = zext_ln35_2_fu_176_p1;

assign input_buffer_1_d0 = 16'd0;

assign mul_ln23_fu_119_p0 = mul_ln23_fu_119_p00;

assign mul_ln23_fu_119_p00 = TRow;

assign mul_ln23_fu_119_p1 = mul_ln23_fu_119_p10;

assign mul_ln23_fu_119_p10 = TCol;

assign select_ln26_1_fu_155_p3 = ((icmp_ln30_fu_142_p2[0:0] == 1'b1) ? t2_V_4_fu_136_p2 : ap_phi_mux_t2_V_phi_fu_93_p4);

assign select_ln26_fu_147_p3 = ((icmp_ln30_fu_142_p2[0:0] == 1'b1) ? 6'd0 : t3_V_reg_100);

assign t2_V_4_fu_136_p2 = (ap_phi_mux_t2_V_phi_fu_93_p4 + 6'd1);

assign t3_V_5_fu_167_p2 = (select_ln26_fu_147_p3 + 6'd1);

assign zext_ln35_2_fu_176_p1 = add_ln35_reg_233;

endmodule //YOLO2_FPGA_clear_input_buffer
