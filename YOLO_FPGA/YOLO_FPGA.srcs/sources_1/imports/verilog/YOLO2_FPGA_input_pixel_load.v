// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module YOLO2_FPGA_input_pixel_load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_DATA_BUS_AWVALID,
        m_axi_DATA_BUS_AWREADY,
        m_axi_DATA_BUS_AWADDR,
        m_axi_DATA_BUS_AWID,
        m_axi_DATA_BUS_AWLEN,
        m_axi_DATA_BUS_AWSIZE,
        m_axi_DATA_BUS_AWBURST,
        m_axi_DATA_BUS_AWLOCK,
        m_axi_DATA_BUS_AWCACHE,
        m_axi_DATA_BUS_AWPROT,
        m_axi_DATA_BUS_AWQOS,
        m_axi_DATA_BUS_AWREGION,
        m_axi_DATA_BUS_AWUSER,
        m_axi_DATA_BUS_WVALID,
        m_axi_DATA_BUS_WREADY,
        m_axi_DATA_BUS_WDATA,
        m_axi_DATA_BUS_WSTRB,
        m_axi_DATA_BUS_WLAST,
        m_axi_DATA_BUS_WID,
        m_axi_DATA_BUS_WUSER,
        m_axi_DATA_BUS_ARVALID,
        m_axi_DATA_BUS_ARREADY,
        m_axi_DATA_BUS_ARADDR,
        m_axi_DATA_BUS_ARID,
        m_axi_DATA_BUS_ARLEN,
        m_axi_DATA_BUS_ARSIZE,
        m_axi_DATA_BUS_ARBURST,
        m_axi_DATA_BUS_ARLOCK,
        m_axi_DATA_BUS_ARCACHE,
        m_axi_DATA_BUS_ARPROT,
        m_axi_DATA_BUS_ARQOS,
        m_axi_DATA_BUS_ARREGION,
        m_axi_DATA_BUS_ARUSER,
        m_axi_DATA_BUS_RVALID,
        m_axi_DATA_BUS_RREADY,
        m_axi_DATA_BUS_RDATA,
        m_axi_DATA_BUS_RLAST,
        m_axi_DATA_BUS_RID,
        m_axi_DATA_BUS_RUSER,
        m_axi_DATA_BUS_RRESP,
        m_axi_DATA_BUS_BVALID,
        m_axi_DATA_BUS_BREADY,
        m_axi_DATA_BUS_BRESP,
        m_axi_DATA_BUS_BID,
        m_axi_DATA_BUS_BUSER,
        input_r,
        r,
        c,
        n,
        Kernel_stride,
        Padding,
        TRow,
        TCol,
        Input_w,
        Input_h,
        TN_MIN,
        IHxIW,
        RowBeginByte_address0,
        RowBeginByte_ce0,
        RowBeginByte_we0,
        RowBeginByte_d0,
        input_memcpy_buffer_address0,
        input_memcpy_buffer_ce0,
        input_memcpy_buffer_we0,
        input_memcpy_buffer_d0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_pp0_stage0 = 21'd64;
parameter    ap_ST_fsm_state9 = 21'd128;
parameter    ap_ST_fsm_state10 = 21'd256;
parameter    ap_ST_fsm_state11 = 21'd512;
parameter    ap_ST_fsm_state12 = 21'd1024;
parameter    ap_ST_fsm_state13 = 21'd2048;
parameter    ap_ST_fsm_state14 = 21'd4096;
parameter    ap_ST_fsm_state15 = 21'd8192;
parameter    ap_ST_fsm_state16 = 21'd16384;
parameter    ap_ST_fsm_state17 = 21'd32768;
parameter    ap_ST_fsm_state18 = 21'd65536;
parameter    ap_ST_fsm_state19 = 21'd131072;
parameter    ap_ST_fsm_state20 = 21'd262144;
parameter    ap_ST_fsm_pp1_stage0 = 21'd524288;
parameter    ap_ST_fsm_state24 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_DATA_BUS_AWVALID;
input   m_axi_DATA_BUS_AWREADY;
output  [63:0] m_axi_DATA_BUS_AWADDR;
output  [0:0] m_axi_DATA_BUS_AWID;
output  [31:0] m_axi_DATA_BUS_AWLEN;
output  [2:0] m_axi_DATA_BUS_AWSIZE;
output  [1:0] m_axi_DATA_BUS_AWBURST;
output  [1:0] m_axi_DATA_BUS_AWLOCK;
output  [3:0] m_axi_DATA_BUS_AWCACHE;
output  [2:0] m_axi_DATA_BUS_AWPROT;
output  [3:0] m_axi_DATA_BUS_AWQOS;
output  [3:0] m_axi_DATA_BUS_AWREGION;
output  [0:0] m_axi_DATA_BUS_AWUSER;
output   m_axi_DATA_BUS_WVALID;
input   m_axi_DATA_BUS_WREADY;
output  [31:0] m_axi_DATA_BUS_WDATA;
output  [3:0] m_axi_DATA_BUS_WSTRB;
output   m_axi_DATA_BUS_WLAST;
output  [0:0] m_axi_DATA_BUS_WID;
output  [0:0] m_axi_DATA_BUS_WUSER;
output   m_axi_DATA_BUS_ARVALID;
input   m_axi_DATA_BUS_ARREADY;
output  [63:0] m_axi_DATA_BUS_ARADDR;
output  [0:0] m_axi_DATA_BUS_ARID;
output  [31:0] m_axi_DATA_BUS_ARLEN;
output  [2:0] m_axi_DATA_BUS_ARSIZE;
output  [1:0] m_axi_DATA_BUS_ARBURST;
output  [1:0] m_axi_DATA_BUS_ARLOCK;
output  [3:0] m_axi_DATA_BUS_ARCACHE;
output  [2:0] m_axi_DATA_BUS_ARPROT;
output  [3:0] m_axi_DATA_BUS_ARQOS;
output  [3:0] m_axi_DATA_BUS_ARREGION;
output  [0:0] m_axi_DATA_BUS_ARUSER;
input   m_axi_DATA_BUS_RVALID;
output   m_axi_DATA_BUS_RREADY;
input  [31:0] m_axi_DATA_BUS_RDATA;
input   m_axi_DATA_BUS_RLAST;
input  [0:0] m_axi_DATA_BUS_RID;
input  [0:0] m_axi_DATA_BUS_RUSER;
input  [1:0] m_axi_DATA_BUS_RRESP;
input   m_axi_DATA_BUS_BVALID;
output   m_axi_DATA_BUS_BREADY;
input  [1:0] m_axi_DATA_BUS_BRESP;
input  [0:0] m_axi_DATA_BUS_BID;
input  [0:0] m_axi_DATA_BUS_BUSER;
input  [63:0] input_r;
input  [8:0] r;
input  [8:0] c;
input  [10:0] n;
input  [1:0] Kernel_stride;
input  [0:0] Padding;
input  [5:0] TRow;
input  [5:0] TCol;
input  [8:0] Input_w;
input  [8:0] Input_h;
input  [5:0] TN_MIN;
input  [17:0] IHxIW;
output  [6:0] RowBeginByte_address0;
output   RowBeginByte_ce0;
output   RowBeginByte_we0;
output  [0:0] RowBeginByte_d0;
output  [11:0] input_memcpy_buffer_address0;
output   input_memcpy_buffer_ce0;
output   input_memcpy_buffer_we0;
output  [31:0] input_memcpy_buffer_d0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_DATA_BUS_ARVALID;
reg m_axi_DATA_BUS_RREADY;
reg RowBeginByte_ce0;
reg RowBeginByte_we0;
reg input_memcpy_buffer_ce0;
reg input_memcpy_buffer_we0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    DATA_BUS_blk_n_AR;
wire    ap_CS_fsm_state14;
reg    DATA_BUS_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_1456;
reg   [6:0] RowBeginByteIndex_1_reg_327;
reg   [14:0] ret_10_reg_336;
reg   [10:0] loop_index_cast_reg_368;
wire   [8:0] zext_ln781_fu_388_p1;
reg   [8:0] zext_ln781_reg_1067;
wire   [9:0] zext_ln1347_fu_392_p1;
reg   [9:0] zext_ln1347_reg_1072;
wire  signed [9:0] ret_13_fu_406_p2;
reg  signed [9:0] ret_13_reg_1077;
wire   [8:0] trunc_ln1347_1_fu_412_p1;
reg   [8:0] trunc_ln1347_1_reg_1083;
wire   [5:0] trunc_ln213_2_fu_416_p1;
reg   [5:0] trunc_ln213_2_reg_1088;
wire  signed [9:0] ret_12_fu_437_p2;
reg  signed [9:0] ret_12_reg_1103;
wire    ap_CS_fsm_state2;
wire   [8:0] trunc_ln1347_fu_442_p1;
reg   [8:0] trunc_ln1347_reg_1109;
wire   [5:0] trunc_ln213_fu_446_p1;
reg   [5:0] trunc_ln213_reg_1114;
wire   [0:0] icmp_ln886_1_fu_450_p2;
reg   [0:0] icmp_ln886_1_reg_1119;
wire  signed [10:0] sext_ln1346_1_fu_455_p1;
reg  signed [10:0] sext_ln1346_1_reg_1124;
wire   [10:0] ret_3_fu_472_p2;
reg   [10:0] ret_3_reg_1129;
wire   [5:0] add_ln87_fu_478_p2;
reg   [5:0] add_ln87_reg_1134;
wire   [0:0] icmp_ln886_fu_483_p2;
reg   [0:0] icmp_ln886_reg_1139;
wire    ap_CS_fsm_state3;
wire  signed [10:0] sext_ln1346_fu_488_p1;
reg  signed [10:0] sext_ln1346_reg_1144;
wire   [10:0] ret_fu_505_p2;
reg   [10:0] ret_reg_1149;
wire   [5:0] add_ln75_fu_511_p2;
reg   [5:0] add_ln75_reg_1154;
wire   [8:0] TRow_top_V_fu_516_p3;
reg   [8:0] TRow_top_V_reg_1159;
wire   [5:0] row_len_V_fu_546_p2;
reg   [5:0] row_len_V_reg_1165;
wire    ap_CS_fsm_state4;
wire   [8:0] TCol_left_V_fu_552_p3;
reg   [8:0] TCol_left_V_reg_1177;
wire   [5:0] col_len_V_fu_582_p2;
reg   [5:0] col_len_V_reg_1184;
wire   [28:0] grp_fu_1055_p2;
reg   [28:0] ret_14_reg_1190;
wire   [17:0] ret_15_fu_595_p2;
reg   [17:0] ret_15_reg_1195;
wire   [0:0] trunc_ln1346_fu_601_p1;
reg   [0:0] trunc_ln1346_reg_1200;
wire   [0:0] trunc_ln1346_1_fu_604_p1;
reg   [0:0] trunc_ln1346_1_reg_1205;
wire   [0:0] IsContinue_fu_608_p2;
reg   [0:0] IsContinue_reg_1210;
wire    ap_CS_fsm_state5;
wire   [29:0] zext_ln1346_1_fu_622_p1;
reg   [29:0] zext_ln1346_1_reg_1227;
wire   [14:0] zext_ln1346_2_fu_626_p1;
reg   [14:0] zext_ln1346_2_reg_1232;
wire   [11:0] ColNum_V_fu_641_p3;
reg   [11:0] ColNum_V_reg_1237;
wire   [5:0] RowNum_V_fu_648_p3;
reg   [5:0] RowNum_V_reg_1242;
wire   [23:0] conv_i8_i131_fu_654_p1;
reg   [23:0] conv_i8_i131_reg_1248;
wire   [14:0] rhs_5_fu_657_p1;
reg   [14:0] rhs_5_reg_1253;
wire   [0:0] icmp_ln878_2_fu_660_p2;
reg   [0:0] icmp_ln878_2_reg_1258;
wire   [0:0] cmp_i14618_fu_666_p2;
reg   [0:0] cmp_i14618_reg_1269;
wire   [31:0] zext_ln691_fu_672_p1;
reg   [31:0] zext_ln691_reg_1273;
wire   [0:0] trunc_ln1346_2_fu_676_p1;
reg   [0:0] trunc_ln1346_2_reg_1279;
wire   [0:0] trunc_ln1346_3_fu_679_p1;
reg   [0:0] trunc_ln1346_3_reg_1284;
wire   [5:0] t1_V_2_fu_688_p2;
reg   [5:0] t1_V_2_reg_1289;
wire    ap_CS_fsm_state6;
wire   [23:0] add_ln121_fu_694_p2;
reg   [23:0] add_ln121_reg_1294;
wire   [0:0] icmp_ln121_fu_699_p2;
wire   [6:0] trunc_ln691_fu_711_p1;
wire   [31:0] add_ln691_fu_715_p2;
reg   [31:0] add_ln691_reg_1308;
wire   [5:0] add_ln122_fu_728_p2;
reg   [5:0] add_ln122_reg_1313;
wire   [29:0] add_ln125_fu_733_p2;
reg   [29:0] add_ln125_reg_1318;
wire   [0:0] xor_ln301_fu_738_p2;
reg   [0:0] xor_ln301_reg_1323;
wire   [0:0] icmp_ln122_fu_757_p2;
reg   [0:0] icmp_ln122_reg_1342;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln122_1_fu_762_p1;
reg   [63:0] zext_ln122_1_reg_1346;
wire   [14:0] add_ln1345_fu_767_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] LowBit_V_fu_800_p2;
reg   [0:0] LowBit_V_reg_1357;
wire   [10:0] trunc_ln9_fu_815_p4;
reg   [10:0] trunc_ln9_reg_1362;
wire   [10:0] add_ln130_fu_825_p2;
reg   [10:0] add_ln130_reg_1367;
reg   [28:0] trunc_ln_reg_1372;
wire   [6:0] add_ln133_fu_841_p2;
wire   [5:0] t1_V_3_fu_862_p2;
reg   [5:0] t1_V_3_reg_1382;
wire    ap_CS_fsm_state10;
wire  signed [32:0] sext_ln691_fu_876_p1;
wire   [0:0] icmp_ln138_fu_868_p2;
wire   [31:0] add_ln691_1_fu_880_p2;
reg   [31:0] add_ln691_1_reg_1395;
wire   [5:0] add_ln139_fu_889_p2;
reg   [5:0] add_ln139_reg_1400;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln139_fu_952_p2;
wire   [28:0] RowOffset_q0;
reg   [28:0] RowOffset_load_reg_1418;
wire    ap_CS_fsm_state12;
wire   [10:0] RowIntNum_q0;
reg   [10:0] RowIntNum_load_reg_1423;
wire   [11:0] trunc_ln141_fu_967_p1;
reg   [11:0] trunc_ln141_reg_1430;
wire    ap_CS_fsm_state13;
wire   [31:0] zext_ln141_fu_971_p1;
reg   [31:0] zext_ln141_reg_1435;
wire   [0:0] icmp_ln141_fu_974_p2;
reg   [63:0] DATA_BUS_addr_reg_1445;
wire   [10:0] empty_95_fu_1015_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond1_fu_1021_p2;
reg   [0:0] exitcond1_reg_1456_pp1_iter1_reg;
wire   [11:0] add_ptr547_sum_fu_1030_p2;
reg   [11:0] add_ptr547_sum_reg_1460;
reg   [11:0] add_ptr547_sum_reg_1460_pp1_iter1_reg;
reg   [31:0] DATA_BUS_addr_read_reg_1465;
wire   [32:0] add_ln143_fu_1044_p2;
wire    ap_CS_fsm_state24;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
reg   [6:0] RowIntNum_address0;
reg    RowIntNum_ce0;
reg    RowIntNum_we0;
wire   [10:0] RowIntNum_d0;
reg   [6:0] RowOffset_address0;
reg    RowOffset_ce0;
reg    RowOffset_we0;
reg   [5:0] t1_V_reg_305;
wire    ap_CS_fsm_state9;
reg   [23:0] phi_mul38_reg_316;
reg   [5:0] t1_V_1_reg_347;
reg   [32:0] RowBeginByteIndex2_1_reg_358;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln139_fu_957_p1;
wire   [63:0] add_ptr547_sum_cast_fu_1035_p1;
wire  signed [63:0] p_cast_cast_fu_1005_p1;
reg   [31:0] RowBeginByteIndex_fu_146;
reg   [31:0] input_mmcpy_offset_fu_150;
wire   [31:0] input_mmcpy_offset_1_fu_1039_p2;
reg   [31:0] RowBeginByteIndex2_fu_154;
wire   [0:0] shiftbit_V_fu_382_p2;
wire   [8:0] r_2_fu_396_p2;
wire   [9:0] zext_ln1347_1_fu_402_p1;
wire   [8:0] r_3_fu_428_p2;
wire   [9:0] zext_ln215_fu_433_p1;
wire   [6:0] zext_ln1347_3_fu_458_p1;
wire   [6:0] add_ln1347_fu_462_p2;
wire  signed [10:0] sext_ln1347_1_fu_468_p1;
wire   [6:0] zext_ln1347_2_fu_491_p1;
wire   [6:0] add_ln1347_1_fu_495_p2;
wire  signed [10:0] sext_ln1347_fu_501_p1;
wire   [10:0] zext_ln878_1_fu_522_p1;
wire   [0:0] icmp_ln878_1_fu_526_p2;
wire   [5:0] trunc_ln87_fu_531_p1;
wire   [5:0] select_ln87_fu_535_p3;
wire   [5:0] trunc_ln213_3_fu_542_p1;
wire   [10:0] zext_ln878_fu_558_p1;
wire   [0:0] icmp_ln878_fu_562_p2;
wire   [5:0] trunc_ln75_fu_567_p1;
wire   [5:0] select_ln75_fu_571_p3;
wire   [5:0] trunc_ln213_1_fu_578_p1;
wire   [8:0] ret_15_fu_595_p0;
wire   [8:0] ret_15_fu_595_p1;
wire   [28:0] zext_ln1346_fu_614_p1;
(* use_dsp48 = "no" *) wire   [28:0] ret_16_fu_617_p2;
wire   [5:0] ret_17_fu_635_p0;
wire   [5:0] ret_17_fu_635_p1;
wire   [11:0] zext_ln208_fu_629_p1;
wire   [11:0] ret_17_fu_635_p2;
wire   [5:0] empty_fu_724_p1;
wire   [29:0] zext_ln122_fu_704_p1;
wire   [0:0] trunc_ln125_fu_720_p1;
wire   [5:0] trunc_ln122_fu_753_p1;
wire   [14:0] add_ln125_1_fu_776_p2;
wire   [29:0] zext_ln125_fu_781_p1;
wire   [0:0] trunc_ln125_1_fu_772_p1;
wire   [0:0] xor_ln301_1_fu_790_p2;
wire   [0:0] xor_ln301_2_fu_795_p2;
wire   [11:0] zext_ln1346_3_fu_806_p1;
wire   [11:0] ret_18_fu_810_p2;
wire   [29:0] InOffset_fu_785_p2;
wire   [0:0] xor_ln101_fu_847_p2;
wire  signed [31:0] sext_ln691_fu_876_p0;
wire  signed [31:0] add_ln691_1_fu_880_p0;
wire  signed [31:0] empty_92_fu_885_p0;
wire   [5:0] empty_92_fu_885_p1;
wire   [10:0] zext_ln1347_4_fu_894_p1;
wire   [10:0] ret_8_fu_897_p2;
wire   [10:0] zext_ln1347_5_fu_906_p1;
wire   [10:0] ret_9_fu_909_p2;
wire   [31:0] zext_ln148_fu_918_p1;
wire   [31:0] zext_ln149_fu_921_p1;
wire  signed [31:0] sext_ln146_fu_902_p1;
wire  signed [31:0] sext_ln147_fu_914_p1;
wire   [5:0] trunc_ln139_fu_948_p1;
wire   [30:0] p_cast1_fu_979_p3;
wire   [63:0] p_cast12_cast_fu_986_p1;
wire   [63:0] empty_93_fu_990_p2;
wire   [61:0] p_cast_fu_995_p4;
wire   [11:0] loop_index_cast_cast_fu_1026_p1;
wire   [17:0] grp_fu_1055_p0;
wire   [10:0] grp_fu_1055_p1;
reg   [20:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [28:0] grp_fu_1055_p00;
wire   [28:0] grp_fu_1055_p10;
wire   [17:0] ret_15_fu_595_p00;
wire   [17:0] ret_15_fu_595_p10;
wire   [11:0] ret_17_fu_635_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

YOLO2_FPGA_input_pixel_load_RowIntNum #(
    .DataWidth( 11 ),
    .AddressRange( 106 ),
    .AddressWidth( 7 ))
RowIntNum_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RowIntNum_address0),
    .ce0(RowIntNum_ce0),
    .we0(RowIntNum_we0),
    .d0(RowIntNum_d0),
    .q0(RowIntNum_q0)
);

YOLO2_FPGA_input_pixel_load_RowOffset #(
    .DataWidth( 29 ),
    .AddressRange( 106 ),
    .AddressWidth( 7 ))
RowOffset_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RowOffset_address0),
    .ce0(RowOffset_ce0),
    .we0(RowOffset_we0),
    .d0(trunc_ln_reg_1372),
    .q0(RowOffset_q0)
);

YOLO2_FPGA_mul_9ns_9ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9ns_9ns_18_1_1_U9(
    .din0(ret_15_fu_595_p0),
    .din1(ret_15_fu_595_p1),
    .dout(ret_15_fu_595_p2)
);

YOLO2_FPGA_mul_6ns_6ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mul_6ns_6ns_12_1_1_U10(
    .din0(ret_17_fu_635_p0),
    .din1(ret_17_fu_635_p1),
    .dout(ret_17_fu_635_p2)
);

YOLO2_FPGA_mul_mul_18ns_11ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 29 ))
mul_mul_18ns_11ns_29_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1055_p0),
    .din1(grp_fu_1055_p1),
    .ce(1'b1),
    .dout(grp_fu_1055_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln121_fu_699_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln121_fu_699_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_868_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (icmp_ln878_2_reg_1258 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        RowBeginByteIndex2_1_reg_358 <= sext_ln691_fu_876_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        RowBeginByteIndex2_1_reg_358 <= add_ln143_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        RowBeginByteIndex2_fu_154 <= 32'd0;
    end else if (((icmp_ln139_fu_952_p2 == 1'd1) & (cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        RowBeginByteIndex2_fu_154 <= add_ln691_1_reg_1395;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        RowBeginByteIndex_1_reg_327 <= add_ln133_fu_841_p2;
    end else if (((icmp_ln121_fu_699_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        RowBeginByteIndex_1_reg_327 <= trunc_ln691_fu_711_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        RowBeginByteIndex_fu_146 <= 32'd0;
    end else if (((cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        RowBeginByteIndex_fu_146 <= add_ln691_reg_1308;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        input_mmcpy_offset_fu_150 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input_mmcpy_offset_fu_150 <= input_mmcpy_offset_1_fu_1039_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_index_cast_reg_368 <= 11'd0;
    end else if (((exitcond1_fu_1021_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index_cast_reg_368 <= empty_95_fu_1015_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul38_reg_316 <= add_ln121_reg_1294;
    end else if (((icmp_ln878_2_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul38_reg_316 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ret_10_reg_336 <= add_ln1345_fu_767_p2;
    end else if (((icmp_ln121_fu_699_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ret_10_reg_336 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        t1_V_1_reg_347 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & ((icmp_ln139_fu_952_p2 == 1'd1) | (cmp_i14618_reg_1269 == 1'd0)))) begin
        t1_V_1_reg_347 <= t1_V_3_reg_1382;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t1_V_reg_305 <= t1_V_2_reg_1289;
    end else if (((icmp_ln878_2_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        t1_V_reg_305 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ColNum_V_reg_1237 <= ColNum_V_fu_641_p3;
        RowNum_V_reg_1242 <= RowNum_V_fu_648_p3;
        conv_i8_i131_reg_1248[17 : 0] <= conv_i8_i131_fu_654_p1[17 : 0];
        icmp_ln878_2_reg_1258 <= icmp_ln878_2_fu_660_p2;
        rhs_5_reg_1253[8 : 0] <= rhs_5_fu_657_p1[8 : 0];
        zext_ln1346_1_reg_1227[28 : 0] <= zext_ln1346_1_fu_622_p1[28 : 0];
        zext_ln1346_2_reg_1232[8 : 0] <= zext_ln1346_2_fu_626_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_1456 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        DATA_BUS_addr_read_reg_1465 <= m_axi_DATA_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_974_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        DATA_BUS_addr_reg_1445 <= p_cast_cast_fu_1005_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        IsContinue_reg_1210 <= IsContinue_fu_608_p2;
        TCol_left_V_reg_1177 <= TCol_left_V_fu_552_p3;
        col_len_V_reg_1184 <= col_len_V_fu_582_p2;
        ret_14_reg_1190 <= grp_fu_1055_p2;
        ret_15_reg_1195 <= ret_15_fu_595_p2;
        trunc_ln1346_1_reg_1205 <= trunc_ln1346_1_fu_604_p1;
        trunc_ln1346_reg_1200 <= trunc_ln1346_fu_601_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LowBit_V_reg_1357 <= LowBit_V_fu_800_p2;
        add_ln130_reg_1367 <= add_ln130_fu_825_p2;
        trunc_ln9_reg_1362 <= {{ret_18_fu_810_p2[11:1]}};
        trunc_ln_reg_1372 <= {{InOffset_fu_785_p2[29:1]}};
        zext_ln122_1_reg_1346[6 : 0] <= zext_ln122_1_fu_762_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        RowIntNum_load_reg_1423 <= RowIntNum_q0;
        RowOffset_load_reg_1418 <= RowOffset_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        TRow_top_V_reg_1159 <= TRow_top_V_fu_516_p3;
        add_ln75_reg_1154 <= add_ln75_fu_511_p2;
        icmp_ln886_reg_1139 <= icmp_ln886_fu_483_p2;
        ret_reg_1149 <= ret_fu_505_p2;
        row_len_V_reg_1165 <= row_len_V_fu_546_p2;
        sext_ln1346_reg_1144 <= sext_ln1346_fu_488_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln121_reg_1294 <= add_ln121_fu_694_p2;
        t1_V_2_reg_1289 <= t1_V_2_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_699_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln122_reg_1313 <= add_ln122_fu_728_p2;
        add_ln125_reg_1318 <= add_ln125_fu_733_p2;
        add_ln691_reg_1308 <= add_ln691_fu_715_p2;
        xor_ln301_reg_1323 <= xor_ln301_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_868_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (icmp_ln878_2_reg_1258 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln139_reg_1400 <= add_ln139_fu_889_p2;
        add_ln691_1_reg_1395 <= add_ln691_1_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln87_reg_1134 <= add_ln87_fu_478_p2;
        icmp_ln886_1_reg_1119 <= icmp_ln886_1_fu_450_p2;
        ret_12_reg_1103 <= ret_12_fu_437_p2;
        ret_3_reg_1129 <= ret_3_fu_472_p2;
        sext_ln1346_1_reg_1124 <= sext_ln1346_1_fu_455_p1;
        trunc_ln1347_reg_1109 <= trunc_ln1347_fu_442_p1;
        trunc_ln213_reg_1114 <= trunc_ln213_fu_446_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1021_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ptr547_sum_reg_1460 <= add_ptr547_sum_fu_1030_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ptr547_sum_reg_1460_pp1_iter1_reg <= add_ptr547_sum_reg_1460;
        exitcond1_reg_1456 <= exitcond1_fu_1021_p2;
        exitcond1_reg_1456_pp1_iter1_reg <= exitcond1_reg_1456;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        cmp_i14618_reg_1269 <= cmp_i14618_fu_666_p2;
        trunc_ln1346_2_reg_1279 <= trunc_ln1346_2_fu_676_p1;
        trunc_ln1346_3_reg_1284 <= trunc_ln1346_3_fu_679_p1;
        zext_ln691_reg_1273[5 : 0] <= zext_ln691_fu_672_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln122_reg_1342 <= icmp_ln122_fu_757_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ret_13_reg_1077 <= ret_13_fu_406_p2;
        trunc_ln1347_1_reg_1083 <= trunc_ln1347_1_fu_412_p1;
        trunc_ln213_2_reg_1088 <= trunc_ln213_2_fu_416_p1;
        zext_ln1347_reg_1072[0] <= zext_ln1347_fu_392_p1[0];
        zext_ln781_reg_1067[0] <= zext_ln781_fu_388_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_reg_1258 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        t1_V_3_reg_1382 <= t1_V_3_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln141_reg_1430 <= trunc_ln141_fu_967_p1;
        zext_ln141_reg_1435[10 : 0] <= zext_ln141_fu_971_p1[10 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DATA_BUS_blk_n_AR = m_axi_DATA_BUS_ARREADY;
    end else begin
        DATA_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_1456 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        DATA_BUS_blk_n_R = m_axi_DATA_BUS_RVALID;
    end else begin
        DATA_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        RowBeginByte_ce0 = 1'b1;
    end else begin
        RowBeginByte_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        RowBeginByte_we0 = 1'b1;
    end else begin
        RowBeginByte_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        RowIntNum_address0 = zext_ln139_fu_957_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        RowIntNum_address0 = zext_ln122_1_reg_1346;
    end else begin
        RowIntNum_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        RowIntNum_ce0 = 1'b1;
    end else begin
        RowIntNum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln122_reg_1342 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        RowIntNum_we0 = 1'b1;
    end else begin
        RowIntNum_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        RowOffset_address0 = zext_ln139_fu_957_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        RowOffset_address0 = zext_ln122_1_reg_1346;
    end else begin
        RowOffset_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        RowOffset_ce0 = 1'b1;
    end else begin
        RowOffset_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln122_reg_1342 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        RowOffset_we0 = 1'b1;
    end else begin
        RowOffset_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln122_fu_757_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_1021_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & ((icmp_ln138_fu_868_p2 == 1'd1) | (icmp_ln878_2_reg_1258 == 1'd1))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ((icmp_ln138_fu_868_p2 == 1'd1) | (icmp_ln878_2_reg_1258 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_memcpy_buffer_ce0 = 1'b1;
    end else begin
        input_memcpy_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond1_reg_1456_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_memcpy_buffer_we0 = 1'b1;
    end else begin
        input_memcpy_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_DATA_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        m_axi_DATA_BUS_ARVALID = 1'b1;
    end else begin
        m_axi_DATA_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_1456 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        m_axi_DATA_BUS_RREADY = 1'b1;
    end else begin
        m_axi_DATA_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln878_2_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln121_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((icmp_ln121_fu_699_p2 == 1'd0) & (cmp_i14618_reg_1269 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_757_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_757_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ((icmp_ln138_fu_868_p2 == 1'd1) | (icmp_ln878_2_reg_1258 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ((icmp_ln139_fu_952_p2 == 1'd1) | (cmp_i14618_reg_1269 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln141_fu_974_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_DATA_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond1_fu_1021_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((exitcond1_fu_1021_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ColNum_V_fu_641_p3 = ((IsContinue_reg_1210[0:0] == 1'b1) ? ret_17_fu_635_p2 : zext_ln208_fu_629_p1);

assign InOffset_fu_785_p2 = (zext_ln125_fu_781_p1 + add_ln125_reg_1318);

assign IsContinue_fu_608_p2 = ((Input_w < 9'd27) ? 1'b1 : 1'b0);

assign LowBit_V_fu_800_p2 = (xor_ln301_reg_1323 ^ xor_ln301_2_fu_795_p2);

assign RowBeginByte_address0 = zext_ln122_1_fu_762_p1;

assign RowBeginByte_d0 = LowBit_V_fu_800_p2;

assign RowIntNum_d0 = ((xor_ln101_fu_847_p2[0:0] == 1'b1) ? add_ln130_reg_1367 : trunc_ln9_reg_1362);

assign RowNum_V_fu_648_p3 = ((IsContinue_reg_1210[0:0] == 1'b1) ? 6'd1 : row_len_V_reg_1165);

assign TCol_left_V_fu_552_p3 = ((icmp_ln886_reg_1139[0:0] == 1'b1) ? trunc_ln1347_reg_1109 : 9'd0);

assign TRow_top_V_fu_516_p3 = ((icmp_ln886_1_reg_1119[0:0] == 1'b1) ? trunc_ln1347_1_reg_1083 : 9'd0);

assign add_ln121_fu_694_p2 = (phi_mul38_reg_316 + conv_i8_i131_reg_1248);

assign add_ln122_fu_728_p2 = (RowNum_V_reg_1242 + empty_fu_724_p1);

assign add_ln125_1_fu_776_p2 = (ret_10_reg_336 + zext_ln1346_2_reg_1232);

assign add_ln125_fu_733_p2 = (zext_ln1346_1_reg_1227 + zext_ln122_fu_704_p1);

assign add_ln130_fu_825_p2 = (trunc_ln9_fu_815_p4 + 11'd1);

assign add_ln133_fu_841_p2 = (RowBeginByteIndex_1_reg_327 + 7'd1);

assign add_ln1345_fu_767_p2 = (ret_10_reg_336 + rhs_5_reg_1253);

assign add_ln1347_1_fu_495_p2 = ($signed(zext_ln1347_2_fu_491_p1) + $signed(7'd127));

assign add_ln1347_fu_462_p2 = ($signed(zext_ln1347_3_fu_458_p1) + $signed(7'd127));

assign add_ln139_fu_889_p2 = (RowNum_V_reg_1242 + empty_92_fu_885_p1);

assign add_ln143_fu_1044_p2 = (RowBeginByteIndex2_1_reg_358 + 33'd1);

assign add_ln691_1_fu_880_p0 = RowBeginByteIndex2_fu_154;

assign add_ln691_1_fu_880_p2 = ($signed(add_ln691_1_fu_880_p0) + $signed(zext_ln691_reg_1273));

assign add_ln691_fu_715_p2 = (RowBeginByteIndex_fu_146 + zext_ln691_reg_1273);

assign add_ln75_fu_511_p2 = (trunc_ln213_reg_1114 + TCol);

assign add_ln87_fu_478_p2 = (trunc_ln213_2_reg_1088 + TRow);

assign add_ptr547_sum_cast_fu_1035_p1 = add_ptr547_sum_reg_1460_pp1_iter1_reg;

assign add_ptr547_sum_fu_1030_p2 = (loop_index_cast_cast_fu_1026_p1 + trunc_ln141_reg_1430);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_DATA_BUS_RVALID == 1'b0) & (exitcond1_reg_1456 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_DATA_BUS_RVALID == 1'b0) & (exitcond1_reg_1456 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((m_axi_DATA_BUS_RVALID == 1'b0) & (exitcond1_reg_1456 == 1'd0));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return_0 = zext_ln148_fu_918_p1;

assign ap_return_1 = zext_ln149_fu_921_p1;

assign ap_return_2 = sext_ln146_fu_902_p1;

assign ap_return_3 = sext_ln147_fu_914_p1;

assign cmp_i14618_fu_666_p2 = ((RowNum_V_fu_648_p3 != 6'd0) ? 1'b1 : 1'b0);

assign col_len_V_fu_582_p2 = (select_ln75_fu_571_p3 - trunc_ln213_1_fu_578_p1);

assign conv_i8_i131_fu_654_p1 = IHxIW;

assign empty_92_fu_885_p0 = RowBeginByteIndex2_fu_154;

assign empty_92_fu_885_p1 = empty_92_fu_885_p0[5:0];

assign empty_93_fu_990_p2 = (p_cast12_cast_fu_986_p1 + input_r);

assign empty_95_fu_1015_p2 = (loop_index_cast_reg_368 + 11'd1);

assign empty_fu_724_p1 = RowBeginByteIndex_fu_146[5:0];

assign exitcond1_fu_1021_p2 = ((loop_index_cast_reg_368 == RowIntNum_load_reg_1423) ? 1'b1 : 1'b0);

assign grp_fu_1055_p0 = grp_fu_1055_p00;

assign grp_fu_1055_p00 = IHxIW;

assign grp_fu_1055_p1 = grp_fu_1055_p10;

assign grp_fu_1055_p10 = n;

assign icmp_ln121_fu_699_p2 = ((t1_V_reg_305 == TN_MIN) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_757_p2 = ((trunc_ln122_fu_753_p1 == add_ln122_reg_1313) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_868_p2 = ((t1_V_1_reg_347 == TN_MIN) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_952_p2 = ((trunc_ln139_fu_948_p1 == add_ln139_reg_1400) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_974_p2 = ((RowIntNum_load_reg_1423 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_526_p2 = (($signed(ret_3_reg_1129) < $signed(zext_ln878_1_fu_522_p1)) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_660_p2 = ((TN_MIN == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_562_p2 = (($signed(ret_reg_1149) < $signed(zext_ln878_fu_558_p1)) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_450_p2 = (($signed(ret_13_reg_1077) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_483_p2 = (($signed(ret_12_reg_1103) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign input_memcpy_buffer_address0 = add_ptr547_sum_cast_fu_1035_p1;

assign input_memcpy_buffer_d0 = DATA_BUS_addr_read_reg_1465;

assign input_mmcpy_offset_1_fu_1039_p2 = (zext_ln141_reg_1435 + input_mmcpy_offset_fu_150);

assign loop_index_cast_cast_fu_1026_p1 = loop_index_cast_reg_368;

assign m_axi_DATA_BUS_ARADDR = DATA_BUS_addr_reg_1445;

assign m_axi_DATA_BUS_ARBURST = 2'd0;

assign m_axi_DATA_BUS_ARCACHE = 4'd0;

assign m_axi_DATA_BUS_ARID = 1'd0;

assign m_axi_DATA_BUS_ARLEN = zext_ln141_reg_1435;

assign m_axi_DATA_BUS_ARLOCK = 2'd0;

assign m_axi_DATA_BUS_ARPROT = 3'd0;

assign m_axi_DATA_BUS_ARQOS = 4'd0;

assign m_axi_DATA_BUS_ARREGION = 4'd0;

assign m_axi_DATA_BUS_ARSIZE = 3'd0;

assign m_axi_DATA_BUS_ARUSER = 1'd0;

assign m_axi_DATA_BUS_AWADDR = 64'd0;

assign m_axi_DATA_BUS_AWBURST = 2'd0;

assign m_axi_DATA_BUS_AWCACHE = 4'd0;

assign m_axi_DATA_BUS_AWID = 1'd0;

assign m_axi_DATA_BUS_AWLEN = 32'd0;

assign m_axi_DATA_BUS_AWLOCK = 2'd0;

assign m_axi_DATA_BUS_AWPROT = 3'd0;

assign m_axi_DATA_BUS_AWQOS = 4'd0;

assign m_axi_DATA_BUS_AWREGION = 4'd0;

assign m_axi_DATA_BUS_AWSIZE = 3'd0;

assign m_axi_DATA_BUS_AWUSER = 1'd0;

assign m_axi_DATA_BUS_AWVALID = 1'b0;

assign m_axi_DATA_BUS_BREADY = 1'b0;

assign m_axi_DATA_BUS_WDATA = 32'd0;

assign m_axi_DATA_BUS_WID = 1'd0;

assign m_axi_DATA_BUS_WLAST = 1'b0;

assign m_axi_DATA_BUS_WSTRB = 4'd0;

assign m_axi_DATA_BUS_WUSER = 1'd0;

assign m_axi_DATA_BUS_WVALID = 1'b0;

assign p_cast12_cast_fu_986_p1 = p_cast1_fu_979_p3;

assign p_cast1_fu_979_p3 = {{RowOffset_load_reg_1418}, {2'd0}};

assign p_cast_cast_fu_1005_p1 = $signed(p_cast_fu_995_p4);

assign p_cast_fu_995_p4 = {{empty_93_fu_990_p2[63:2]}};

assign r_2_fu_396_p2 = r << zext_ln781_fu_388_p1;

assign r_3_fu_428_p2 = c << zext_ln781_reg_1067;

assign ret_12_fu_437_p2 = (zext_ln215_fu_433_p1 - zext_ln1347_reg_1072);

assign ret_13_fu_406_p2 = (zext_ln1347_1_fu_402_p1 - zext_ln1347_fu_392_p1);

assign ret_15_fu_595_p0 = ret_15_fu_595_p00;

assign ret_15_fu_595_p00 = TRow_top_V_reg_1159;

assign ret_15_fu_595_p1 = ret_15_fu_595_p10;

assign ret_15_fu_595_p10 = Input_w;

assign ret_16_fu_617_p2 = (ret_14_reg_1190 + zext_ln1346_fu_614_p1);

assign ret_17_fu_635_p0 = ret_17_fu_635_p00;

assign ret_17_fu_635_p00 = row_len_V_reg_1165;

assign ret_17_fu_635_p1 = zext_ln208_fu_629_p1;

assign ret_18_fu_810_p2 = (ColNum_V_reg_1237 + zext_ln1346_3_fu_806_p1);

assign ret_3_fu_472_p2 = ($signed(sext_ln1347_1_fu_468_p1) + $signed(sext_ln1346_1_fu_455_p1));

assign ret_8_fu_897_p2 = ($signed(zext_ln1347_4_fu_894_p1) - $signed(sext_ln1346_1_reg_1124));

assign ret_9_fu_909_p2 = ($signed(zext_ln1347_5_fu_906_p1) - $signed(sext_ln1346_reg_1144));

assign ret_fu_505_p2 = ($signed(sext_ln1347_fu_501_p1) + $signed(sext_ln1346_fu_488_p1));

assign rhs_5_fu_657_p1 = Input_w;

assign row_len_V_fu_546_p2 = (select_ln87_fu_535_p3 - trunc_ln213_3_fu_542_p1);

assign select_ln75_fu_571_p3 = ((icmp_ln878_fu_562_p2[0:0] == 1'b1) ? add_ln75_reg_1154 : trunc_ln75_fu_567_p1);

assign select_ln87_fu_535_p3 = ((icmp_ln878_1_fu_526_p2[0:0] == 1'b1) ? add_ln87_reg_1134 : trunc_ln87_fu_531_p1);

assign sext_ln1346_1_fu_455_p1 = ret_13_reg_1077;

assign sext_ln1346_fu_488_p1 = ret_12_reg_1103;

assign sext_ln1347_1_fu_468_p1 = $signed(add_ln1347_fu_462_p2);

assign sext_ln1347_fu_501_p1 = $signed(add_ln1347_1_fu_495_p2);

assign sext_ln146_fu_902_p1 = $signed(ret_8_fu_897_p2);

assign sext_ln147_fu_914_p1 = $signed(ret_9_fu_909_p2);

assign sext_ln691_fu_876_p0 = RowBeginByteIndex2_fu_154;

assign sext_ln691_fu_876_p1 = sext_ln691_fu_876_p0;

assign shiftbit_V_fu_382_p2 = ((Kernel_stride != 2'd1) ? 1'b1 : 1'b0);

assign t1_V_2_fu_688_p2 = (t1_V_reg_305 + 6'd1);

assign t1_V_3_fu_862_p2 = (t1_V_1_reg_347 + 6'd1);

assign trunc_ln122_fu_753_p1 = RowBeginByteIndex_1_reg_327[5:0];

assign trunc_ln125_1_fu_772_p1 = ret_10_reg_336[0:0];

assign trunc_ln125_fu_720_p1 = phi_mul38_reg_316[0:0];

assign trunc_ln1346_1_fu_604_p1 = ret_15_fu_595_p2[0:0];

assign trunc_ln1346_2_fu_676_p1 = TCol_left_V_reg_1177[0:0];

assign trunc_ln1346_3_fu_679_p1 = ColNum_V_fu_641_p3[0:0];

assign trunc_ln1346_fu_601_p1 = grp_fu_1055_p2[0:0];

assign trunc_ln1347_1_fu_412_p1 = ret_13_fu_406_p2[8:0];

assign trunc_ln1347_fu_442_p1 = ret_12_fu_437_p2[8:0];

assign trunc_ln139_fu_948_p1 = RowBeginByteIndex2_1_reg_358[5:0];

assign trunc_ln141_fu_967_p1 = input_mmcpy_offset_fu_150[11:0];

assign trunc_ln213_1_fu_578_p1 = TCol_left_V_fu_552_p3[5:0];

assign trunc_ln213_2_fu_416_p1 = ret_13_fu_406_p2[5:0];

assign trunc_ln213_3_fu_542_p1 = TRow_top_V_fu_516_p3[5:0];

assign trunc_ln213_fu_446_p1 = ret_12_fu_437_p2[5:0];

assign trunc_ln691_fu_711_p1 = RowBeginByteIndex_fu_146[6:0];

assign trunc_ln75_fu_567_p1 = Input_w[5:0];

assign trunc_ln87_fu_531_p1 = Input_h[5:0];

assign trunc_ln9_fu_815_p4 = {{ret_18_fu_810_p2[11:1]}};

assign xor_ln101_fu_847_p2 = (trunc_ln1346_3_reg_1284 ^ LowBit_V_reg_1357);

assign xor_ln301_1_fu_790_p2 = (trunc_ln1346_1_reg_1205 ^ trunc_ln125_1_fu_772_p1);

assign xor_ln301_2_fu_795_p2 = (xor_ln301_1_fu_790_p2 ^ trunc_ln1346_reg_1200);

assign xor_ln301_fu_738_p2 = (trunc_ln1346_2_reg_1279 ^ trunc_ln125_fu_720_p1);

assign zext_ln122_1_fu_762_p1 = RowBeginByteIndex_1_reg_327;

assign zext_ln122_fu_704_p1 = phi_mul38_reg_316;

assign zext_ln125_fu_781_p1 = add_ln125_1_fu_776_p2;

assign zext_ln1346_1_fu_622_p1 = ret_16_fu_617_p2;

assign zext_ln1346_2_fu_626_p1 = TCol_left_V_reg_1177;

assign zext_ln1346_3_fu_806_p1 = LowBit_V_fu_800_p2;

assign zext_ln1346_fu_614_p1 = ret_15_reg_1195;

assign zext_ln1347_1_fu_402_p1 = r_2_fu_396_p2;

assign zext_ln1347_2_fu_491_p1 = TCol;

assign zext_ln1347_3_fu_458_p1 = TRow;

assign zext_ln1347_4_fu_894_p1 = TRow_top_V_reg_1159;

assign zext_ln1347_5_fu_906_p1 = TCol_left_V_reg_1177;

assign zext_ln1347_fu_392_p1 = Padding;

assign zext_ln139_fu_957_p1 = RowBeginByteIndex2_1_reg_358;

assign zext_ln141_fu_971_p1 = RowIntNum_load_reg_1423;

assign zext_ln148_fu_918_p1 = row_len_V_reg_1165;

assign zext_ln149_fu_921_p1 = col_len_V_reg_1184;

assign zext_ln208_fu_629_p1 = col_len_V_reg_1184;

assign zext_ln215_fu_433_p1 = r_3_fu_428_p2;

assign zext_ln691_fu_672_p1 = RowNum_V_fu_648_p3;

assign zext_ln781_fu_388_p1 = shiftbit_V_fu_382_p2;

assign zext_ln878_1_fu_522_p1 = Input_h;

assign zext_ln878_fu_558_p1 = Input_w;

always @ (posedge ap_clk) begin
    zext_ln781_reg_1067[8:1] <= 8'b00000000;
    zext_ln1347_reg_1072[9:1] <= 9'b000000000;
    zext_ln1346_1_reg_1227[29] <= 1'b0;
    zext_ln1346_2_reg_1232[14:9] <= 6'b000000;
    conv_i8_i131_reg_1248[23:18] <= 6'b000000;
    rhs_5_reg_1253[14:9] <= 6'b000000;
    zext_ln691_reg_1273[31:6] <= 26'b00000000000000000000000000;
    zext_ln122_1_reg_1346[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln141_reg_1435[31:11] <= 21'b000000000000000000000;
end

endmodule //YOLO2_FPGA_input_pixel_load
