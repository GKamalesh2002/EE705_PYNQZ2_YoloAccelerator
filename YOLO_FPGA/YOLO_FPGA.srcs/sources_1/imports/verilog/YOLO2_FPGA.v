// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="YOLO2_FPGA_YOLO2_FPGA,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=5.200000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.672000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=202,HLS_SYN_DSP=0,HLS_SYN_FF=35411,HLS_SYN_LUT=43239,HLS_VERSION=2020_2}" *)

module YOLO2_FPGA (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_BUS_AWVALID,
        m_axi_DATA_BUS_AWREADY,
        m_axi_DATA_BUS_AWADDR,
        m_axi_DATA_BUS_AWID,
        m_axi_DATA_BUS_AWLEN,
        m_axi_DATA_BUS_AWSIZE,
        m_axi_DATA_BUS_AWBURST,
        m_axi_DATA_BUS_AWLOCK,
        m_axi_DATA_BUS_AWCACHE,
        m_axi_DATA_BUS_AWPROT,
        m_axi_DATA_BUS_AWQOS,
        m_axi_DATA_BUS_AWREGION,
        m_axi_DATA_BUS_AWUSER,
        m_axi_DATA_BUS_WVALID,
        m_axi_DATA_BUS_WREADY,
        m_axi_DATA_BUS_WDATA,
        m_axi_DATA_BUS_WSTRB,
        m_axi_DATA_BUS_WLAST,
        m_axi_DATA_BUS_WID,
        m_axi_DATA_BUS_WUSER,
        m_axi_DATA_BUS_ARVALID,
        m_axi_DATA_BUS_ARREADY,
        m_axi_DATA_BUS_ARADDR,
        m_axi_DATA_BUS_ARID,
        m_axi_DATA_BUS_ARLEN,
        m_axi_DATA_BUS_ARSIZE,
        m_axi_DATA_BUS_ARBURST,
        m_axi_DATA_BUS_ARLOCK,
        m_axi_DATA_BUS_ARCACHE,
        m_axi_DATA_BUS_ARPROT,
        m_axi_DATA_BUS_ARQOS,
        m_axi_DATA_BUS_ARREGION,
        m_axi_DATA_BUS_ARUSER,
        m_axi_DATA_BUS_RVALID,
        m_axi_DATA_BUS_RREADY,
        m_axi_DATA_BUS_RDATA,
        m_axi_DATA_BUS_RLAST,
        m_axi_DATA_BUS_RID,
        m_axi_DATA_BUS_RUSER,
        m_axi_DATA_BUS_RRESP,
        m_axi_DATA_BUS_BVALID,
        m_axi_DATA_BUS_BREADY,
        m_axi_DATA_BUS_BRESP,
        m_axi_DATA_BUS_BID,
        m_axi_DATA_BUS_BUSER,
        m_axi_DATA_BUS2_AWVALID,
        m_axi_DATA_BUS2_AWREADY,
        m_axi_DATA_BUS2_AWADDR,
        m_axi_DATA_BUS2_AWID,
        m_axi_DATA_BUS2_AWLEN,
        m_axi_DATA_BUS2_AWSIZE,
        m_axi_DATA_BUS2_AWBURST,
        m_axi_DATA_BUS2_AWLOCK,
        m_axi_DATA_BUS2_AWCACHE,
        m_axi_DATA_BUS2_AWPROT,
        m_axi_DATA_BUS2_AWQOS,
        m_axi_DATA_BUS2_AWREGION,
        m_axi_DATA_BUS2_AWUSER,
        m_axi_DATA_BUS2_WVALID,
        m_axi_DATA_BUS2_WREADY,
        m_axi_DATA_BUS2_WDATA,
        m_axi_DATA_BUS2_WSTRB,
        m_axi_DATA_BUS2_WLAST,
        m_axi_DATA_BUS2_WID,
        m_axi_DATA_BUS2_WUSER,
        m_axi_DATA_BUS2_ARVALID,
        m_axi_DATA_BUS2_ARREADY,
        m_axi_DATA_BUS2_ARADDR,
        m_axi_DATA_BUS2_ARID,
        m_axi_DATA_BUS2_ARLEN,
        m_axi_DATA_BUS2_ARSIZE,
        m_axi_DATA_BUS2_ARBURST,
        m_axi_DATA_BUS2_ARLOCK,
        m_axi_DATA_BUS2_ARCACHE,
        m_axi_DATA_BUS2_ARPROT,
        m_axi_DATA_BUS2_ARQOS,
        m_axi_DATA_BUS2_ARREGION,
        m_axi_DATA_BUS2_ARUSER,
        m_axi_DATA_BUS2_RVALID,
        m_axi_DATA_BUS2_RREADY,
        m_axi_DATA_BUS2_RDATA,
        m_axi_DATA_BUS2_RLAST,
        m_axi_DATA_BUS2_RID,
        m_axi_DATA_BUS2_RUSER,
        m_axi_DATA_BUS2_RRESP,
        m_axi_DATA_BUS2_BVALID,
        m_axi_DATA_BUS2_BREADY,
        m_axi_DATA_BUS2_BRESP,
        m_axi_DATA_BUS2_BID,
        m_axi_DATA_BUS2_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage0 = 65'd9007199254740992;
parameter    ap_ST_fsm_state57 = 65'd18014398509481984;
parameter    ap_ST_fsm_pp1_stage0 = 65'd36028797018963968;
parameter    ap_ST_fsm_state61 = 65'd72057594037927936;
parameter    ap_ST_fsm_state62 = 65'd144115188075855872;
parameter    ap_ST_fsm_state63 = 65'd288230376151711744;
parameter    ap_ST_fsm_state64 = 65'd576460752303423488;
parameter    ap_ST_fsm_state65 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state66 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state67 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state68 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state69 = 65'd18446744073709551616;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_USER_VALUE = 0;
parameter    C_M_AXI_DATA_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BUS2_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS2_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_BUS2_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BUS2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS2_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS2_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS2_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS2_USER_VALUE = 0;
parameter    C_M_AXI_DATA_BUS2_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_BUS2_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_BUS2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_BUS_AWVALID;
input   m_axi_DATA_BUS_AWREADY;
output  [C_M_AXI_DATA_BUS_ADDR_WIDTH - 1:0] m_axi_DATA_BUS_AWADDR;
output  [C_M_AXI_DATA_BUS_ID_WIDTH - 1:0] m_axi_DATA_BUS_AWID;
output  [7:0] m_axi_DATA_BUS_AWLEN;
output  [2:0] m_axi_DATA_BUS_AWSIZE;
output  [1:0] m_axi_DATA_BUS_AWBURST;
output  [1:0] m_axi_DATA_BUS_AWLOCK;
output  [3:0] m_axi_DATA_BUS_AWCACHE;
output  [2:0] m_axi_DATA_BUS_AWPROT;
output  [3:0] m_axi_DATA_BUS_AWQOS;
output  [3:0] m_axi_DATA_BUS_AWREGION;
output  [C_M_AXI_DATA_BUS_AWUSER_WIDTH - 1:0] m_axi_DATA_BUS_AWUSER;
output   m_axi_DATA_BUS_WVALID;
input   m_axi_DATA_BUS_WREADY;
output  [C_M_AXI_DATA_BUS_DATA_WIDTH - 1:0] m_axi_DATA_BUS_WDATA;
output  [C_M_AXI_DATA_BUS_WSTRB_WIDTH - 1:0] m_axi_DATA_BUS_WSTRB;
output   m_axi_DATA_BUS_WLAST;
output  [C_M_AXI_DATA_BUS_ID_WIDTH - 1:0] m_axi_DATA_BUS_WID;
output  [C_M_AXI_DATA_BUS_WUSER_WIDTH - 1:0] m_axi_DATA_BUS_WUSER;
output   m_axi_DATA_BUS_ARVALID;
input   m_axi_DATA_BUS_ARREADY;
output  [C_M_AXI_DATA_BUS_ADDR_WIDTH - 1:0] m_axi_DATA_BUS_ARADDR;
output  [C_M_AXI_DATA_BUS_ID_WIDTH - 1:0] m_axi_DATA_BUS_ARID;
output  [7:0] m_axi_DATA_BUS_ARLEN;
output  [2:0] m_axi_DATA_BUS_ARSIZE;
output  [1:0] m_axi_DATA_BUS_ARBURST;
output  [1:0] m_axi_DATA_BUS_ARLOCK;
output  [3:0] m_axi_DATA_BUS_ARCACHE;
output  [2:0] m_axi_DATA_BUS_ARPROT;
output  [3:0] m_axi_DATA_BUS_ARQOS;
output  [3:0] m_axi_DATA_BUS_ARREGION;
output  [C_M_AXI_DATA_BUS_ARUSER_WIDTH - 1:0] m_axi_DATA_BUS_ARUSER;
input   m_axi_DATA_BUS_RVALID;
output   m_axi_DATA_BUS_RREADY;
input  [C_M_AXI_DATA_BUS_DATA_WIDTH - 1:0] m_axi_DATA_BUS_RDATA;
input   m_axi_DATA_BUS_RLAST;
input  [C_M_AXI_DATA_BUS_ID_WIDTH - 1:0] m_axi_DATA_BUS_RID;
input  [C_M_AXI_DATA_BUS_RUSER_WIDTH - 1:0] m_axi_DATA_BUS_RUSER;
input  [1:0] m_axi_DATA_BUS_RRESP;
input   m_axi_DATA_BUS_BVALID;
output   m_axi_DATA_BUS_BREADY;
input  [1:0] m_axi_DATA_BUS_BRESP;
input  [C_M_AXI_DATA_BUS_ID_WIDTH - 1:0] m_axi_DATA_BUS_BID;
input  [C_M_AXI_DATA_BUS_BUSER_WIDTH - 1:0] m_axi_DATA_BUS_BUSER;
output   m_axi_DATA_BUS2_AWVALID;
input   m_axi_DATA_BUS2_AWREADY;
output  [C_M_AXI_DATA_BUS2_ADDR_WIDTH - 1:0] m_axi_DATA_BUS2_AWADDR;
output  [C_M_AXI_DATA_BUS2_ID_WIDTH - 1:0] m_axi_DATA_BUS2_AWID;
output  [7:0] m_axi_DATA_BUS2_AWLEN;
output  [2:0] m_axi_DATA_BUS2_AWSIZE;
output  [1:0] m_axi_DATA_BUS2_AWBURST;
output  [1:0] m_axi_DATA_BUS2_AWLOCK;
output  [3:0] m_axi_DATA_BUS2_AWCACHE;
output  [2:0] m_axi_DATA_BUS2_AWPROT;
output  [3:0] m_axi_DATA_BUS2_AWQOS;
output  [3:0] m_axi_DATA_BUS2_AWREGION;
output  [C_M_AXI_DATA_BUS2_AWUSER_WIDTH - 1:0] m_axi_DATA_BUS2_AWUSER;
output   m_axi_DATA_BUS2_WVALID;
input   m_axi_DATA_BUS2_WREADY;
output  [C_M_AXI_DATA_BUS2_DATA_WIDTH - 1:0] m_axi_DATA_BUS2_WDATA;
output  [C_M_AXI_DATA_BUS2_WSTRB_WIDTH - 1:0] m_axi_DATA_BUS2_WSTRB;
output   m_axi_DATA_BUS2_WLAST;
output  [C_M_AXI_DATA_BUS2_ID_WIDTH - 1:0] m_axi_DATA_BUS2_WID;
output  [C_M_AXI_DATA_BUS2_WUSER_WIDTH - 1:0] m_axi_DATA_BUS2_WUSER;
output   m_axi_DATA_BUS2_ARVALID;
input   m_axi_DATA_BUS2_ARREADY;
output  [C_M_AXI_DATA_BUS2_ADDR_WIDTH - 1:0] m_axi_DATA_BUS2_ARADDR;
output  [C_M_AXI_DATA_BUS2_ID_WIDTH - 1:0] m_axi_DATA_BUS2_ARID;
output  [7:0] m_axi_DATA_BUS2_ARLEN;
output  [2:0] m_axi_DATA_BUS2_ARSIZE;
output  [1:0] m_axi_DATA_BUS2_ARBURST;
output  [1:0] m_axi_DATA_BUS2_ARLOCK;
output  [3:0] m_axi_DATA_BUS2_ARCACHE;
output  [2:0] m_axi_DATA_BUS2_ARPROT;
output  [3:0] m_axi_DATA_BUS2_ARQOS;
output  [3:0] m_axi_DATA_BUS2_ARREGION;
output  [C_M_AXI_DATA_BUS2_ARUSER_WIDTH - 1:0] m_axi_DATA_BUS2_ARUSER;
input   m_axi_DATA_BUS2_RVALID;
output   m_axi_DATA_BUS2_RREADY;
input  [C_M_AXI_DATA_BUS2_DATA_WIDTH - 1:0] m_axi_DATA_BUS2_RDATA;
input   m_axi_DATA_BUS2_RLAST;
input  [C_M_AXI_DATA_BUS2_ID_WIDTH - 1:0] m_axi_DATA_BUS2_RID;
input  [C_M_AXI_DATA_BUS2_RUSER_WIDTH - 1:0] m_axi_DATA_BUS2_RUSER;
input  [1:0] m_axi_DATA_BUS2_RRESP;
input   m_axi_DATA_BUS2_BVALID;
output   m_axi_DATA_BUS2_BREADY;
input  [1:0] m_axi_DATA_BUS2_BRESP;
input  [C_M_AXI_DATA_BUS2_ID_WIDTH - 1:0] m_axi_DATA_BUS2_BID;
input  [C_M_AXI_DATA_BUS2_BUSER_WIDTH - 1:0] m_axi_DATA_BUS2_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] Input_r;
reg   [63:0] Input_r_0_data_reg;
reg    Input_r_0_vld_reg;
reg    Input_r_0_ack_out;
wire   [63:0] Output_r;
reg   [63:0] Output_r_0_data_reg;
reg    Output_r_0_vld_reg;
reg    Output_r_0_ack_out;
wire   [63:0] Weight;
reg   [63:0] Weight_0_data_reg;
reg    Weight_0_vld_reg;
reg    Weight_0_ack_out;
wire   [63:0] Beta;
reg   [63:0] Beta_0_data_reg;
reg    Beta_0_vld_reg;
reg    Beta_0_ack_out;
wire   [31:0] InFM_num;
reg   [31:0] InFM_num_0_data_reg;
reg    InFM_num_0_vld_reg;
reg    InFM_num_0_ack_out;
wire   [31:0] OutFM_num;
reg   [31:0] OutFM_num_0_data_reg;
reg    OutFM_num_0_vld_reg;
reg    OutFM_num_0_ack_out;
wire   [31:0] Kernel_size;
reg   [31:0] Kernel_size_0_data_reg;
reg    Kernel_size_0_vld_reg;
reg    Kernel_size_0_ack_out;
wire   [31:0] Kernel_stride;
reg   [31:0] Kernel_stride_0_data_reg;
reg    Kernel_stride_0_vld_reg;
reg    Kernel_stride_0_ack_out;
wire   [31:0] Input_w;
reg   [31:0] Input_w_0_data_reg;
reg    Input_w_0_vld_reg;
reg    Input_w_0_ack_out;
wire   [31:0] Input_h;
reg   [31:0] Input_h_0_data_reg;
reg    Input_h_0_vld_reg;
reg    Input_h_0_ack_out;
wire   [31:0] Padding;
reg   [31:0] Padding_0_data_reg;
reg    Padding_0_vld_reg;
reg    Padding_0_ack_out;
wire    IsNL;
reg    IsNL_0_data_reg;
reg    IsNL_0_vld_reg;
reg    IsNL_0_ack_out;
wire    IsBN;
wire   [31:0] TM;
reg   [31:0] TM_0_data_reg;
reg    TM_0_vld_reg;
reg    TM_0_ack_out;
wire   [31:0] TN;
reg   [31:0] TN_0_data_reg;
reg    TN_0_vld_reg;
reg    TN_0_ack_out;
wire   [31:0] TR;
reg   [31:0] TR_0_data_reg;
reg    TR_0_vld_reg;
reg    TR_0_ack_out;
wire   [31:0] TC;
reg   [31:0] TC_0_data_reg;
reg    TC_0_vld_reg;
reg    TC_0_ack_out;
wire   [31:0] mLoops;
reg   [31:0] mLoops_0_data_reg;
reg    mLoops_0_vld_reg;
reg    mLoops_0_ack_out;
wire   [31:0] nLoops;
reg   [31:0] nLoops_0_data_reg;
reg    nLoops_0_vld_reg;
reg    nLoops_0_ack_out;
wire   [31:0] rLoops;
reg   [31:0] rLoops_0_data_reg;
reg    rLoops_0_vld_reg;
reg    rLoops_0_ack_out;
wire   [31:0] cLoops;
reg   [31:0] cLoops_0_data_reg;
reg    cLoops_0_vld_reg;
reg    cLoops_0_ack_out;
wire   [31:0] LayerType;
reg   [31:0] LayerType_0_data_reg;
reg    LayerType_0_vld_reg;
reg    LayerType_0_ack_out;
wire   [31:0] InputQ;
reg   [31:0] InputQ_0_data_reg;
reg    InputQ_0_vld_reg;
reg    InputQ_0_ack_out;
wire   [31:0] OutputQ;
reg   [31:0] OutputQ_0_data_reg;
reg    OutputQ_0_vld_reg;
reg    OutputQ_0_ack_out;
wire   [31:0] WeightQ;
reg   [31:0] WeightQ_0_data_reg;
reg    WeightQ_0_vld_reg;
reg    WeightQ_0_ack_out;
wire   [31:0] BetaQ;
reg   [31:0] BetaQ_0_data_reg;
reg    BetaQ_0_vld_reg;
reg    BetaQ_0_ack_out;
reg   [8:0] beta_tmp_address0;
reg    beta_tmp_ce0;
reg    beta_tmp_we0;
wire   [31:0] beta_tmp_q0;
reg   [9:0] beta_buffer_address0;
reg    beta_buffer_ce0;
reg    beta_buffer_we0;
wire   [15:0] beta_buffer_q0;
wire   [9:0] beta_buffer_address1;
reg    beta_buffer_ce1;
reg    beta_buffer_we1;
reg   [9:0] output_buffer1_0_address0;
reg    output_buffer1_0_ce0;
reg    output_buffer1_0_we0;
wire   [15:0] output_buffer1_0_q0;
reg   [9:0] output_buffer1_1_address0;
reg    output_buffer1_1_ce0;
reg    output_buffer1_1_we0;
wire   [15:0] output_buffer1_1_q0;
reg   [9:0] output_buffer1_2_address0;
reg    output_buffer1_2_ce0;
reg    output_buffer1_2_we0;
wire   [15:0] output_buffer1_2_q0;
reg   [9:0] output_buffer1_3_address0;
reg    output_buffer1_3_ce0;
reg    output_buffer1_3_we0;
wire   [15:0] output_buffer1_3_q0;
reg   [9:0] output_buffer1_4_address0;
reg    output_buffer1_4_ce0;
reg    output_buffer1_4_we0;
wire   [15:0] output_buffer1_4_q0;
reg   [9:0] output_buffer1_5_address0;
reg    output_buffer1_5_ce0;
reg    output_buffer1_5_we0;
wire   [15:0] output_buffer1_5_q0;
reg   [9:0] output_buffer1_6_address0;
reg    output_buffer1_6_ce0;
reg    output_buffer1_6_we0;
wire   [15:0] output_buffer1_6_q0;
reg   [9:0] output_buffer1_7_address0;
reg    output_buffer1_7_ce0;
reg    output_buffer1_7_we0;
wire   [15:0] output_buffer1_7_q0;
reg   [9:0] output_buffer1_8_address0;
reg    output_buffer1_8_ce0;
reg    output_buffer1_8_we0;
wire   [15:0] output_buffer1_8_q0;
reg   [9:0] output_buffer1_9_address0;
reg    output_buffer1_9_ce0;
reg    output_buffer1_9_we0;
wire   [15:0] output_buffer1_9_q0;
reg   [9:0] output_buffer1_10_address0;
reg    output_buffer1_10_ce0;
reg    output_buffer1_10_we0;
wire   [15:0] output_buffer1_10_q0;
reg   [9:0] output_buffer1_11_address0;
reg    output_buffer1_11_ce0;
reg    output_buffer1_11_we0;
wire   [15:0] output_buffer1_11_q0;
reg   [9:0] output_buffer1_12_address0;
reg    output_buffer1_12_ce0;
reg    output_buffer1_12_we0;
wire   [15:0] output_buffer1_12_q0;
reg   [9:0] output_buffer1_13_address0;
reg    output_buffer1_13_ce0;
reg    output_buffer1_13_we0;
wire   [15:0] output_buffer1_13_q0;
reg   [9:0] output_buffer1_14_address0;
reg    output_buffer1_14_ce0;
reg    output_buffer1_14_we0;
wire   [15:0] output_buffer1_14_q0;
reg   [9:0] output_buffer1_15_address0;
reg    output_buffer1_15_ce0;
reg    output_buffer1_15_we0;
wire   [15:0] output_buffer1_15_q0;
reg   [9:0] output_buffer1_16_address0;
reg    output_buffer1_16_ce0;
reg    output_buffer1_16_we0;
wire   [15:0] output_buffer1_16_q0;
reg   [9:0] output_buffer1_17_address0;
reg    output_buffer1_17_ce0;
reg    output_buffer1_17_we0;
wire   [15:0] output_buffer1_17_q0;
reg   [9:0] output_buffer1_18_address0;
reg    output_buffer1_18_ce0;
reg    output_buffer1_18_we0;
wire   [15:0] output_buffer1_18_q0;
reg   [9:0] output_buffer1_19_address0;
reg    output_buffer1_19_ce0;
reg    output_buffer1_19_we0;
wire   [15:0] output_buffer1_19_q0;
reg   [9:0] output_buffer1_20_address0;
reg    output_buffer1_20_ce0;
reg    output_buffer1_20_we0;
wire   [15:0] output_buffer1_20_q0;
reg   [9:0] output_buffer1_21_address0;
reg    output_buffer1_21_ce0;
reg    output_buffer1_21_we0;
wire   [15:0] output_buffer1_21_q0;
reg   [9:0] output_buffer1_22_address0;
reg    output_buffer1_22_ce0;
reg    output_buffer1_22_we0;
wire   [15:0] output_buffer1_22_q0;
reg   [9:0] output_buffer1_23_address0;
reg    output_buffer1_23_ce0;
reg    output_buffer1_23_we0;
wire   [15:0] output_buffer1_23_q0;
reg   [9:0] output_buffer1_24_address0;
reg    output_buffer1_24_ce0;
reg    output_buffer1_24_we0;
wire   [15:0] output_buffer1_24_q0;
reg   [9:0] output_buffer1_25_address0;
reg    output_buffer1_25_ce0;
reg    output_buffer1_25_we0;
wire   [15:0] output_buffer1_25_q0;
reg   [9:0] output_buffer1_26_address0;
reg    output_buffer1_26_ce0;
reg    output_buffer1_26_we0;
wire   [15:0] output_buffer1_26_q0;
reg   [9:0] output_buffer1_27_address0;
reg    output_buffer1_27_ce0;
reg    output_buffer1_27_we0;
wire   [15:0] output_buffer1_27_q0;
reg   [9:0] output_buffer1_28_address0;
reg    output_buffer1_28_ce0;
reg    output_buffer1_28_we0;
wire   [15:0] output_buffer1_28_q0;
reg   [9:0] output_buffer1_29_address0;
reg    output_buffer1_29_ce0;
reg    output_buffer1_29_we0;
wire   [15:0] output_buffer1_29_q0;
reg   [9:0] output_buffer1_30_address0;
reg    output_buffer1_30_ce0;
reg    output_buffer1_30_we0;
wire   [15:0] output_buffer1_30_q0;
reg   [9:0] output_buffer1_31_address0;
reg    output_buffer1_31_ce0;
reg    output_buffer1_31_we0;
wire   [15:0] output_buffer1_31_q0;
reg   [9:0] output_buffer_0_address0;
reg    output_buffer_0_ce0;
reg    output_buffer_0_we0;
wire   [15:0] output_buffer_0_q0;
reg   [9:0] output_buffer_1_address0;
reg    output_buffer_1_ce0;
reg    output_buffer_1_we0;
wire   [15:0] output_buffer_1_q0;
reg   [9:0] output_buffer_2_address0;
reg    output_buffer_2_ce0;
reg    output_buffer_2_we0;
wire   [15:0] output_buffer_2_q0;
reg   [9:0] output_buffer_3_address0;
reg    output_buffer_3_ce0;
reg    output_buffer_3_we0;
wire   [15:0] output_buffer_3_q0;
reg   [9:0] output_buffer_4_address0;
reg    output_buffer_4_ce0;
reg    output_buffer_4_we0;
wire   [15:0] output_buffer_4_q0;
reg   [9:0] output_buffer_5_address0;
reg    output_buffer_5_ce0;
reg    output_buffer_5_we0;
wire   [15:0] output_buffer_5_q0;
reg   [9:0] output_buffer_6_address0;
reg    output_buffer_6_ce0;
reg    output_buffer_6_we0;
wire   [15:0] output_buffer_6_q0;
reg   [9:0] output_buffer_7_address0;
reg    output_buffer_7_ce0;
reg    output_buffer_7_we0;
wire   [15:0] output_buffer_7_q0;
reg   [9:0] output_buffer_8_address0;
reg    output_buffer_8_ce0;
reg    output_buffer_8_we0;
wire   [15:0] output_buffer_8_q0;
reg   [9:0] output_buffer_9_address0;
reg    output_buffer_9_ce0;
reg    output_buffer_9_we0;
wire   [15:0] output_buffer_9_q0;
reg   [9:0] output_buffer_10_address0;
reg    output_buffer_10_ce0;
reg    output_buffer_10_we0;
wire   [15:0] output_buffer_10_q0;
reg   [9:0] output_buffer_11_address0;
reg    output_buffer_11_ce0;
reg    output_buffer_11_we0;
wire   [15:0] output_buffer_11_q0;
reg   [9:0] output_buffer_12_address0;
reg    output_buffer_12_ce0;
reg    output_buffer_12_we0;
wire   [15:0] output_buffer_12_q0;
reg   [9:0] output_buffer_13_address0;
reg    output_buffer_13_ce0;
reg    output_buffer_13_we0;
wire   [15:0] output_buffer_13_q0;
reg   [9:0] output_buffer_14_address0;
reg    output_buffer_14_ce0;
reg    output_buffer_14_we0;
wire   [15:0] output_buffer_14_q0;
reg   [9:0] output_buffer_15_address0;
reg    output_buffer_15_ce0;
reg    output_buffer_15_we0;
wire   [15:0] output_buffer_15_q0;
reg   [9:0] output_buffer_16_address0;
reg    output_buffer_16_ce0;
reg    output_buffer_16_we0;
wire   [15:0] output_buffer_16_q0;
reg   [9:0] output_buffer_17_address0;
reg    output_buffer_17_ce0;
reg    output_buffer_17_we0;
wire   [15:0] output_buffer_17_q0;
reg   [9:0] output_buffer_18_address0;
reg    output_buffer_18_ce0;
reg    output_buffer_18_we0;
wire   [15:0] output_buffer_18_q0;
reg   [9:0] output_buffer_19_address0;
reg    output_buffer_19_ce0;
reg    output_buffer_19_we0;
wire   [15:0] output_buffer_19_q0;
reg   [9:0] output_buffer_20_address0;
reg    output_buffer_20_ce0;
reg    output_buffer_20_we0;
wire   [15:0] output_buffer_20_q0;
reg   [9:0] output_buffer_21_address0;
reg    output_buffer_21_ce0;
reg    output_buffer_21_we0;
wire   [15:0] output_buffer_21_q0;
reg   [9:0] output_buffer_22_address0;
reg    output_buffer_22_ce0;
reg    output_buffer_22_we0;
wire   [15:0] output_buffer_22_q0;
reg   [9:0] output_buffer_23_address0;
reg    output_buffer_23_ce0;
reg    output_buffer_23_we0;
wire   [15:0] output_buffer_23_q0;
reg   [9:0] output_buffer_24_address0;
reg    output_buffer_24_ce0;
reg    output_buffer_24_we0;
wire   [15:0] output_buffer_24_q0;
reg   [9:0] output_buffer_25_address0;
reg    output_buffer_25_ce0;
reg    output_buffer_25_we0;
wire   [15:0] output_buffer_25_q0;
reg   [9:0] output_buffer_26_address0;
reg    output_buffer_26_ce0;
reg    output_buffer_26_we0;
wire   [15:0] output_buffer_26_q0;
reg   [9:0] output_buffer_27_address0;
reg    output_buffer_27_ce0;
reg    output_buffer_27_we0;
wire   [15:0] output_buffer_27_q0;
reg   [9:0] output_buffer_28_address0;
reg    output_buffer_28_ce0;
reg    output_buffer_28_we0;
wire   [15:0] output_buffer_28_q0;
reg   [9:0] output_buffer_29_address0;
reg    output_buffer_29_ce0;
reg    output_buffer_29_we0;
wire   [15:0] output_buffer_29_q0;
reg   [9:0] output_buffer_30_address0;
reg    output_buffer_30_ce0;
reg    output_buffer_30_we0;
wire   [15:0] output_buffer_30_q0;
reg   [9:0] output_buffer_31_address0;
reg    output_buffer_31_ce0;
reg    output_buffer_31_we0;
wire   [15:0] output_buffer_31_q0;
reg    DATA_BUS2_blk_n_AR;
wire    ap_CS_fsm_state47;
reg    DATA_BUS2_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond268_reg_2645;
reg    DATA_BUS_AWVALID;
wire    DATA_BUS_AWREADY;
reg    DATA_BUS_WVALID;
wire    DATA_BUS_WREADY;
reg    DATA_BUS_ARVALID;
wire    DATA_BUS_ARREADY;
wire    DATA_BUS_RVALID;
reg    DATA_BUS_RREADY;
wire   [31:0] DATA_BUS_RDATA;
wire    DATA_BUS_RLAST;
wire   [0:0] DATA_BUS_RID;
wire   [0:0] DATA_BUS_RUSER;
wire   [1:0] DATA_BUS_RRESP;
wire    DATA_BUS_BVALID;
reg    DATA_BUS_BREADY;
wire   [1:0] DATA_BUS_BRESP;
wire   [0:0] DATA_BUS_BID;
wire   [0:0] DATA_BUS_BUSER;
wire    DATA_BUS2_AWREADY;
wire    DATA_BUS2_WREADY;
reg    DATA_BUS2_ARVALID;
wire    DATA_BUS2_ARREADY;
reg   [63:0] DATA_BUS2_ARADDR;
reg   [0:0] DATA_BUS2_ARID;
reg   [31:0] DATA_BUS2_ARLEN;
reg   [2:0] DATA_BUS2_ARSIZE;
reg   [1:0] DATA_BUS2_ARBURST;
reg   [1:0] DATA_BUS2_ARLOCK;
reg   [3:0] DATA_BUS2_ARCACHE;
reg   [2:0] DATA_BUS2_ARPROT;
reg   [3:0] DATA_BUS2_ARQOS;
reg   [3:0] DATA_BUS2_ARREGION;
reg   [0:0] DATA_BUS2_ARUSER;
wire    DATA_BUS2_RVALID;
reg    DATA_BUS2_RREADY;
wire   [31:0] DATA_BUS2_RDATA;
wire    DATA_BUS2_RLAST;
wire   [0:0] DATA_BUS2_RID;
wire   [0:0] DATA_BUS2_RUSER;
wire   [1:0] DATA_BUS2_RRESP;
wire    DATA_BUS2_BVALID;
wire   [1:0] DATA_BUS2_BRESP;
wire   [0:0] DATA_BUS2_BID;
wire   [0:0] DATA_BUS2_BUSER;
reg   [9:0] loop_index_reg_983;
reg   [9:0] loop_index_reg_983_pp0_iter1_reg;
wire    ap_block_state54_pp0_stage0_iter0;
reg    ap_block_state55_pp0_stage0_iter1;
wire    ap_block_state56_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] x_reg_995;
reg   [31:0] BetaQ_read_reg_2338;
wire    ap_CS_fsm_state2;
reg   [31:0] WeightQ_read_reg_2343;
reg   [31:0] OutputQ_read_reg_2348;
reg   [31:0] InputQ_read_reg_2353;
reg   [31:0] LayerType_read_reg_2358;
reg   [31:0] cLoops_read_reg_2365;
reg   [31:0] rLoops_read_reg_2370;
reg   [31:0] nLoops_read_reg_2375;
reg   [31:0] mLoops_read_reg_2380;
reg   [31:0] TC_read_reg_2387;
reg   [31:0] TR_read_reg_2394;
reg   [31:0] TN_read_reg_2401;
reg   [31:0] TM_read_reg_2406;
reg   [0:0] IsNL_read_reg_2414;
reg   [31:0] Padding_read_reg_2419;
reg  signed [31:0] Input_h_read_reg_2424;
reg   [31:0] Input_w_read_reg_2430;
reg   [31:0] Kernel_stride_read_reg_2437;
reg   [31:0] Kernel_size_read_reg_2443;
reg   [31:0] OutFM_num_read_reg_2449;
reg   [31:0] InFM_num_read_reg_2457;
reg   [63:0] Beta_read_reg_2462;
reg   [63:0] Weight_read_reg_2467;
reg   [63:0] Output_read_reg_2472;
reg   [63:0] Input_read_reg_2477;
wire   [0:0] empty_fu_1768_p1;
reg   [0:0] empty_reg_2482;
wire   [1:0] empty_153_fu_1772_p1;
reg   [1:0] empty_153_reg_2487;
wire   [1:0] empty_154_fu_1776_p1;
reg   [1:0] empty_154_reg_2492;
wire   [8:0] empty_155_fu_1780_p1;
reg   [8:0] empty_155_reg_2497;
wire  signed [3:0] empty_156_fu_1784_p1;
reg  signed [3:0] empty_156_reg_2502;
wire   [5:0] empty_158_fu_1792_p1;
reg   [5:0] empty_158_reg_2508;
wire  signed [5:0] empty_159_fu_1796_p1;
wire   [31:0] add_ln699_fu_1813_p2;
reg   [31:0] add_ln699_reg_2520;
wire    ap_CS_fsm_state3;
wire   [31:0] add_ln700_fu_1823_p2;
reg   [31:0] add_ln700_reg_2525;
wire   [31:0] WeightAddInputSubInter_fu_1838_p2;
reg   [31:0] WeightAddInputSubInter_reg_2530;
wire  signed [5:0] grp_fu_2320_p4;
reg   [5:0] TRow_reg_2535;
wire    ap_CS_fsm_state5;
wire  signed [5:0] grp_fu_2329_p4;
reg   [5:0] TCol_reg_2540;
wire   [17:0] trunc_ln704_fu_1851_p1;
reg   [17:0] trunc_ln704_reg_2545;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_1843_p2;
reg   [31:0] sdiv_ln699_reg_2550;
wire    ap_CS_fsm_state39;
wire   [8:0] trunc_ln699_fu_1855_p1;
reg   [8:0] trunc_ln699_reg_2555;
wire   [31:0] grp_fu_1847_p2;
reg   [31:0] sdiv_ln700_reg_2560;
wire  signed [31:0] output_w_fu_1859_p2;
reg  signed [31:0] output_w_reg_2565;
wire    ap_CS_fsm_state40;
wire  signed [31:0] output_h_fu_1864_p2;
reg  signed [31:0] output_h_reg_2571;
wire   [8:0] add_ln699_2_fu_1873_p2;
reg   [8:0] add_ln699_2_reg_2577;
wire    ap_CS_fsm_state45;
wire   [17:0] trunc_ln701_fu_1878_p1;
reg   [17:0] trunc_ln701_reg_2582;
wire   [3:0] KxK_fu_1882_p2;
reg   [3:0] KxK_reg_2587;
wire   [0:0] icmp_ln707_fu_1886_p2;
reg   [0:0] icmp_ln707_reg_2592;
wire   [31:0] add_ln707_1_fu_1896_p2;
reg   [31:0] add_ln707_1_reg_2598;
wire   [31:0] mLoops_bound_fu_1901_p3;
reg   [31:0] mLoops_bound_reg_2603;
wire   [31:0] InterSubOutput_fu_1909_p2;
reg   [31:0] InterSubOutput_reg_2608;
wire   [31:0] InterSubBeta_fu_1914_p2;
reg   [31:0] InterSubBeta_reg_2613;
wire   [0:0] icmp_ln738_fu_1919_p2;
wire   [31:0] NUM_fu_1976_p3;
reg   [31:0] NUM_reg_2622;
wire   [0:0] icmp_ln648_fu_1984_p2;
wire    ap_CS_fsm_state46;
reg   [63:0] DATA_BUS2_addr_reg_2634;
wire   [9:0] empty_162_fu_2008_p2;
reg   [9:0] empty_162_reg_2640;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond268_fu_2018_p2;
reg   [0:0] exitcond268_reg_2645_pp0_iter1_reg;
reg   [31:0] DATA_BUS2_addr_read_reg_2649;
wire   [0:0] icmp_ln650_fu_2028_p2;
wire    ap_CS_fsm_state57;
wire   [9:0] add_ln650_fu_2033_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state58_pp1_stage0_iter0;
wire    ap_block_state59_pp1_stage0_iter1;
wire    ap_block_state60_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln650_1_fu_2043_p2;
reg   [0:0] icmp_ln650_1_reg_2663;
reg   [0:0] icmp_ln650_1_reg_2663_pp1_iter1_reg;
wire   [9:0] shl_ln653_fu_2053_p2;
reg   [9:0] shl_ln653_reg_2672;
reg   [9:0] shl_ln653_reg_2672_pp1_iter1_reg;
wire   [15:0] trunc_ln653_fu_2059_p1;
reg   [15:0] trunc_ln653_reg_2678;
reg   [15:0] trunc_ln_reg_2683;
wire   [0:0] xor_ln755_fu_2087_p2;
reg   [0:0] xor_ln755_reg_2712;
wire    ap_CS_fsm_state61;
wire   [30:0] r_4_fu_2092_p2;
reg   [30:0] r_4_reg_2718;
wire    ap_CS_fsm_state62;
wire   [31:0] sub_ln743_fu_2107_p2;
reg   [31:0] sub_ln743_reg_2726;
wire   [0:0] icmp_ln741_fu_2102_p2;
wire   [31:0] TR_MIN_fu_2116_p3;
reg   [31:0] TR_MIN_reg_2732;
wire    ap_CS_fsm_state63;
wire   [5:0] trunc_ln729_fu_2122_p1;
reg   [5:0] trunc_ln729_reg_2737;
wire   [30:0] c_1_fu_2126_p2;
reg   [30:0] c_1_reg_2742;
wire    ap_CS_fsm_state64;
wire   [31:0] sub_ln746_fu_2141_p2;
reg   [31:0] sub_ln746_reg_2750;
wire   [0:0] icmp_ln744_fu_2136_p2;
wire   [31:0] TMP_R_1_fu_2146_p2;
wire   [31:0] TC_MIN_fu_2155_p3;
reg   [31:0] TC_MIN_reg_2761;
wire    ap_CS_fsm_state65;
wire   [5:0] trunc_ln729_1_fu_2161_p1;
reg   [5:0] trunc_ln729_1_reg_2766;
wire   [30:0] m_1_fu_2165_p2;
reg   [30:0] m_1_reg_2771;
wire    ap_CS_fsm_state66;
wire   [31:0] sub_ln750_fu_2180_p2;
reg   [31:0] sub_ln750_reg_2779;
wire   [0:0] icmp_ln748_fu_2175_p2;
wire   [0:0] input_flag_fu_2212_p2;
reg   [0:0] input_flag_reg_2785;
wire   [0:0] process_flag_fu_2224_p3;
reg   [0:0] process_flag_reg_2790;
wire   [0:0] write_flag_fu_2236_p2;
reg   [0:0] write_flag_reg_2795;
wire   [31:0] TMP_C_1_fu_2242_p2;
wire   [31:0] TM_MIN_fu_2251_p3;
reg   [31:0] TM_MIN_reg_2805;
wire    ap_CS_fsm_state67;
wire   [8:0] trunc_ln744_fu_2257_p1;
reg   [8:0] trunc_ln744_reg_2810;
wire    ap_CS_fsm_state68;
wire   [8:0] trunc_ln741_fu_2262_p1;
reg   [8:0] trunc_ln741_reg_2815;
wire   [5:0] trunc_ln748_1_fu_2285_p1;
reg   [5:0] trunc_ln748_1_reg_2832;
reg   [0:0] pingpongm_reg_1052;
wire   [5:0] trunc_ln748_fu_2290_p1;
reg   [5:0] trunc_ln748_reg_2837;
wire   [31:0] TMP_M_1_fu_2315_p2;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state53;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state54;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state58;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
wire    grp_intra_pingpong_wrapper_fu_1100_ap_start;
wire    grp_intra_pingpong_wrapper_fu_1100_ap_done;
wire    grp_intra_pingpong_wrapper_fu_1100_ap_idle;
wire    grp_intra_pingpong_wrapper_fu_1100_ap_ready;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWVALID;
wire   [63:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWADDR;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWID;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWLEN;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWSIZE;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWBURST;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWLOCK;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWCACHE;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWPROT;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWQOS;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWREGION;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWUSER;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WVALID;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WDATA;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WSTRB;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WLAST;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WID;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WUSER;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARVALID;
wire   [63:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARADDR;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARID;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARLEN;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARSIZE;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARBURST;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARLOCK;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARCACHE;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARPROT;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARQOS;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARREGION;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARUSER;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_RREADY;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_BREADY;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWVALID;
wire   [63:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWADDR;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWID;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWLEN;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWSIZE;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWBURST;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWLOCK;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWCACHE;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWPROT;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWQOS;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWREGION;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWUSER;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WVALID;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WDATA;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WSTRB;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WLAST;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WID;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WUSER;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARVALID;
wire   [63:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARADDR;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARID;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARLEN;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARSIZE;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARBURST;
wire   [1:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARLOCK;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARCACHE;
wire   [2:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARPROT;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARQOS;
wire   [3:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARREGION;
wire   [0:0] grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARUSER;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_RREADY;
wire    grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_BREADY;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer1_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer1_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer1_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer1_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer2_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer2_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer2_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer2_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer3_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer3_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer3_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer3_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer4_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer4_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer4_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer4_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer5_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer5_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer5_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer5_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer6_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer6_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer6_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer6_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer7_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer7_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer7_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer7_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer8_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer8_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer8_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer8_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer9_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer9_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer9_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer9_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer10_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer10_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer10_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer10_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer11_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer11_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer11_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer11_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer12_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer12_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer12_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer12_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer13_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer13_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer13_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer13_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer14_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer14_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer14_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer14_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer15_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer15_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer15_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer15_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer16_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer16_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer16_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer16_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer17_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer17_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer17_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer17_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer18_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer18_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer18_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer18_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer19_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer19_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer19_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer19_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer20_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer20_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer20_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer20_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer21_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer21_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer21_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer21_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer22_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer22_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer22_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer22_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer23_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer23_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer23_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer23_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer24_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer24_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer24_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer24_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer25_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer25_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer25_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer25_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer26_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer26_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer26_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer26_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer27_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer27_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer27_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer27_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer28_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer28_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer28_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer28_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer29_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer29_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer29_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer29_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer30_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer30_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer30_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer30_d0;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer31_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer31_ce0;
wire    grp_intra_pingpong_wrapper_fu_1100_output_buffer31_we0;
wire   [15:0] grp_intra_pingpong_wrapper_fu_1100_output_buffer31_d0;
reg   [31:0] grp_intra_pingpong_wrapper_fu_1100_p_read;
reg   [31:0] grp_intra_pingpong_wrapper_fu_1100_p_read1;
reg   [0:0] grp_intra_pingpong_wrapper_fu_1100_pingpongx_offset;
wire   [9:0] grp_intra_pingpong_wrapper_fu_1100_beta_buffer_address0;
wire    grp_intra_pingpong_wrapper_fu_1100_beta_buffer_ce0;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_ap_return_0;
wire   [31:0] grp_intra_pingpong_wrapper_fu_1100_ap_return_1;
wire    grp_write_back_output_reorg_fu_1644_ap_start;
wire    grp_write_back_output_reorg_fu_1644_ap_done;
wire    grp_write_back_output_reorg_fu_1644_ap_idle;
wire    grp_write_back_output_reorg_fu_1644_ap_ready;
wire    grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWVALID;
wire   [63:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWADDR;
wire   [0:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWID;
wire   [31:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWLEN;
wire   [2:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWSIZE;
wire   [1:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWBURST;
wire   [1:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWLOCK;
wire   [3:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWCACHE;
wire   [2:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWPROT;
wire   [3:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWQOS;
wire   [3:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWREGION;
wire   [0:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWUSER;
wire    grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WVALID;
wire   [31:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WDATA;
wire   [3:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WSTRB;
wire    grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WLAST;
wire   [0:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WID;
wire   [0:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WUSER;
wire    grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARVALID;
wire   [63:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARADDR;
wire   [0:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARID;
wire   [31:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARLEN;
wire   [2:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARSIZE;
wire   [1:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARBURST;
wire   [1:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARLOCK;
wire   [3:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARCACHE;
wire   [2:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARPROT;
wire   [3:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARQOS;
wire   [3:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARREGION;
wire   [0:0] grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARUSER;
wire    grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_RREADY;
wire    grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_BREADY;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer1_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer1_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer1_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer2_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer2_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer2_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer3_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer3_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer3_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer4_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer4_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer4_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer5_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer5_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer5_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer6_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer6_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer6_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer7_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer7_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer7_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer8_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer8_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer8_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer9_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer9_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer9_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer10_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer10_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer10_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer11_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer11_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer11_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer12_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer12_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer12_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer13_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer13_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer13_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer14_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer14_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer14_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer15_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer15_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer15_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer16_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer16_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer16_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer17_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer17_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer17_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer18_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer18_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer18_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer19_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer19_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer19_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer20_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer20_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer20_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer21_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer21_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer21_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer22_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer22_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer22_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer23_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer23_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer23_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer24_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer24_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer24_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer25_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer25_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer25_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer26_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer26_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer26_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer27_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer27_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer27_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer28_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer28_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer28_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer29_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer29_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer29_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer30_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer30_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer30_q0;
wire   [9:0] grp_write_back_output_reorg_fu_1644_output_buffer31_address0;
wire    grp_write_back_output_reorg_fu_1644_output_buffer31_ce0;
reg   [15:0] grp_write_back_output_reorg_fu_1644_output_buffer31_q0;
reg   [31:0] grp_write_back_output_reorg_fu_1644_m;
reg   [5:0] grp_write_back_output_reorg_fu_1644_TM_MIN;
reg   [9:0] ap_phi_mux_loop_index_phi_fu_987_p4;
reg   [31:0] TMP_R_reg_1006;
reg   [30:0] r_reg_1018;
reg   [31:0] TMP_C_reg_1029;
reg   [30:0] c_reg_1041;
reg   [0:0] ap_phi_mux_pingpongm_1_phi_fu_1091_p4;
reg    ap_block_state69_on_subcall_done;
reg   [31:0] TMP_M_reg_1064;
reg   [30:0] m_reg_1076;
reg    grp_intra_pingpong_wrapper_fu_1100_ap_start_reg;
reg    grp_write_back_output_reorg_fu_1644_ap_start_reg;
wire   [63:0] loop_index_cast4_fu_2023_p1;
wire   [63:0] zext_ln650_fu_2048_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln653_fu_2073_p1;
wire   [63:0] zext_ln654_fu_2082_p1;
wire  signed [63:0] p_cast_cast_fu_1998_p1;
reg   [31:0] TMP_M_next0_0_1_fu_760;
reg   [31:0] TMP_M_next1_0_1_fu_764;
reg   [31:0] TM_MIN_next0_0_1_fu_768;
reg   [31:0] TM_MIN_next1_0_1_fu_772;
wire  signed [31:0] empty_155_fu_1780_p0;
wire   [31:0] sub_ln699_fu_1809_p2;
wire   [31:0] shl_ln699_fu_1804_p2;
wire   [31:0] sub_ln700_fu_1819_p2;
wire   [31:0] add_ln710_fu_1833_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_1829_p2;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_1869_p2;
wire   [31:0] add_ln707_fu_1891_p2;
wire   [31:0] add_ln647_fu_1924_p2;
wire   [30:0] trunc_ln647_1_fu_1937_p4;
wire   [30:0] xor_ln647_fu_1946_p2;
wire   [31:0] zext_ln647_fu_1952_p1;
wire   [30:0] lshr_ln647_2_fu_1962_p4;
wire   [0:0] tmp_fu_1929_p3;
wire   [31:0] sub_ln647_fu_1956_p2;
wire   [31:0] zext_ln647_1_fu_1972_p1;
wire   [61:0] p_cast_fu_1989_p4;
wire   [31:0] loop_index_cast24_fu_2014_p1;
wire   [31:0] zext_ln650_1_fu_2039_p1;
wire   [9:0] or_ln654_fu_2077_p2;
wire   [31:0] zext_ln741_fu_2098_p1;
wire   [0:0] icmp_ln743_fu_2112_p2;
wire   [31:0] zext_ln744_fu_2132_p1;
wire   [0:0] icmp_ln746_fu_2151_p2;
wire   [31:0] zext_ln748_fu_2171_p1;
wire   [0:0] MneMLoopsaddOne_fu_2202_p2;
wire   [0:0] MnemLoops_fu_2197_p2;
wire   [0:0] or_ln755_fu_2207_p2;
wire   [0:0] MneZero_fu_2185_p2;
wire   [0:0] and_ln756_fu_2218_p2;
wire   [0:0] MneOne_fu_2191_p2;
wire   [0:0] or_ln757_fu_2231_p2;
wire   [0:0] icmp_ln750_fu_2247_p2;
wire   [5:0] grp_fu_2320_p0;
wire  signed [0:0] grp_fu_2320_p1;
wire   [5:0] grp_fu_2329_p0;
wire  signed [0:0] grp_fu_2329_p1;
reg    grp_fu_1843_ap_start;
wire    grp_fu_1843_ap_done;
reg    grp_fu_1847_ap_start;
wire    grp_fu_1847_ap_done;
reg   [64:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
#0 Input_r_0_data_reg = 64'd0;
#0 Input_r_0_vld_reg = 1'b0;
#0 Output_r_0_data_reg = 64'd0;
#0 Output_r_0_vld_reg = 1'b0;
#0 Weight_0_data_reg = 64'd0;
#0 Weight_0_vld_reg = 1'b0;
#0 Beta_0_data_reg = 64'd0;
#0 Beta_0_vld_reg = 1'b0;
#0 InFM_num_0_data_reg = 32'd0;
#0 InFM_num_0_vld_reg = 1'b0;
#0 OutFM_num_0_data_reg = 32'd0;
#0 OutFM_num_0_vld_reg = 1'b0;
#0 Kernel_size_0_data_reg = 32'd0;
#0 Kernel_size_0_vld_reg = 1'b0;
#0 Kernel_stride_0_data_reg = 32'd0;
#0 Kernel_stride_0_vld_reg = 1'b0;
#0 Input_w_0_data_reg = 32'd0;
#0 Input_w_0_vld_reg = 1'b0;
#0 Input_h_0_data_reg = 32'd0;
#0 Input_h_0_vld_reg = 1'b0;
#0 Padding_0_data_reg = 32'd0;
#0 Padding_0_vld_reg = 1'b0;
#0 IsNL_0_data_reg = 1'b0;
#0 IsNL_0_vld_reg = 1'b0;
#0 TM_0_data_reg = 32'd0;
#0 TM_0_vld_reg = 1'b0;
#0 TN_0_data_reg = 32'd0;
#0 TN_0_vld_reg = 1'b0;
#0 TR_0_data_reg = 32'd0;
#0 TR_0_vld_reg = 1'b0;
#0 TC_0_data_reg = 32'd0;
#0 TC_0_vld_reg = 1'b0;
#0 mLoops_0_data_reg = 32'd0;
#0 mLoops_0_vld_reg = 1'b0;
#0 nLoops_0_data_reg = 32'd0;
#0 nLoops_0_vld_reg = 1'b0;
#0 rLoops_0_data_reg = 32'd0;
#0 rLoops_0_vld_reg = 1'b0;
#0 cLoops_0_data_reg = 32'd0;
#0 cLoops_0_vld_reg = 1'b0;
#0 LayerType_0_data_reg = 32'd0;
#0 LayerType_0_vld_reg = 1'b0;
#0 InputQ_0_data_reg = 32'd0;
#0 InputQ_0_vld_reg = 1'b0;
#0 OutputQ_0_data_reg = 32'd0;
#0 OutputQ_0_vld_reg = 1'b0;
#0 WeightQ_0_data_reg = 32'd0;
#0 WeightQ_0_vld_reg = 1'b0;
#0 BetaQ_0_data_reg = 32'd0;
#0 BetaQ_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 grp_intra_pingpong_wrapper_fu_1100_ap_start_reg = 1'b0;
#0 grp_write_back_output_reorg_fu_1644_ap_start_reg = 1'b0;
end

YOLO2_FPGA_beta_tmp #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
beta_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(beta_tmp_address0),
    .ce0(beta_tmp_ce0),
    .we0(beta_tmp_we0),
    .d0(DATA_BUS2_addr_read_reg_2649),
    .q0(beta_tmp_q0)
);

YOLO2_FPGA_beta_buffer #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
beta_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(beta_buffer_address0),
    .ce0(beta_buffer_ce0),
    .we0(beta_buffer_we0),
    .d0(trunc_ln_reg_2683),
    .q0(beta_buffer_q0),
    .address1(beta_buffer_address1),
    .ce1(beta_buffer_ce1),
    .we1(beta_buffer_we1),
    .d1(trunc_ln653_reg_2678)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_0_address0),
    .ce0(output_buffer1_0_ce0),
    .we0(output_buffer1_0_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer_d0),
    .q0(output_buffer1_0_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_1_address0),
    .ce0(output_buffer1_1_ce0),
    .we0(output_buffer1_1_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer1_d0),
    .q0(output_buffer1_1_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_2_address0),
    .ce0(output_buffer1_2_ce0),
    .we0(output_buffer1_2_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer2_d0),
    .q0(output_buffer1_2_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_3_address0),
    .ce0(output_buffer1_3_ce0),
    .we0(output_buffer1_3_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer3_d0),
    .q0(output_buffer1_3_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_4_address0),
    .ce0(output_buffer1_4_ce0),
    .we0(output_buffer1_4_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer4_d0),
    .q0(output_buffer1_4_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_5_address0),
    .ce0(output_buffer1_5_ce0),
    .we0(output_buffer1_5_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer5_d0),
    .q0(output_buffer1_5_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_6_address0),
    .ce0(output_buffer1_6_ce0),
    .we0(output_buffer1_6_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer6_d0),
    .q0(output_buffer1_6_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_7_address0),
    .ce0(output_buffer1_7_ce0),
    .we0(output_buffer1_7_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer7_d0),
    .q0(output_buffer1_7_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_8_address0),
    .ce0(output_buffer1_8_ce0),
    .we0(output_buffer1_8_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer8_d0),
    .q0(output_buffer1_8_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_9_address0),
    .ce0(output_buffer1_9_ce0),
    .we0(output_buffer1_9_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer9_d0),
    .q0(output_buffer1_9_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_10_address0),
    .ce0(output_buffer1_10_ce0),
    .we0(output_buffer1_10_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer10_d0),
    .q0(output_buffer1_10_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_11_address0),
    .ce0(output_buffer1_11_ce0),
    .we0(output_buffer1_11_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer11_d0),
    .q0(output_buffer1_11_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_12_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_12_address0),
    .ce0(output_buffer1_12_ce0),
    .we0(output_buffer1_12_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer12_d0),
    .q0(output_buffer1_12_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_13_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_13_address0),
    .ce0(output_buffer1_13_ce0),
    .we0(output_buffer1_13_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer13_d0),
    .q0(output_buffer1_13_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_14_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_14_address0),
    .ce0(output_buffer1_14_ce0),
    .we0(output_buffer1_14_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer14_d0),
    .q0(output_buffer1_14_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_15_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_15_address0),
    .ce0(output_buffer1_15_ce0),
    .we0(output_buffer1_15_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer15_d0),
    .q0(output_buffer1_15_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_16_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_16_address0),
    .ce0(output_buffer1_16_ce0),
    .we0(output_buffer1_16_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer16_d0),
    .q0(output_buffer1_16_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_17_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_17_address0),
    .ce0(output_buffer1_17_ce0),
    .we0(output_buffer1_17_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer17_d0),
    .q0(output_buffer1_17_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_18_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_18_address0),
    .ce0(output_buffer1_18_ce0),
    .we0(output_buffer1_18_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer18_d0),
    .q0(output_buffer1_18_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_19_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_19_address0),
    .ce0(output_buffer1_19_ce0),
    .we0(output_buffer1_19_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer19_d0),
    .q0(output_buffer1_19_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_20_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_20_address0),
    .ce0(output_buffer1_20_ce0),
    .we0(output_buffer1_20_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer20_d0),
    .q0(output_buffer1_20_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_21_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_21_address0),
    .ce0(output_buffer1_21_ce0),
    .we0(output_buffer1_21_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer21_d0),
    .q0(output_buffer1_21_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_22_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_22_address0),
    .ce0(output_buffer1_22_ce0),
    .we0(output_buffer1_22_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer22_d0),
    .q0(output_buffer1_22_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_23_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_23_address0),
    .ce0(output_buffer1_23_ce0),
    .we0(output_buffer1_23_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer23_d0),
    .q0(output_buffer1_23_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_24_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_24_address0),
    .ce0(output_buffer1_24_ce0),
    .we0(output_buffer1_24_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer24_d0),
    .q0(output_buffer1_24_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_25_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_25_address0),
    .ce0(output_buffer1_25_ce0),
    .we0(output_buffer1_25_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer25_d0),
    .q0(output_buffer1_25_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_26_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_26_address0),
    .ce0(output_buffer1_26_ce0),
    .we0(output_buffer1_26_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer26_d0),
    .q0(output_buffer1_26_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_27_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_27_address0),
    .ce0(output_buffer1_27_ce0),
    .we0(output_buffer1_27_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer27_d0),
    .q0(output_buffer1_27_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_28_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_28_address0),
    .ce0(output_buffer1_28_ce0),
    .we0(output_buffer1_28_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer28_d0),
    .q0(output_buffer1_28_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_29_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_29_address0),
    .ce0(output_buffer1_29_ce0),
    .we0(output_buffer1_29_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer29_d0),
    .q0(output_buffer1_29_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_30_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_30_address0),
    .ce0(output_buffer1_30_ce0),
    .we0(output_buffer1_30_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer30_d0),
    .q0(output_buffer1_30_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer1_31_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer1_31_address0),
    .ce0(output_buffer1_31_ce0),
    .we0(output_buffer1_31_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer31_d0),
    .q0(output_buffer1_31_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_0_address0),
    .ce0(output_buffer_0_ce0),
    .we0(output_buffer_0_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer_d0),
    .q0(output_buffer_0_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_1_address0),
    .ce0(output_buffer_1_ce0),
    .we0(output_buffer_1_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer1_d0),
    .q0(output_buffer_1_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_2_address0),
    .ce0(output_buffer_2_ce0),
    .we0(output_buffer_2_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer2_d0),
    .q0(output_buffer_2_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_3_address0),
    .ce0(output_buffer_3_ce0),
    .we0(output_buffer_3_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer3_d0),
    .q0(output_buffer_3_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_4_address0),
    .ce0(output_buffer_4_ce0),
    .we0(output_buffer_4_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer4_d0),
    .q0(output_buffer_4_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_5_address0),
    .ce0(output_buffer_5_ce0),
    .we0(output_buffer_5_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer5_d0),
    .q0(output_buffer_5_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_6_address0),
    .ce0(output_buffer_6_ce0),
    .we0(output_buffer_6_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer6_d0),
    .q0(output_buffer_6_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_7_address0),
    .ce0(output_buffer_7_ce0),
    .we0(output_buffer_7_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer7_d0),
    .q0(output_buffer_7_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_8_address0),
    .ce0(output_buffer_8_ce0),
    .we0(output_buffer_8_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer8_d0),
    .q0(output_buffer_8_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_9_address0),
    .ce0(output_buffer_9_ce0),
    .we0(output_buffer_9_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer9_d0),
    .q0(output_buffer_9_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_10_address0),
    .ce0(output_buffer_10_ce0),
    .we0(output_buffer_10_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer10_d0),
    .q0(output_buffer_10_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_11_address0),
    .ce0(output_buffer_11_ce0),
    .we0(output_buffer_11_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer11_d0),
    .q0(output_buffer_11_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_12_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_12_address0),
    .ce0(output_buffer_12_ce0),
    .we0(output_buffer_12_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer12_d0),
    .q0(output_buffer_12_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_13_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_13_address0),
    .ce0(output_buffer_13_ce0),
    .we0(output_buffer_13_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer13_d0),
    .q0(output_buffer_13_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_14_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_14_address0),
    .ce0(output_buffer_14_ce0),
    .we0(output_buffer_14_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer14_d0),
    .q0(output_buffer_14_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_15_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_15_address0),
    .ce0(output_buffer_15_ce0),
    .we0(output_buffer_15_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer15_d0),
    .q0(output_buffer_15_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_16_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_16_address0),
    .ce0(output_buffer_16_ce0),
    .we0(output_buffer_16_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer16_d0),
    .q0(output_buffer_16_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_17_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_17_address0),
    .ce0(output_buffer_17_ce0),
    .we0(output_buffer_17_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer17_d0),
    .q0(output_buffer_17_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_18_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_18_address0),
    .ce0(output_buffer_18_ce0),
    .we0(output_buffer_18_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer18_d0),
    .q0(output_buffer_18_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_19_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_19_address0),
    .ce0(output_buffer_19_ce0),
    .we0(output_buffer_19_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer19_d0),
    .q0(output_buffer_19_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_20_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_20_address0),
    .ce0(output_buffer_20_ce0),
    .we0(output_buffer_20_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer20_d0),
    .q0(output_buffer_20_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_21_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_21_address0),
    .ce0(output_buffer_21_ce0),
    .we0(output_buffer_21_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer21_d0),
    .q0(output_buffer_21_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_22_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_22_address0),
    .ce0(output_buffer_22_ce0),
    .we0(output_buffer_22_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer22_d0),
    .q0(output_buffer_22_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_23_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_23_address0),
    .ce0(output_buffer_23_ce0),
    .we0(output_buffer_23_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer23_d0),
    .q0(output_buffer_23_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_24_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_24_address0),
    .ce0(output_buffer_24_ce0),
    .we0(output_buffer_24_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer24_d0),
    .q0(output_buffer_24_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_25_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_25_address0),
    .ce0(output_buffer_25_ce0),
    .we0(output_buffer_25_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer25_d0),
    .q0(output_buffer_25_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_26_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_26_address0),
    .ce0(output_buffer_26_ce0),
    .we0(output_buffer_26_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer26_d0),
    .q0(output_buffer_26_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_27_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_27_address0),
    .ce0(output_buffer_27_ce0),
    .we0(output_buffer_27_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer27_d0),
    .q0(output_buffer_27_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_28_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_28_address0),
    .ce0(output_buffer_28_ce0),
    .we0(output_buffer_28_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer28_d0),
    .q0(output_buffer_28_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_29_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_29_address0),
    .ce0(output_buffer_29_ce0),
    .we0(output_buffer_29_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer29_d0),
    .q0(output_buffer_29_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_30_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_30_address0),
    .ce0(output_buffer_30_ce0),
    .we0(output_buffer_30_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer30_d0),
    .q0(output_buffer_30_q0)
);

YOLO2_FPGA_output_buffer1_0 #(
    .DataWidth( 16 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
output_buffer_31_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buffer_31_address0),
    .ce0(output_buffer_31_ce0),
    .we0(output_buffer_31_we0),
    .d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer31_d0),
    .q0(output_buffer_31_q0)
);

YOLO2_FPGA_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .Input_r(Input_r),
    .Output_r(Output_r),
    .Weight(Weight),
    .Beta(Beta),
    .InFM_num(InFM_num),
    .OutFM_num(OutFM_num),
    .Kernel_size(Kernel_size),
    .Kernel_stride(Kernel_stride),
    .Input_w(Input_w),
    .Input_h(Input_h),
    .Padding(Padding),
    .IsNL(IsNL),
    .IsBN(IsBN),
    .TM(TM),
    .TN(TN),
    .TR(TR),
    .TC(TC),
    .mLoops(mLoops),
    .nLoops(nLoops),
    .rLoops(rLoops),
    .cLoops(cLoops),
    .LayerType(LayerType),
    .InputQ(InputQ),
    .OutputQ(OutputQ),
    .WeightQ(WeightQ),
    .BetaQ(BetaQ),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

YOLO2_FPGA_DATA_BUS_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 32 ),
    .NUM_WRITE_OUTSTANDING( 32 ),
    .MAX_READ_BURST_LENGTH( 64 ),
    .MAX_WRITE_BURST_LENGTH( 64 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_BUS_CACHE_VALUE ))
DATA_BUS_m_axi_U(
    .AWVALID(m_axi_DATA_BUS_AWVALID),
    .AWREADY(m_axi_DATA_BUS_AWREADY),
    .AWADDR(m_axi_DATA_BUS_AWADDR),
    .AWID(m_axi_DATA_BUS_AWID),
    .AWLEN(m_axi_DATA_BUS_AWLEN),
    .AWSIZE(m_axi_DATA_BUS_AWSIZE),
    .AWBURST(m_axi_DATA_BUS_AWBURST),
    .AWLOCK(m_axi_DATA_BUS_AWLOCK),
    .AWCACHE(m_axi_DATA_BUS_AWCACHE),
    .AWPROT(m_axi_DATA_BUS_AWPROT),
    .AWQOS(m_axi_DATA_BUS_AWQOS),
    .AWREGION(m_axi_DATA_BUS_AWREGION),
    .AWUSER(m_axi_DATA_BUS_AWUSER),
    .WVALID(m_axi_DATA_BUS_WVALID),
    .WREADY(m_axi_DATA_BUS_WREADY),
    .WDATA(m_axi_DATA_BUS_WDATA),
    .WSTRB(m_axi_DATA_BUS_WSTRB),
    .WLAST(m_axi_DATA_BUS_WLAST),
    .WID(m_axi_DATA_BUS_WID),
    .WUSER(m_axi_DATA_BUS_WUSER),
    .ARVALID(m_axi_DATA_BUS_ARVALID),
    .ARREADY(m_axi_DATA_BUS_ARREADY),
    .ARADDR(m_axi_DATA_BUS_ARADDR),
    .ARID(m_axi_DATA_BUS_ARID),
    .ARLEN(m_axi_DATA_BUS_ARLEN),
    .ARSIZE(m_axi_DATA_BUS_ARSIZE),
    .ARBURST(m_axi_DATA_BUS_ARBURST),
    .ARLOCK(m_axi_DATA_BUS_ARLOCK),
    .ARCACHE(m_axi_DATA_BUS_ARCACHE),
    .ARPROT(m_axi_DATA_BUS_ARPROT),
    .ARQOS(m_axi_DATA_BUS_ARQOS),
    .ARREGION(m_axi_DATA_BUS_ARREGION),
    .ARUSER(m_axi_DATA_BUS_ARUSER),
    .RVALID(m_axi_DATA_BUS_RVALID),
    .RREADY(m_axi_DATA_BUS_RREADY),
    .RDATA(m_axi_DATA_BUS_RDATA),
    .RLAST(m_axi_DATA_BUS_RLAST),
    .RID(m_axi_DATA_BUS_RID),
    .RUSER(m_axi_DATA_BUS_RUSER),
    .RRESP(m_axi_DATA_BUS_RRESP),
    .BVALID(m_axi_DATA_BUS_BVALID),
    .BREADY(m_axi_DATA_BUS_BREADY),
    .BRESP(m_axi_DATA_BUS_BRESP),
    .BID(m_axi_DATA_BUS_BID),
    .BUSER(m_axi_DATA_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_BUS_ARVALID),
    .I_ARREADY(DATA_BUS_ARREADY),
    .I_ARADDR(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARADDR),
    .I_ARID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARID),
    .I_ARLEN(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARLEN),
    .I_ARSIZE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARSIZE),
    .I_ARLOCK(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARLOCK),
    .I_ARCACHE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARCACHE),
    .I_ARQOS(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARQOS),
    .I_ARPROT(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARPROT),
    .I_ARUSER(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARUSER),
    .I_ARBURST(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARBURST),
    .I_ARREGION(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARREGION),
    .I_RVALID(DATA_BUS_RVALID),
    .I_RREADY(DATA_BUS_RREADY),
    .I_RDATA(DATA_BUS_RDATA),
    .I_RID(DATA_BUS_RID),
    .I_RUSER(DATA_BUS_RUSER),
    .I_RRESP(DATA_BUS_RRESP),
    .I_RLAST(DATA_BUS_RLAST),
    .I_AWVALID(DATA_BUS_AWVALID),
    .I_AWREADY(DATA_BUS_AWREADY),
    .I_AWADDR(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWADDR),
    .I_AWID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWID),
    .I_AWLEN(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWLEN),
    .I_AWSIZE(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWSIZE),
    .I_AWLOCK(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWLOCK),
    .I_AWCACHE(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWCACHE),
    .I_AWQOS(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWQOS),
    .I_AWPROT(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWPROT),
    .I_AWUSER(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWUSER),
    .I_AWBURST(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWBURST),
    .I_AWREGION(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWREGION),
    .I_WVALID(DATA_BUS_WVALID),
    .I_WREADY(DATA_BUS_WREADY),
    .I_WDATA(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WDATA),
    .I_WID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WID),
    .I_WUSER(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WUSER),
    .I_WLAST(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WLAST),
    .I_WSTRB(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WSTRB),
    .I_BVALID(DATA_BUS_BVALID),
    .I_BREADY(DATA_BUS_BREADY),
    .I_BRESP(DATA_BUS_BRESP),
    .I_BID(DATA_BUS_BID),
    .I_BUSER(DATA_BUS_BUSER)
);

YOLO2_FPGA_DATA_BUS2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 32 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 64 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_BUS2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_BUS2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_BUS2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_BUS2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_BUS2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_BUS2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_BUS2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUS2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_BUS2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_BUS2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_BUS2_CACHE_VALUE ))
DATA_BUS2_m_axi_U(
    .AWVALID(m_axi_DATA_BUS2_AWVALID),
    .AWREADY(m_axi_DATA_BUS2_AWREADY),
    .AWADDR(m_axi_DATA_BUS2_AWADDR),
    .AWID(m_axi_DATA_BUS2_AWID),
    .AWLEN(m_axi_DATA_BUS2_AWLEN),
    .AWSIZE(m_axi_DATA_BUS2_AWSIZE),
    .AWBURST(m_axi_DATA_BUS2_AWBURST),
    .AWLOCK(m_axi_DATA_BUS2_AWLOCK),
    .AWCACHE(m_axi_DATA_BUS2_AWCACHE),
    .AWPROT(m_axi_DATA_BUS2_AWPROT),
    .AWQOS(m_axi_DATA_BUS2_AWQOS),
    .AWREGION(m_axi_DATA_BUS2_AWREGION),
    .AWUSER(m_axi_DATA_BUS2_AWUSER),
    .WVALID(m_axi_DATA_BUS2_WVALID),
    .WREADY(m_axi_DATA_BUS2_WREADY),
    .WDATA(m_axi_DATA_BUS2_WDATA),
    .WSTRB(m_axi_DATA_BUS2_WSTRB),
    .WLAST(m_axi_DATA_BUS2_WLAST),
    .WID(m_axi_DATA_BUS2_WID),
    .WUSER(m_axi_DATA_BUS2_WUSER),
    .ARVALID(m_axi_DATA_BUS2_ARVALID),
    .ARREADY(m_axi_DATA_BUS2_ARREADY),
    .ARADDR(m_axi_DATA_BUS2_ARADDR),
    .ARID(m_axi_DATA_BUS2_ARID),
    .ARLEN(m_axi_DATA_BUS2_ARLEN),
    .ARSIZE(m_axi_DATA_BUS2_ARSIZE),
    .ARBURST(m_axi_DATA_BUS2_ARBURST),
    .ARLOCK(m_axi_DATA_BUS2_ARLOCK),
    .ARCACHE(m_axi_DATA_BUS2_ARCACHE),
    .ARPROT(m_axi_DATA_BUS2_ARPROT),
    .ARQOS(m_axi_DATA_BUS2_ARQOS),
    .ARREGION(m_axi_DATA_BUS2_ARREGION),
    .ARUSER(m_axi_DATA_BUS2_ARUSER),
    .RVALID(m_axi_DATA_BUS2_RVALID),
    .RREADY(m_axi_DATA_BUS2_RREADY),
    .RDATA(m_axi_DATA_BUS2_RDATA),
    .RLAST(m_axi_DATA_BUS2_RLAST),
    .RID(m_axi_DATA_BUS2_RID),
    .RUSER(m_axi_DATA_BUS2_RUSER),
    .RRESP(m_axi_DATA_BUS2_RRESP),
    .BVALID(m_axi_DATA_BUS2_BVALID),
    .BREADY(m_axi_DATA_BUS2_BREADY),
    .BRESP(m_axi_DATA_BUS2_BRESP),
    .BID(m_axi_DATA_BUS2_BID),
    .BUSER(m_axi_DATA_BUS2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_BUS2_ARVALID),
    .I_ARREADY(DATA_BUS2_ARREADY),
    .I_ARADDR(DATA_BUS2_ARADDR),
    .I_ARID(DATA_BUS2_ARID),
    .I_ARLEN(DATA_BUS2_ARLEN),
    .I_ARSIZE(DATA_BUS2_ARSIZE),
    .I_ARLOCK(DATA_BUS2_ARLOCK),
    .I_ARCACHE(DATA_BUS2_ARCACHE),
    .I_ARQOS(DATA_BUS2_ARQOS),
    .I_ARPROT(DATA_BUS2_ARPROT),
    .I_ARUSER(DATA_BUS2_ARUSER),
    .I_ARBURST(DATA_BUS2_ARBURST),
    .I_ARREGION(DATA_BUS2_ARREGION),
    .I_RVALID(DATA_BUS2_RVALID),
    .I_RREADY(DATA_BUS2_RREADY),
    .I_RDATA(DATA_BUS2_RDATA),
    .I_RID(DATA_BUS2_RID),
    .I_RUSER(DATA_BUS2_RUSER),
    .I_RRESP(DATA_BUS2_RRESP),
    .I_RLAST(DATA_BUS2_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_BUS2_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_BUS2_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_BUS2_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_BUS2_BRESP),
    .I_BID(DATA_BUS2_BID),
    .I_BUSER(DATA_BUS2_BUSER)
);

YOLO2_FPGA_intra_pingpong_wrapper grp_intra_pingpong_wrapper_fu_1100(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_intra_pingpong_wrapper_fu_1100_ap_start),
    .ap_done(grp_intra_pingpong_wrapper_fu_1100_ap_done),
    .ap_idle(grp_intra_pingpong_wrapper_fu_1100_ap_idle),
    .ap_ready(grp_intra_pingpong_wrapper_fu_1100_ap_ready),
    .m_axi_DATA_BUS_AWVALID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWVALID),
    .m_axi_DATA_BUS_AWREADY(1'b0),
    .m_axi_DATA_BUS_AWADDR(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWADDR),
    .m_axi_DATA_BUS_AWID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWID),
    .m_axi_DATA_BUS_AWLEN(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWLEN),
    .m_axi_DATA_BUS_AWSIZE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWSIZE),
    .m_axi_DATA_BUS_AWBURST(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWBURST),
    .m_axi_DATA_BUS_AWLOCK(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWLOCK),
    .m_axi_DATA_BUS_AWCACHE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWCACHE),
    .m_axi_DATA_BUS_AWPROT(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWPROT),
    .m_axi_DATA_BUS_AWQOS(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWQOS),
    .m_axi_DATA_BUS_AWREGION(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWREGION),
    .m_axi_DATA_BUS_AWUSER(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_AWUSER),
    .m_axi_DATA_BUS_WVALID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WVALID),
    .m_axi_DATA_BUS_WREADY(1'b0),
    .m_axi_DATA_BUS_WDATA(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WDATA),
    .m_axi_DATA_BUS_WSTRB(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WSTRB),
    .m_axi_DATA_BUS_WLAST(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WLAST),
    .m_axi_DATA_BUS_WID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WID),
    .m_axi_DATA_BUS_WUSER(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_WUSER),
    .m_axi_DATA_BUS_ARVALID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARVALID),
    .m_axi_DATA_BUS_ARREADY(DATA_BUS_ARREADY),
    .m_axi_DATA_BUS_ARADDR(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARADDR),
    .m_axi_DATA_BUS_ARID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARID),
    .m_axi_DATA_BUS_ARLEN(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARLEN),
    .m_axi_DATA_BUS_ARSIZE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARSIZE),
    .m_axi_DATA_BUS_ARBURST(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARBURST),
    .m_axi_DATA_BUS_ARLOCK(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARLOCK),
    .m_axi_DATA_BUS_ARCACHE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARCACHE),
    .m_axi_DATA_BUS_ARPROT(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARPROT),
    .m_axi_DATA_BUS_ARQOS(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARQOS),
    .m_axi_DATA_BUS_ARREGION(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARREGION),
    .m_axi_DATA_BUS_ARUSER(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARUSER),
    .m_axi_DATA_BUS_RVALID(DATA_BUS_RVALID),
    .m_axi_DATA_BUS_RREADY(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_RREADY),
    .m_axi_DATA_BUS_RDATA(DATA_BUS_RDATA),
    .m_axi_DATA_BUS_RLAST(DATA_BUS_RLAST),
    .m_axi_DATA_BUS_RID(DATA_BUS_RID),
    .m_axi_DATA_BUS_RUSER(DATA_BUS_RUSER),
    .m_axi_DATA_BUS_RRESP(DATA_BUS_RRESP),
    .m_axi_DATA_BUS_BVALID(1'b0),
    .m_axi_DATA_BUS_BREADY(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_BREADY),
    .m_axi_DATA_BUS_BRESP(2'd0),
    .m_axi_DATA_BUS_BID(1'd0),
    .m_axi_DATA_BUS_BUSER(1'd0),
    .m_axi_DATA_BUS2_AWVALID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWVALID),
    .m_axi_DATA_BUS2_AWREADY(1'b0),
    .m_axi_DATA_BUS2_AWADDR(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWADDR),
    .m_axi_DATA_BUS2_AWID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWID),
    .m_axi_DATA_BUS2_AWLEN(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWLEN),
    .m_axi_DATA_BUS2_AWSIZE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWSIZE),
    .m_axi_DATA_BUS2_AWBURST(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWBURST),
    .m_axi_DATA_BUS2_AWLOCK(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWLOCK),
    .m_axi_DATA_BUS2_AWCACHE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWCACHE),
    .m_axi_DATA_BUS2_AWPROT(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWPROT),
    .m_axi_DATA_BUS2_AWQOS(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWQOS),
    .m_axi_DATA_BUS2_AWREGION(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWREGION),
    .m_axi_DATA_BUS2_AWUSER(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_AWUSER),
    .m_axi_DATA_BUS2_WVALID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WVALID),
    .m_axi_DATA_BUS2_WREADY(1'b0),
    .m_axi_DATA_BUS2_WDATA(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WDATA),
    .m_axi_DATA_BUS2_WSTRB(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WSTRB),
    .m_axi_DATA_BUS2_WLAST(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WLAST),
    .m_axi_DATA_BUS2_WID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WID),
    .m_axi_DATA_BUS2_WUSER(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_WUSER),
    .m_axi_DATA_BUS2_ARVALID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARVALID),
    .m_axi_DATA_BUS2_ARREADY(DATA_BUS2_ARREADY),
    .m_axi_DATA_BUS2_ARADDR(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARADDR),
    .m_axi_DATA_BUS2_ARID(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARID),
    .m_axi_DATA_BUS2_ARLEN(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARLEN),
    .m_axi_DATA_BUS2_ARSIZE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARSIZE),
    .m_axi_DATA_BUS2_ARBURST(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARBURST),
    .m_axi_DATA_BUS2_ARLOCK(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARLOCK),
    .m_axi_DATA_BUS2_ARCACHE(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARCACHE),
    .m_axi_DATA_BUS2_ARPROT(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARPROT),
    .m_axi_DATA_BUS2_ARQOS(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARQOS),
    .m_axi_DATA_BUS2_ARREGION(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARREGION),
    .m_axi_DATA_BUS2_ARUSER(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARUSER),
    .m_axi_DATA_BUS2_RVALID(DATA_BUS2_RVALID),
    .m_axi_DATA_BUS2_RREADY(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_RREADY),
    .m_axi_DATA_BUS2_RDATA(DATA_BUS2_RDATA),
    .m_axi_DATA_BUS2_RLAST(DATA_BUS2_RLAST),
    .m_axi_DATA_BUS2_RID(DATA_BUS2_RID),
    .m_axi_DATA_BUS2_RUSER(DATA_BUS2_RUSER),
    .m_axi_DATA_BUS2_RRESP(DATA_BUS2_RRESP),
    .m_axi_DATA_BUS2_BVALID(1'b0),
    .m_axi_DATA_BUS2_BREADY(grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_BREADY),
    .m_axi_DATA_BUS2_BRESP(2'd0),
    .m_axi_DATA_BUS2_BID(1'd0),
    .m_axi_DATA_BUS2_BUSER(1'd0),
    .Input_r(Input_read_reg_2477),
    .Weight(Weight_read_reg_2467),
    .output_buffer_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer_address0),
    .output_buffer_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer_ce0),
    .output_buffer_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer_we0),
    .output_buffer_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer_d0),
    .output_buffer1_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer1_address0),
    .output_buffer1_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer1_ce0),
    .output_buffer1_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer1_we0),
    .output_buffer1_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer1_d0),
    .output_buffer2_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer2_address0),
    .output_buffer2_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer2_ce0),
    .output_buffer2_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer2_we0),
    .output_buffer2_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer2_d0),
    .output_buffer3_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer3_address0),
    .output_buffer3_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer3_ce0),
    .output_buffer3_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer3_we0),
    .output_buffer3_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer3_d0),
    .output_buffer4_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer4_address0),
    .output_buffer4_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer4_ce0),
    .output_buffer4_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer4_we0),
    .output_buffer4_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer4_d0),
    .output_buffer5_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer5_address0),
    .output_buffer5_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer5_ce0),
    .output_buffer5_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer5_we0),
    .output_buffer5_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer5_d0),
    .output_buffer6_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer6_address0),
    .output_buffer6_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer6_ce0),
    .output_buffer6_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer6_we0),
    .output_buffer6_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer6_d0),
    .output_buffer7_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer7_address0),
    .output_buffer7_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer7_ce0),
    .output_buffer7_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer7_we0),
    .output_buffer7_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer7_d0),
    .output_buffer8_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer8_address0),
    .output_buffer8_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer8_ce0),
    .output_buffer8_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer8_we0),
    .output_buffer8_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer8_d0),
    .output_buffer9_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer9_address0),
    .output_buffer9_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer9_ce0),
    .output_buffer9_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer9_we0),
    .output_buffer9_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer9_d0),
    .output_buffer10_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer10_address0),
    .output_buffer10_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer10_ce0),
    .output_buffer10_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer10_we0),
    .output_buffer10_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer10_d0),
    .output_buffer11_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer11_address0),
    .output_buffer11_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer11_ce0),
    .output_buffer11_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer11_we0),
    .output_buffer11_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer11_d0),
    .output_buffer12_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer12_address0),
    .output_buffer12_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer12_ce0),
    .output_buffer12_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer12_we0),
    .output_buffer12_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer12_d0),
    .output_buffer13_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer13_address0),
    .output_buffer13_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer13_ce0),
    .output_buffer13_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer13_we0),
    .output_buffer13_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer13_d0),
    .output_buffer14_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer14_address0),
    .output_buffer14_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer14_ce0),
    .output_buffer14_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer14_we0),
    .output_buffer14_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer14_d0),
    .output_buffer15_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer15_address0),
    .output_buffer15_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer15_ce0),
    .output_buffer15_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer15_we0),
    .output_buffer15_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer15_d0),
    .output_buffer16_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer16_address0),
    .output_buffer16_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer16_ce0),
    .output_buffer16_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer16_we0),
    .output_buffer16_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer16_d0),
    .output_buffer17_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer17_address0),
    .output_buffer17_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer17_ce0),
    .output_buffer17_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer17_we0),
    .output_buffer17_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer17_d0),
    .output_buffer18_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer18_address0),
    .output_buffer18_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer18_ce0),
    .output_buffer18_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer18_we0),
    .output_buffer18_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer18_d0),
    .output_buffer19_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer19_address0),
    .output_buffer19_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer19_ce0),
    .output_buffer19_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer19_we0),
    .output_buffer19_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer19_d0),
    .output_buffer20_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer20_address0),
    .output_buffer20_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer20_ce0),
    .output_buffer20_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer20_we0),
    .output_buffer20_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer20_d0),
    .output_buffer21_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer21_address0),
    .output_buffer21_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer21_ce0),
    .output_buffer21_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer21_we0),
    .output_buffer21_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer21_d0),
    .output_buffer22_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer22_address0),
    .output_buffer22_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer22_ce0),
    .output_buffer22_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer22_we0),
    .output_buffer22_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer22_d0),
    .output_buffer23_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer23_address0),
    .output_buffer23_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer23_ce0),
    .output_buffer23_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer23_we0),
    .output_buffer23_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer23_d0),
    .output_buffer24_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer24_address0),
    .output_buffer24_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer24_ce0),
    .output_buffer24_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer24_we0),
    .output_buffer24_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer24_d0),
    .output_buffer25_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer25_address0),
    .output_buffer25_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer25_ce0),
    .output_buffer25_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer25_we0),
    .output_buffer25_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer25_d0),
    .output_buffer26_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer26_address0),
    .output_buffer26_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer26_ce0),
    .output_buffer26_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer26_we0),
    .output_buffer26_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer26_d0),
    .output_buffer27_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer27_address0),
    .output_buffer27_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer27_ce0),
    .output_buffer27_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer27_we0),
    .output_buffer27_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer27_d0),
    .output_buffer28_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer28_address0),
    .output_buffer28_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer28_ce0),
    .output_buffer28_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer28_we0),
    .output_buffer28_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer28_d0),
    .output_buffer29_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer29_address0),
    .output_buffer29_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer29_ce0),
    .output_buffer29_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer29_we0),
    .output_buffer29_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer29_d0),
    .output_buffer30_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer30_address0),
    .output_buffer30_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer30_ce0),
    .output_buffer30_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer30_we0),
    .output_buffer30_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer30_d0),
    .output_buffer31_address0(grp_intra_pingpong_wrapper_fu_1100_output_buffer31_address0),
    .output_buffer31_ce0(grp_intra_pingpong_wrapper_fu_1100_output_buffer31_ce0),
    .output_buffer31_we0(grp_intra_pingpong_wrapper_fu_1100_output_buffer31_we0),
    .output_buffer31_d0(grp_intra_pingpong_wrapper_fu_1100_output_buffer31_d0),
    .InFM_num(InFM_num_read_reg_2457),
    .Input_w(Input_w_read_reg_2430),
    .Input_h(empty_155_reg_2497),
    .Kernel_size(empty_154_reg_2492),
    .Kernel_stride(empty_153_reg_2487),
    .TMP_R(trunc_ln741_reg_2815),
    .TMP_C(trunc_ln744_reg_2810),
    .TMP_M(TMP_M_reg_1064),
    .TM_MIN(TM_MIN_reg_2805),
    .TR_MIN(TR_MIN_reg_2732),
    .TC_MIN(TC_MIN_reg_2761),
    .TN(TN_read_reg_2401),
    .TRow(TRow_reg_2535),
    .TCol(TCol_reg_2540),
    .Padding(empty_reg_2482),
    .IHxIW(trunc_ln704_reg_2545),
    .KxK(KxK_reg_2587),
    .nLoops(nLoops_read_reg_2375),
    .IsNL(IsNL_read_reg_2414),
    .LayerType(LayerType_read_reg_2358),
    .TM(TM_read_reg_2406),
    .p_read(grp_intra_pingpong_wrapper_fu_1100_p_read),
    .p_read1(grp_intra_pingpong_wrapper_fu_1100_p_read1),
    .pingpongx_offset(grp_intra_pingpong_wrapper_fu_1100_pingpongx_offset),
    .input_flag(input_flag_reg_2785),
    .process_flag(process_flag_reg_2790),
    .InterSubBeta(InterSubBeta_reg_2613),
    .WeightAddInputSubInter(WeightAddInputSubInter_reg_2530),
    .InterSubOutput(InterSubOutput_reg_2608),
    .beta_buffer_address0(grp_intra_pingpong_wrapper_fu_1100_beta_buffer_address0),
    .beta_buffer_ce0(grp_intra_pingpong_wrapper_fu_1100_beta_buffer_ce0),
    .beta_buffer_q0(beta_buffer_q0),
    .ap_return_0(grp_intra_pingpong_wrapper_fu_1100_ap_return_0),
    .ap_return_1(grp_intra_pingpong_wrapper_fu_1100_ap_return_1)
);

YOLO2_FPGA_write_back_output_reorg grp_write_back_output_reorg_fu_1644(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_back_output_reorg_fu_1644_ap_start),
    .ap_done(grp_write_back_output_reorg_fu_1644_ap_done),
    .ap_idle(grp_write_back_output_reorg_fu_1644_ap_idle),
    .ap_ready(grp_write_back_output_reorg_fu_1644_ap_ready),
    .m_axi_DATA_BUS_AWVALID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWVALID),
    .m_axi_DATA_BUS_AWREADY(DATA_BUS_AWREADY),
    .m_axi_DATA_BUS_AWADDR(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWADDR),
    .m_axi_DATA_BUS_AWID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWID),
    .m_axi_DATA_BUS_AWLEN(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWLEN),
    .m_axi_DATA_BUS_AWSIZE(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWSIZE),
    .m_axi_DATA_BUS_AWBURST(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWBURST),
    .m_axi_DATA_BUS_AWLOCK(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWLOCK),
    .m_axi_DATA_BUS_AWCACHE(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWCACHE),
    .m_axi_DATA_BUS_AWPROT(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWPROT),
    .m_axi_DATA_BUS_AWQOS(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWQOS),
    .m_axi_DATA_BUS_AWREGION(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWREGION),
    .m_axi_DATA_BUS_AWUSER(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWUSER),
    .m_axi_DATA_BUS_WVALID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WVALID),
    .m_axi_DATA_BUS_WREADY(DATA_BUS_WREADY),
    .m_axi_DATA_BUS_WDATA(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WDATA),
    .m_axi_DATA_BUS_WSTRB(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WSTRB),
    .m_axi_DATA_BUS_WLAST(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WLAST),
    .m_axi_DATA_BUS_WID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WID),
    .m_axi_DATA_BUS_WUSER(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WUSER),
    .m_axi_DATA_BUS_ARVALID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARVALID),
    .m_axi_DATA_BUS_ARREADY(1'b0),
    .m_axi_DATA_BUS_ARADDR(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARADDR),
    .m_axi_DATA_BUS_ARID(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARID),
    .m_axi_DATA_BUS_ARLEN(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARLEN),
    .m_axi_DATA_BUS_ARSIZE(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARSIZE),
    .m_axi_DATA_BUS_ARBURST(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARBURST),
    .m_axi_DATA_BUS_ARLOCK(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARLOCK),
    .m_axi_DATA_BUS_ARCACHE(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARCACHE),
    .m_axi_DATA_BUS_ARPROT(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARPROT),
    .m_axi_DATA_BUS_ARQOS(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARQOS),
    .m_axi_DATA_BUS_ARREGION(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARREGION),
    .m_axi_DATA_BUS_ARUSER(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_ARUSER),
    .m_axi_DATA_BUS_RVALID(1'b0),
    .m_axi_DATA_BUS_RREADY(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_RREADY),
    .m_axi_DATA_BUS_RDATA(32'd0),
    .m_axi_DATA_BUS_RLAST(1'b0),
    .m_axi_DATA_BUS_RID(1'd0),
    .m_axi_DATA_BUS_RUSER(1'd0),
    .m_axi_DATA_BUS_RRESP(2'd0),
    .m_axi_DATA_BUS_BVALID(DATA_BUS_BVALID),
    .m_axi_DATA_BUS_BREADY(grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_BREADY),
    .m_axi_DATA_BUS_BRESP(DATA_BUS_BRESP),
    .m_axi_DATA_BUS_BID(DATA_BUS_BID),
    .m_axi_DATA_BUS_BUSER(DATA_BUS_BUSER),
    .output_buffer_address0(grp_write_back_output_reorg_fu_1644_output_buffer_address0),
    .output_buffer_ce0(grp_write_back_output_reorg_fu_1644_output_buffer_ce0),
    .output_buffer_q0(grp_write_back_output_reorg_fu_1644_output_buffer_q0),
    .output_buffer1_address0(grp_write_back_output_reorg_fu_1644_output_buffer1_address0),
    .output_buffer1_ce0(grp_write_back_output_reorg_fu_1644_output_buffer1_ce0),
    .output_buffer1_q0(grp_write_back_output_reorg_fu_1644_output_buffer1_q0),
    .output_buffer2_address0(grp_write_back_output_reorg_fu_1644_output_buffer2_address0),
    .output_buffer2_ce0(grp_write_back_output_reorg_fu_1644_output_buffer2_ce0),
    .output_buffer2_q0(grp_write_back_output_reorg_fu_1644_output_buffer2_q0),
    .output_buffer3_address0(grp_write_back_output_reorg_fu_1644_output_buffer3_address0),
    .output_buffer3_ce0(grp_write_back_output_reorg_fu_1644_output_buffer3_ce0),
    .output_buffer3_q0(grp_write_back_output_reorg_fu_1644_output_buffer3_q0),
    .output_buffer4_address0(grp_write_back_output_reorg_fu_1644_output_buffer4_address0),
    .output_buffer4_ce0(grp_write_back_output_reorg_fu_1644_output_buffer4_ce0),
    .output_buffer4_q0(grp_write_back_output_reorg_fu_1644_output_buffer4_q0),
    .output_buffer5_address0(grp_write_back_output_reorg_fu_1644_output_buffer5_address0),
    .output_buffer5_ce0(grp_write_back_output_reorg_fu_1644_output_buffer5_ce0),
    .output_buffer5_q0(grp_write_back_output_reorg_fu_1644_output_buffer5_q0),
    .output_buffer6_address0(grp_write_back_output_reorg_fu_1644_output_buffer6_address0),
    .output_buffer6_ce0(grp_write_back_output_reorg_fu_1644_output_buffer6_ce0),
    .output_buffer6_q0(grp_write_back_output_reorg_fu_1644_output_buffer6_q0),
    .output_buffer7_address0(grp_write_back_output_reorg_fu_1644_output_buffer7_address0),
    .output_buffer7_ce0(grp_write_back_output_reorg_fu_1644_output_buffer7_ce0),
    .output_buffer7_q0(grp_write_back_output_reorg_fu_1644_output_buffer7_q0),
    .output_buffer8_address0(grp_write_back_output_reorg_fu_1644_output_buffer8_address0),
    .output_buffer8_ce0(grp_write_back_output_reorg_fu_1644_output_buffer8_ce0),
    .output_buffer8_q0(grp_write_back_output_reorg_fu_1644_output_buffer8_q0),
    .output_buffer9_address0(grp_write_back_output_reorg_fu_1644_output_buffer9_address0),
    .output_buffer9_ce0(grp_write_back_output_reorg_fu_1644_output_buffer9_ce0),
    .output_buffer9_q0(grp_write_back_output_reorg_fu_1644_output_buffer9_q0),
    .output_buffer10_address0(grp_write_back_output_reorg_fu_1644_output_buffer10_address0),
    .output_buffer10_ce0(grp_write_back_output_reorg_fu_1644_output_buffer10_ce0),
    .output_buffer10_q0(grp_write_back_output_reorg_fu_1644_output_buffer10_q0),
    .output_buffer11_address0(grp_write_back_output_reorg_fu_1644_output_buffer11_address0),
    .output_buffer11_ce0(grp_write_back_output_reorg_fu_1644_output_buffer11_ce0),
    .output_buffer11_q0(grp_write_back_output_reorg_fu_1644_output_buffer11_q0),
    .output_buffer12_address0(grp_write_back_output_reorg_fu_1644_output_buffer12_address0),
    .output_buffer12_ce0(grp_write_back_output_reorg_fu_1644_output_buffer12_ce0),
    .output_buffer12_q0(grp_write_back_output_reorg_fu_1644_output_buffer12_q0),
    .output_buffer13_address0(grp_write_back_output_reorg_fu_1644_output_buffer13_address0),
    .output_buffer13_ce0(grp_write_back_output_reorg_fu_1644_output_buffer13_ce0),
    .output_buffer13_q0(grp_write_back_output_reorg_fu_1644_output_buffer13_q0),
    .output_buffer14_address0(grp_write_back_output_reorg_fu_1644_output_buffer14_address0),
    .output_buffer14_ce0(grp_write_back_output_reorg_fu_1644_output_buffer14_ce0),
    .output_buffer14_q0(grp_write_back_output_reorg_fu_1644_output_buffer14_q0),
    .output_buffer15_address0(grp_write_back_output_reorg_fu_1644_output_buffer15_address0),
    .output_buffer15_ce0(grp_write_back_output_reorg_fu_1644_output_buffer15_ce0),
    .output_buffer15_q0(grp_write_back_output_reorg_fu_1644_output_buffer15_q0),
    .output_buffer16_address0(grp_write_back_output_reorg_fu_1644_output_buffer16_address0),
    .output_buffer16_ce0(grp_write_back_output_reorg_fu_1644_output_buffer16_ce0),
    .output_buffer16_q0(grp_write_back_output_reorg_fu_1644_output_buffer16_q0),
    .output_buffer17_address0(grp_write_back_output_reorg_fu_1644_output_buffer17_address0),
    .output_buffer17_ce0(grp_write_back_output_reorg_fu_1644_output_buffer17_ce0),
    .output_buffer17_q0(grp_write_back_output_reorg_fu_1644_output_buffer17_q0),
    .output_buffer18_address0(grp_write_back_output_reorg_fu_1644_output_buffer18_address0),
    .output_buffer18_ce0(grp_write_back_output_reorg_fu_1644_output_buffer18_ce0),
    .output_buffer18_q0(grp_write_back_output_reorg_fu_1644_output_buffer18_q0),
    .output_buffer19_address0(grp_write_back_output_reorg_fu_1644_output_buffer19_address0),
    .output_buffer19_ce0(grp_write_back_output_reorg_fu_1644_output_buffer19_ce0),
    .output_buffer19_q0(grp_write_back_output_reorg_fu_1644_output_buffer19_q0),
    .output_buffer20_address0(grp_write_back_output_reorg_fu_1644_output_buffer20_address0),
    .output_buffer20_ce0(grp_write_back_output_reorg_fu_1644_output_buffer20_ce0),
    .output_buffer20_q0(grp_write_back_output_reorg_fu_1644_output_buffer20_q0),
    .output_buffer21_address0(grp_write_back_output_reorg_fu_1644_output_buffer21_address0),
    .output_buffer21_ce0(grp_write_back_output_reorg_fu_1644_output_buffer21_ce0),
    .output_buffer21_q0(grp_write_back_output_reorg_fu_1644_output_buffer21_q0),
    .output_buffer22_address0(grp_write_back_output_reorg_fu_1644_output_buffer22_address0),
    .output_buffer22_ce0(grp_write_back_output_reorg_fu_1644_output_buffer22_ce0),
    .output_buffer22_q0(grp_write_back_output_reorg_fu_1644_output_buffer22_q0),
    .output_buffer23_address0(grp_write_back_output_reorg_fu_1644_output_buffer23_address0),
    .output_buffer23_ce0(grp_write_back_output_reorg_fu_1644_output_buffer23_ce0),
    .output_buffer23_q0(grp_write_back_output_reorg_fu_1644_output_buffer23_q0),
    .output_buffer24_address0(grp_write_back_output_reorg_fu_1644_output_buffer24_address0),
    .output_buffer24_ce0(grp_write_back_output_reorg_fu_1644_output_buffer24_ce0),
    .output_buffer24_q0(grp_write_back_output_reorg_fu_1644_output_buffer24_q0),
    .output_buffer25_address0(grp_write_back_output_reorg_fu_1644_output_buffer25_address0),
    .output_buffer25_ce0(grp_write_back_output_reorg_fu_1644_output_buffer25_ce0),
    .output_buffer25_q0(grp_write_back_output_reorg_fu_1644_output_buffer25_q0),
    .output_buffer26_address0(grp_write_back_output_reorg_fu_1644_output_buffer26_address0),
    .output_buffer26_ce0(grp_write_back_output_reorg_fu_1644_output_buffer26_ce0),
    .output_buffer26_q0(grp_write_back_output_reorg_fu_1644_output_buffer26_q0),
    .output_buffer27_address0(grp_write_back_output_reorg_fu_1644_output_buffer27_address0),
    .output_buffer27_ce0(grp_write_back_output_reorg_fu_1644_output_buffer27_ce0),
    .output_buffer27_q0(grp_write_back_output_reorg_fu_1644_output_buffer27_q0),
    .output_buffer28_address0(grp_write_back_output_reorg_fu_1644_output_buffer28_address0),
    .output_buffer28_ce0(grp_write_back_output_reorg_fu_1644_output_buffer28_ce0),
    .output_buffer28_q0(grp_write_back_output_reorg_fu_1644_output_buffer28_q0),
    .output_buffer29_address0(grp_write_back_output_reorg_fu_1644_output_buffer29_address0),
    .output_buffer29_ce0(grp_write_back_output_reorg_fu_1644_output_buffer29_ce0),
    .output_buffer29_q0(grp_write_back_output_reorg_fu_1644_output_buffer29_q0),
    .output_buffer30_address0(grp_write_back_output_reorg_fu_1644_output_buffer30_address0),
    .output_buffer30_ce0(grp_write_back_output_reorg_fu_1644_output_buffer30_ce0),
    .output_buffer30_q0(grp_write_back_output_reorg_fu_1644_output_buffer30_q0),
    .output_buffer31_address0(grp_write_back_output_reorg_fu_1644_output_buffer31_address0),
    .output_buffer31_ce0(grp_write_back_output_reorg_fu_1644_output_buffer31_ce0),
    .output_buffer31_q0(grp_write_back_output_reorg_fu_1644_output_buffer31_q0),
    .Output_r(Output_read_reg_2472),
    .r(TMP_R_reg_1006),
    .c(TMP_C_reg_1029),
    .m(grp_write_back_output_reorg_fu_1644_m),
    .Output_w(add_ln699_2_reg_2577),
    .TM_MIN(grp_write_back_output_reorg_fu_1644_TM_MIN),
    .TR_MIN(trunc_ln729_reg_2737),
    .TC_MIN(trunc_ln729_1_reg_2766),
    .OHxOW(trunc_ln701_reg_2582),
    .write_flag(write_flag_reg_2795)
);

YOLO2_FPGA_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U518(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Input_h_read_reg_2424),
    .din1(Input_w_read_reg_2430),
    .ce(1'b1),
    .dout(grp_fu_1829_p2)
);

YOLO2_FPGA_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U519(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1843_ap_start),
    .done(grp_fu_1843_ap_done),
    .din0(add_ln699_reg_2520),
    .din1(Kernel_stride_read_reg_2437),
    .ce(1'b1),
    .dout(grp_fu_1843_p2)
);

YOLO2_FPGA_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U520(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1847_ap_start),
    .done(grp_fu_1847_ap_done),
    .din0(add_ln700_reg_2525),
    .din1(Kernel_stride_read_reg_2437),
    .ce(1'b1),
    .dout(grp_fu_1847_p2)
);

YOLO2_FPGA_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U521(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(output_h_reg_2571),
    .din1(output_w_reg_2565),
    .ce(1'b1),
    .dout(grp_fu_1869_p2)
);

YOLO2_FPGA_mul_4s_4s_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
mul_4s_4s_4_1_1_U522(
    .din0(empty_156_reg_2502),
    .din1(empty_156_reg_2502),
    .dout(KxK_fu_1882_p2)
);

YOLO2_FPGA_ama_addmuladd_6ns_1s_6s_6ns_6_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
ama_addmuladd_6ns_1s_6s_6ns_6_4_1_U523(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2320_p0),
    .din1(grp_fu_2320_p1),
    .din2(empty_159_fu_1796_p1),
    .din3(empty_158_reg_2508),
    .ce(1'b1),
    .dout(grp_fu_2320_p4)
);

YOLO2_FPGA_ama_addmuladd_6ns_1s_6s_6ns_6_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
ama_addmuladd_6ns_1s_6s_6ns_6_4_1_U524(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2329_p0),
    .din1(grp_fu_2329_p1),
    .din2(empty_159_fu_1796_p1),
    .din3(empty_158_reg_2508),
    .ce(1'b1),
    .dout(grp_fu_2329_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state54) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state53)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state54)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state54);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state53)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state58) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state57) & (icmp_ln650_fu_2028_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state58)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state58);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state57) & (icmp_ln650_fu_2028_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_intra_pingpong_wrapper_fu_1100_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
            grp_intra_pingpong_wrapper_fu_1100_ap_start_reg <= 1'b1;
        end else if ((grp_intra_pingpong_wrapper_fu_1100_ap_ready == 1'b1)) begin
            grp_intra_pingpong_wrapper_fu_1100_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_back_output_reorg_fu_1644_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
            grp_write_back_output_reorg_fu_1644_ap_start_reg <= 1'b1;
        end else if ((grp_write_back_output_reorg_fu_1644_ap_ready == 1'b1)) begin
            grp_write_back_output_reorg_fu_1644_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (icmp_ln748_fu_2175_p2 == 1'd0))) begin
        TMP_C_reg_1029 <= TMP_C_1_fu_2242_p2;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        TMP_C_reg_1029 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (1'b0 == ap_block_state69_on_subcall_done))) begin
        TMP_M_reg_1064 <= TMP_M_1_fu_2315_p2;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        TMP_M_reg_1064 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln744_fu_2136_p2 == 1'd0))) begin
        TMP_R_reg_1006 <= TMP_R_1_fu_2146_p2;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        TMP_R_reg_1006 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (icmp_ln748_fu_2175_p2 == 1'd0))) begin
        c_reg_1041 <= c_1_reg_2742;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        c_reg_1041 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        loop_index_reg_983 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond268_reg_2645 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        loop_index_reg_983 <= empty_162_reg_2640;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (1'b0 == ap_block_state69_on_subcall_done))) begin
        m_reg_1076 <= m_1_reg_2771;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        m_reg_1076 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (1'b0 == ap_block_state69_on_subcall_done))) begin
        pingpongm_reg_1052 <= ap_phi_mux_pingpongm_1_phi_fu_1091_p4;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        pingpongm_reg_1052 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln744_fu_2136_p2 == 1'd0))) begin
        r_reg_1018 <= r_4_reg_2718;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        r_reg_1018 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) & (icmp_ln650_fu_2028_p2 == 1'd1))) begin
        x_reg_995 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln650_1_fu_2043_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x_reg_995 <= add_ln650_fu_2033_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == BetaQ_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == BetaQ_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == BetaQ_0_vld_reg) & (1'b1 == 1'b1)))) begin
        BetaQ_0_data_reg <= BetaQ;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        BetaQ_read_reg_2338 <= BetaQ_0_data_reg;
        Beta_read_reg_2462 <= Beta_0_data_reg;
        InFM_num_read_reg_2457 <= InFM_num_0_data_reg;
        InputQ_read_reg_2353 <= InputQ_0_data_reg;
        Input_h_read_reg_2424 <= Input_h_0_data_reg;
        Input_read_reg_2477 <= Input_r_0_data_reg;
        Input_w_read_reg_2430 <= Input_w_0_data_reg;
        IsNL_read_reg_2414 <= IsNL_0_data_reg;
        Kernel_size_read_reg_2443 <= Kernel_size_0_data_reg;
        Kernel_stride_read_reg_2437 <= Kernel_stride_0_data_reg;
        LayerType_read_reg_2358 <= LayerType_0_data_reg;
        OutFM_num_read_reg_2449 <= OutFM_num_0_data_reg;
        OutputQ_read_reg_2348 <= OutputQ_0_data_reg;
        Output_read_reg_2472 <= Output_r_0_data_reg;
        Padding_read_reg_2419 <= Padding_0_data_reg;
        TC_read_reg_2387 <= TC_0_data_reg;
        TM_read_reg_2406 <= TM_0_data_reg;
        TN_read_reg_2401 <= TN_0_data_reg;
        TR_read_reg_2394 <= TR_0_data_reg;
        WeightQ_read_reg_2343 <= WeightQ_0_data_reg;
        Weight_read_reg_2467 <= Weight_0_data_reg;
        cLoops_read_reg_2365 <= cLoops_0_data_reg;
        empty_153_reg_2487 <= empty_153_fu_1772_p1;
        empty_154_reg_2492 <= empty_154_fu_1776_p1;
        empty_155_reg_2497 <= empty_155_fu_1780_p1;
        empty_156_reg_2502 <= empty_156_fu_1784_p1;
        empty_158_reg_2508 <= empty_158_fu_1792_p1;
        empty_reg_2482 <= empty_fu_1768_p1;
        mLoops_read_reg_2380 <= mLoops_0_data_reg;
        nLoops_read_reg_2375 <= nLoops_0_data_reg;
        rLoops_read_reg_2370 <= rLoops_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Beta_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Beta_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Beta_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Beta_0_data_reg <= Beta;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond268_reg_2645 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        DATA_BUS2_addr_read_reg_2649 <= DATA_BUS2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln648_fu_1984_p2 == 1'd0))) begin
        DATA_BUS2_addr_reg_2634 <= p_cast_cast_fu_1998_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == InFM_num_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == InFM_num_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == InFM_num_0_vld_reg) & (1'b1 == 1'b1)))) begin
        InFM_num_0_data_reg <= InFM_num;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == InputQ_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == InputQ_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == InputQ_0_vld_reg) & (1'b1 == 1'b1)))) begin
        InputQ_0_data_reg <= InputQ;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Input_h_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Input_h_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Input_h_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Input_h_0_data_reg <= Input_h;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Input_r_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Input_r_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Input_r_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Input_r_0_data_reg <= Input_r;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Input_w_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Input_w_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Input_w_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Input_w_0_data_reg <= Input_w;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        InterSubBeta_reg_2613 <= InterSubBeta_fu_1914_p2;
        InterSubOutput_reg_2608 <= InterSubOutput_fu_1909_p2;
        KxK_reg_2587 <= KxK_fu_1882_p2;
        add_ln699_2_reg_2577 <= add_ln699_2_fu_1873_p2;
        add_ln707_1_reg_2598 <= add_ln707_1_fu_1896_p2;
        icmp_ln707_reg_2592 <= icmp_ln707_fu_1886_p2;
        mLoops_bound_reg_2603 <= mLoops_bound_fu_1901_p3;
        trunc_ln701_reg_2582 <= trunc_ln701_fu_1878_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == IsNL_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == IsNL_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == IsNL_0_vld_reg) & (1'b1 == 1'b1)))) begin
        IsNL_0_data_reg <= IsNL;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Kernel_size_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Kernel_size_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Kernel_size_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Kernel_size_0_data_reg <= Kernel_size;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Kernel_stride_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Kernel_stride_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Kernel_stride_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Kernel_stride_0_data_reg <= Kernel_stride;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == LayerType_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == LayerType_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == LayerType_0_vld_reg) & (1'b1 == 1'b1)))) begin
        LayerType_0_data_reg <= LayerType;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln738_fu_1919_p2 == 1'd1))) begin
        NUM_reg_2622 <= NUM_fu_1976_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == OutFM_num_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == OutFM_num_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == OutFM_num_0_vld_reg) & (1'b1 == 1'b1)))) begin
        OutFM_num_0_data_reg <= OutFM_num;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == OutputQ_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == OutputQ_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == OutputQ_0_vld_reg) & (1'b1 == 1'b1)))) begin
        OutputQ_0_data_reg <= OutputQ;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Output_r_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Output_r_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Output_r_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Output_r_0_data_reg <= Output_r;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Padding_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Padding_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Padding_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Padding_0_data_reg <= Padding;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == TC_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == TC_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == TC_0_vld_reg) & (1'b1 == 1'b1)))) begin
        TC_0_data_reg <= TC;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        TC_MIN_reg_2761 <= TC_MIN_fu_2155_p3;
        trunc_ln729_1_reg_2766 <= trunc_ln729_1_fu_2161_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        TCol_reg_2540 <= grp_fu_2329_p4;
        TRow_reg_2535 <= grp_fu_2320_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1) & (1'b0 == ap_block_state69_on_subcall_done))) begin
        TMP_M_next0_0_1_fu_760 <= grp_intra_pingpong_wrapper_fu_1100_ap_return_0;
        TM_MIN_next0_0_1_fu_768 <= grp_intra_pingpong_wrapper_fu_1100_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0) & (1'b0 == ap_block_state69_on_subcall_done))) begin
        TMP_M_next1_0_1_fu_764 <= grp_intra_pingpong_wrapper_fu_1100_ap_return_0;
        TM_MIN_next1_0_1_fu_772 <= grp_intra_pingpong_wrapper_fu_1100_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == TM_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == TM_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == TM_0_vld_reg) & (1'b1 == 1'b1)))) begin
        TM_0_data_reg <= TM;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        TM_MIN_reg_2805 <= TM_MIN_fu_2251_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == TN_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == TN_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == TN_0_vld_reg) & (1'b1 == 1'b1)))) begin
        TN_0_data_reg <= TN;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == TR_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == TR_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == TR_0_vld_reg) & (1'b1 == 1'b1)))) begin
        TR_0_data_reg <= TR;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        TR_MIN_reg_2732 <= TR_MIN_fu_2116_p3;
        trunc_ln729_reg_2737 <= trunc_ln729_fu_2122_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        WeightAddInputSubInter_reg_2530 <= WeightAddInputSubInter_fu_1838_p2;
        add_ln699_reg_2520 <= add_ln699_fu_1813_p2;
        add_ln700_reg_2525 <= add_ln700_fu_1823_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == WeightQ_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == WeightQ_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == WeightQ_0_vld_reg) & (1'b1 == 1'b1)))) begin
        WeightQ_0_data_reg <= WeightQ;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Weight_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Weight_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Weight_0_vld_reg) & (1'b1 == 1'b1)))) begin
        Weight_0_data_reg <= Weight;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (cLoops_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (cLoops_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (cLoops_0_vld_reg == 1'b0)))) begin
        cLoops_0_data_reg <= cLoops;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        c_1_reg_2742 <= c_1_fu_2126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_162_reg_2640 <= empty_162_fu_2008_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond268_reg_2645 <= exitcond268_fu_2018_p2;
        exitcond268_reg_2645_pp0_iter1_reg <= exitcond268_reg_2645;
        loop_index_reg_983_pp0_iter1_reg <= loop_index_reg_983;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln650_1_reg_2663 <= icmp_ln650_1_fu_2043_p2;
        icmp_ln650_1_reg_2663_pp1_iter1_reg <= icmp_ln650_1_reg_2663;
        shl_ln653_reg_2672_pp1_iter1_reg[9 : 1] <= shl_ln653_reg_2672[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (icmp_ln748_fu_2175_p2 == 1'd1))) begin
        input_flag_reg_2785 <= input_flag_fu_2212_p2;
        process_flag_reg_2790 <= process_flag_fu_2224_p3;
        sub_ln750_reg_2779 <= sub_ln750_fu_2180_p2;
        write_flag_reg_2795 <= write_flag_fu_2236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (mLoops_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mLoops_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (mLoops_0_vld_reg == 1'b0)))) begin
        mLoops_0_data_reg <= mLoops;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        m_1_reg_2771 <= m_1_fu_2165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (nLoops_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (nLoops_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (nLoops_0_vld_reg == 1'b0)))) begin
        nLoops_0_data_reg <= nLoops;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_h_reg_2571 <= output_h_fu_1864_p2;
        output_w_reg_2565 <= output_w_fu_1859_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (rLoops_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (rLoops_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (rLoops_0_vld_reg == 1'b0)))) begin
        rLoops_0_data_reg <= rLoops;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        r_4_reg_2718 <= r_4_fu_2092_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        sdiv_ln699_reg_2550 <= grp_fu_1843_p2;
        sdiv_ln700_reg_2560 <= grp_fu_1847_p2;
        trunc_ln699_reg_2555 <= trunc_ln699_fu_1855_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln650_1_fu_2043_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        shl_ln653_reg_2672[9 : 1] <= shl_ln653_fu_2053_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd1))) begin
        sub_ln743_reg_2726 <= sub_ln743_fu_2107_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln744_fu_2136_p2 == 1'd1))) begin
        sub_ln746_reg_2750 <= sub_ln746_fu_2141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln650_1_reg_2663 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln653_reg_2678 <= trunc_ln653_fu_2059_p1;
        trunc_ln_reg_2683 <= {{beta_tmp_q0[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln704_reg_2545 <= trunc_ln704_fu_1851_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        trunc_ln741_reg_2815 <= trunc_ln741_fu_2262_p1;
        trunc_ln744_reg_2810 <= trunc_ln744_fu_2257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0))) begin
        trunc_ln748_1_reg_2832 <= trunc_ln748_1_fu_2285_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1))) begin
        trunc_ln748_reg_2837 <= trunc_ln748_fu_2290_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        xor_ln755_reg_2712 <= xor_ln755_fu_2087_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        BetaQ_0_ack_out = 1'b1;
    end else begin
        BetaQ_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Beta_0_ack_out = 1'b1;
    end else begin
        Beta_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_BUS2_ARREADY) & (1'b1 == ap_CS_fsm_state47))) begin
        DATA_BUS2_ARADDR = DATA_BUS2_addr_reg_2634;
    end else if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARADDR = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARADDR;
    end else begin
        DATA_BUS2_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARBURST = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARBURST;
    end else begin
        DATA_BUS2_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARCACHE = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARCACHE;
    end else begin
        DATA_BUS2_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARID = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARID;
    end else begin
        DATA_BUS2_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_BUS2_ARREADY) & (1'b1 == ap_CS_fsm_state47))) begin
        DATA_BUS2_ARLEN = NUM_reg_2622;
    end else if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARLEN = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARLEN;
    end else begin
        DATA_BUS2_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARLOCK = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARLOCK;
    end else begin
        DATA_BUS2_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARPROT = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARPROT;
    end else begin
        DATA_BUS2_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARQOS = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARQOS;
    end else begin
        DATA_BUS2_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARREGION = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARREGION;
    end else begin
        DATA_BUS2_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARSIZE = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARSIZE;
    end else begin
        DATA_BUS2_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARUSER = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARUSER;
    end else begin
        DATA_BUS2_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_BUS2_ARREADY) & (1'b1 == ap_CS_fsm_state47))) begin
        DATA_BUS2_ARVALID = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_ARVALID = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_ARVALID;
    end else begin
        DATA_BUS2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond268_reg_2645 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        DATA_BUS2_RREADY = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS2_RREADY = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS2_RREADY;
    end else begin
        DATA_BUS2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        DATA_BUS2_blk_n_AR = m_axi_DATA_BUS2_ARREADY;
    end else begin
        DATA_BUS2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond268_reg_2645 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        DATA_BUS2_blk_n_R = m_axi_DATA_BUS2_RVALID;
    end else begin
        DATA_BUS2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS_ARVALID = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_ARVALID;
    end else begin
        DATA_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS_AWVALID = grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_AWVALID;
    end else begin
        DATA_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS_BREADY = grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_BREADY;
    end else begin
        DATA_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS_RREADY = grp_intra_pingpong_wrapper_fu_1100_m_axi_DATA_BUS_RREADY;
    end else begin
        DATA_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state68) & (pingpongm_reg_1052 == 1'd0)))) begin
        DATA_BUS_WVALID = grp_write_back_output_reorg_fu_1644_m_axi_DATA_BUS_WVALID;
    end else begin
        DATA_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        InFM_num_0_ack_out = 1'b1;
    end else begin
        InFM_num_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        InputQ_0_ack_out = 1'b1;
    end else begin
        InputQ_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Input_h_0_ack_out = 1'b1;
    end else begin
        Input_h_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Input_r_0_ack_out = 1'b1;
    end else begin
        Input_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Input_w_0_ack_out = 1'b1;
    end else begin
        Input_w_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        IsNL_0_ack_out = 1'b1;
    end else begin
        IsNL_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Kernel_size_0_ack_out = 1'b1;
    end else begin
        Kernel_size_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Kernel_stride_0_ack_out = 1'b1;
    end else begin
        Kernel_stride_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        LayerType_0_ack_out = 1'b1;
    end else begin
        LayerType_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        OutFM_num_0_ack_out = 1'b1;
    end else begin
        OutFM_num_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        OutputQ_0_ack_out = 1'b1;
    end else begin
        OutputQ_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Output_r_0_ack_out = 1'b1;
    end else begin
        Output_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Padding_0_ack_out = 1'b1;
    end else begin
        Padding_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        TC_0_ack_out = 1'b1;
    end else begin
        TC_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        TM_0_ack_out = 1'b1;
    end else begin
        TM_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        TN_0_ack_out = 1'b1;
    end else begin
        TN_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        TR_0_ack_out = 1'b1;
    end else begin
        TR_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        WeightQ_0_ack_out = 1'b1;
    end else begin
        WeightQ_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        Weight_0_ack_out = 1'b1;
    end else begin
        Weight_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond268_fu_2018_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state54 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state54 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln650_1_fu_2043_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond268_reg_2645 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_loop_index_phi_fu_987_p4 = empty_162_reg_2640;
    end else begin
        ap_phi_mux_loop_index_phi_fu_987_p4 = loop_index_reg_983;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            ap_phi_mux_pingpongm_1_phi_fu_1091_p4 = 1'd1;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            ap_phi_mux_pingpongm_1_phi_fu_1091_p4 = 1'd0;
        end else begin
            ap_phi_mux_pingpongm_1_phi_fu_1091_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_pingpongm_1_phi_fu_1091_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        beta_buffer_address0 = zext_ln654_fu_2082_p1;
    end else if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)))) begin
        beta_buffer_address0 = grp_intra_pingpong_wrapper_fu_1100_beta_buffer_address0;
    end else begin
        beta_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        beta_buffer_ce0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1)) | ((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0)))) begin
        beta_buffer_ce0 = grp_intra_pingpong_wrapper_fu_1100_beta_buffer_ce0;
    end else begin
        beta_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        beta_buffer_ce1 = 1'b1;
    end else begin
        beta_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln650_1_reg_2663_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        beta_buffer_we0 = 1'b1;
    end else begin
        beta_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln650_1_reg_2663_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        beta_buffer_we1 = 1'b1;
    end else begin
        beta_buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        beta_tmp_address0 = zext_ln650_fu_2048_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        beta_tmp_address0 = loop_index_cast4_fu_2023_p1;
    end else begin
        beta_tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        beta_tmp_ce0 = 1'b1;
    end else begin
        beta_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond268_reg_2645_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        beta_tmp_we0 = 1'b1;
    end else begin
        beta_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        cLoops_0_ack_out = 1'b1;
    end else begin
        cLoops_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1843_ap_start = 1'b1;
    end else begin
        grp_fu_1843_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1847_ap_start = 1'b1;
    end else begin
        grp_fu_1847_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_intra_pingpong_wrapper_fu_1100_p_read = TMP_M_next0_0_1_fu_760;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_intra_pingpong_wrapper_fu_1100_p_read = TMP_M_next1_0_1_fu_764;
        end else begin
            grp_intra_pingpong_wrapper_fu_1100_p_read = 'bx;
        end
    end else begin
        grp_intra_pingpong_wrapper_fu_1100_p_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_intra_pingpong_wrapper_fu_1100_p_read1 = TM_MIN_next0_0_1_fu_768;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_intra_pingpong_wrapper_fu_1100_p_read1 = TM_MIN_next1_0_1_fu_772;
        end else begin
            grp_intra_pingpong_wrapper_fu_1100_p_read1 = 'bx;
        end
    end else begin
        grp_intra_pingpong_wrapper_fu_1100_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_intra_pingpong_wrapper_fu_1100_pingpongx_offset = 1'd1;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_intra_pingpong_wrapper_fu_1100_pingpongx_offset = 1'd0;
        end else begin
            grp_intra_pingpong_wrapper_fu_1100_pingpongx_offset = 'bx;
        end
    end else begin
        grp_intra_pingpong_wrapper_fu_1100_pingpongx_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_TM_MIN = trunc_ln748_reg_2837;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_TM_MIN = trunc_ln748_1_reg_2832;
        end else begin
            grp_write_back_output_reorg_fu_1644_TM_MIN = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_TM_MIN = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_m = TMP_M_next1_0_1_fu_764;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_m = TMP_M_next0_0_1_fu_760;
        end else begin
            grp_write_back_output_reorg_fu_1644_m = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_m = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer10_q0 = output_buffer1_10_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer10_q0 = output_buffer_10_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer10_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer10_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer11_q0 = output_buffer1_11_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer11_q0 = output_buffer_11_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer11_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer11_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer12_q0 = output_buffer1_12_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer12_q0 = output_buffer_12_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer12_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer12_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer13_q0 = output_buffer1_13_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer13_q0 = output_buffer_13_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer13_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer13_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer14_q0 = output_buffer1_14_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer14_q0 = output_buffer_14_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer14_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer14_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer15_q0 = output_buffer1_15_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer15_q0 = output_buffer_15_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer15_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer15_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer16_q0 = output_buffer1_16_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer16_q0 = output_buffer_16_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer16_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer16_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer17_q0 = output_buffer1_17_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer17_q0 = output_buffer_17_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer17_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer17_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer18_q0 = output_buffer1_18_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer18_q0 = output_buffer_18_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer18_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer18_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer19_q0 = output_buffer1_19_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer19_q0 = output_buffer_19_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer19_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer19_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer1_q0 = output_buffer1_1_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer1_q0 = output_buffer_1_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer1_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer1_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer20_q0 = output_buffer1_20_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer20_q0 = output_buffer_20_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer20_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer20_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer21_q0 = output_buffer1_21_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer21_q0 = output_buffer_21_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer21_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer21_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer22_q0 = output_buffer1_22_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer22_q0 = output_buffer_22_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer22_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer22_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer23_q0 = output_buffer1_23_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer23_q0 = output_buffer_23_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer23_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer23_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer24_q0 = output_buffer1_24_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer24_q0 = output_buffer_24_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer24_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer24_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer25_q0 = output_buffer1_25_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer25_q0 = output_buffer_25_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer25_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer25_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer26_q0 = output_buffer1_26_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer26_q0 = output_buffer_26_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer26_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer26_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer27_q0 = output_buffer1_27_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer27_q0 = output_buffer_27_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer27_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer27_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer28_q0 = output_buffer1_28_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer28_q0 = output_buffer_28_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer28_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer28_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer29_q0 = output_buffer1_29_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer29_q0 = output_buffer_29_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer29_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer29_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer2_q0 = output_buffer1_2_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer2_q0 = output_buffer_2_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer2_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer2_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer30_q0 = output_buffer1_30_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer30_q0 = output_buffer_30_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer30_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer30_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer31_q0 = output_buffer1_31_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer31_q0 = output_buffer_31_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer31_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer31_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer3_q0 = output_buffer1_3_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer3_q0 = output_buffer_3_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer3_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer3_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer4_q0 = output_buffer1_4_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer4_q0 = output_buffer_4_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer4_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer4_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer5_q0 = output_buffer1_5_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer5_q0 = output_buffer_5_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer5_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer5_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer6_q0 = output_buffer1_6_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer6_q0 = output_buffer_6_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer6_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer6_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer7_q0 = output_buffer1_7_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer7_q0 = output_buffer_7_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer7_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer7_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer8_q0 = output_buffer1_8_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer8_q0 = output_buffer_8_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer8_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer8_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer9_q0 = output_buffer1_9_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer9_q0 = output_buffer_9_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer9_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer9_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer_q0 = output_buffer1_0_q0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            grp_write_back_output_reorg_fu_1644_output_buffer_q0 = output_buffer_0_q0;
        end else begin
            grp_write_back_output_reorg_fu_1644_output_buffer_q0 = 'bx;
        end
    end else begin
        grp_write_back_output_reorg_fu_1644_output_buffer_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        mLoops_0_ack_out = 1'b1;
    end else begin
        mLoops_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        nLoops_0_ack_out = 1'b1;
    end else begin
        nLoops_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_0_address0 = grp_write_back_output_reorg_fu_1644_output_buffer_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_0_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer_address0;
        end else begin
            output_buffer1_0_address0 = 'bx;
        end
    end else begin
        output_buffer1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_0_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_0_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer_ce0;
        end else begin
            output_buffer1_0_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_0_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer_we0;
    end else begin
        output_buffer1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_10_address0 = grp_write_back_output_reorg_fu_1644_output_buffer10_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_10_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer10_address0;
        end else begin
            output_buffer1_10_address0 = 'bx;
        end
    end else begin
        output_buffer1_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_10_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer10_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_10_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer10_ce0;
        end else begin
            output_buffer1_10_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_10_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer10_we0;
    end else begin
        output_buffer1_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_11_address0 = grp_write_back_output_reorg_fu_1644_output_buffer11_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_11_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer11_address0;
        end else begin
            output_buffer1_11_address0 = 'bx;
        end
    end else begin
        output_buffer1_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_11_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer11_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_11_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer11_ce0;
        end else begin
            output_buffer1_11_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_11_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer11_we0;
    end else begin
        output_buffer1_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_12_address0 = grp_write_back_output_reorg_fu_1644_output_buffer12_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_12_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer12_address0;
        end else begin
            output_buffer1_12_address0 = 'bx;
        end
    end else begin
        output_buffer1_12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_12_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer12_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_12_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer12_ce0;
        end else begin
            output_buffer1_12_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_12_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer12_we0;
    end else begin
        output_buffer1_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_13_address0 = grp_write_back_output_reorg_fu_1644_output_buffer13_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_13_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer13_address0;
        end else begin
            output_buffer1_13_address0 = 'bx;
        end
    end else begin
        output_buffer1_13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_13_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer13_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_13_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer13_ce0;
        end else begin
            output_buffer1_13_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_13_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer13_we0;
    end else begin
        output_buffer1_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_14_address0 = grp_write_back_output_reorg_fu_1644_output_buffer14_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_14_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer14_address0;
        end else begin
            output_buffer1_14_address0 = 'bx;
        end
    end else begin
        output_buffer1_14_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_14_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer14_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_14_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer14_ce0;
        end else begin
            output_buffer1_14_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_14_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer14_we0;
    end else begin
        output_buffer1_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_15_address0 = grp_write_back_output_reorg_fu_1644_output_buffer15_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_15_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer15_address0;
        end else begin
            output_buffer1_15_address0 = 'bx;
        end
    end else begin
        output_buffer1_15_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_15_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer15_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_15_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer15_ce0;
        end else begin
            output_buffer1_15_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_15_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer15_we0;
    end else begin
        output_buffer1_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_16_address0 = grp_write_back_output_reorg_fu_1644_output_buffer16_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_16_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer16_address0;
        end else begin
            output_buffer1_16_address0 = 'bx;
        end
    end else begin
        output_buffer1_16_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_16_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer16_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_16_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer16_ce0;
        end else begin
            output_buffer1_16_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_16_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer16_we0;
    end else begin
        output_buffer1_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_17_address0 = grp_write_back_output_reorg_fu_1644_output_buffer17_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_17_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer17_address0;
        end else begin
            output_buffer1_17_address0 = 'bx;
        end
    end else begin
        output_buffer1_17_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_17_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer17_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_17_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer17_ce0;
        end else begin
            output_buffer1_17_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_17_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer17_we0;
    end else begin
        output_buffer1_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_18_address0 = grp_write_back_output_reorg_fu_1644_output_buffer18_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_18_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer18_address0;
        end else begin
            output_buffer1_18_address0 = 'bx;
        end
    end else begin
        output_buffer1_18_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_18_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer18_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_18_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer18_ce0;
        end else begin
            output_buffer1_18_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_18_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer18_we0;
    end else begin
        output_buffer1_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_19_address0 = grp_write_back_output_reorg_fu_1644_output_buffer19_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_19_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer19_address0;
        end else begin
            output_buffer1_19_address0 = 'bx;
        end
    end else begin
        output_buffer1_19_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_19_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer19_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_19_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer19_ce0;
        end else begin
            output_buffer1_19_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_19_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer19_we0;
    end else begin
        output_buffer1_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_1_address0 = grp_write_back_output_reorg_fu_1644_output_buffer1_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_1_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer1_address0;
        end else begin
            output_buffer1_1_address0 = 'bx;
        end
    end else begin
        output_buffer1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_1_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer1_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_1_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer1_ce0;
        end else begin
            output_buffer1_1_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_1_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer1_we0;
    end else begin
        output_buffer1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_20_address0 = grp_write_back_output_reorg_fu_1644_output_buffer20_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_20_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer20_address0;
        end else begin
            output_buffer1_20_address0 = 'bx;
        end
    end else begin
        output_buffer1_20_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_20_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer20_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_20_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer20_ce0;
        end else begin
            output_buffer1_20_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_20_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer20_we0;
    end else begin
        output_buffer1_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_21_address0 = grp_write_back_output_reorg_fu_1644_output_buffer21_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_21_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer21_address0;
        end else begin
            output_buffer1_21_address0 = 'bx;
        end
    end else begin
        output_buffer1_21_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_21_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer21_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_21_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer21_ce0;
        end else begin
            output_buffer1_21_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_21_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer21_we0;
    end else begin
        output_buffer1_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_22_address0 = grp_write_back_output_reorg_fu_1644_output_buffer22_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_22_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer22_address0;
        end else begin
            output_buffer1_22_address0 = 'bx;
        end
    end else begin
        output_buffer1_22_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_22_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer22_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_22_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer22_ce0;
        end else begin
            output_buffer1_22_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_22_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer22_we0;
    end else begin
        output_buffer1_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_23_address0 = grp_write_back_output_reorg_fu_1644_output_buffer23_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_23_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer23_address0;
        end else begin
            output_buffer1_23_address0 = 'bx;
        end
    end else begin
        output_buffer1_23_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_23_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer23_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_23_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer23_ce0;
        end else begin
            output_buffer1_23_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_23_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer23_we0;
    end else begin
        output_buffer1_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_24_address0 = grp_write_back_output_reorg_fu_1644_output_buffer24_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_24_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer24_address0;
        end else begin
            output_buffer1_24_address0 = 'bx;
        end
    end else begin
        output_buffer1_24_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_24_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer24_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_24_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer24_ce0;
        end else begin
            output_buffer1_24_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_24_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer24_we0;
    end else begin
        output_buffer1_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_25_address0 = grp_write_back_output_reorg_fu_1644_output_buffer25_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_25_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer25_address0;
        end else begin
            output_buffer1_25_address0 = 'bx;
        end
    end else begin
        output_buffer1_25_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_25_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer25_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_25_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer25_ce0;
        end else begin
            output_buffer1_25_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_25_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer25_we0;
    end else begin
        output_buffer1_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_26_address0 = grp_write_back_output_reorg_fu_1644_output_buffer26_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_26_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer26_address0;
        end else begin
            output_buffer1_26_address0 = 'bx;
        end
    end else begin
        output_buffer1_26_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_26_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer26_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_26_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer26_ce0;
        end else begin
            output_buffer1_26_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_26_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer26_we0;
    end else begin
        output_buffer1_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_27_address0 = grp_write_back_output_reorg_fu_1644_output_buffer27_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_27_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer27_address0;
        end else begin
            output_buffer1_27_address0 = 'bx;
        end
    end else begin
        output_buffer1_27_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_27_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer27_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_27_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer27_ce0;
        end else begin
            output_buffer1_27_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_27_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer27_we0;
    end else begin
        output_buffer1_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_28_address0 = grp_write_back_output_reorg_fu_1644_output_buffer28_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_28_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer28_address0;
        end else begin
            output_buffer1_28_address0 = 'bx;
        end
    end else begin
        output_buffer1_28_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_28_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer28_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_28_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer28_ce0;
        end else begin
            output_buffer1_28_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_28_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer28_we0;
    end else begin
        output_buffer1_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_29_address0 = grp_write_back_output_reorg_fu_1644_output_buffer29_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_29_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer29_address0;
        end else begin
            output_buffer1_29_address0 = 'bx;
        end
    end else begin
        output_buffer1_29_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_29_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer29_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_29_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer29_ce0;
        end else begin
            output_buffer1_29_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_29_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer29_we0;
    end else begin
        output_buffer1_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_2_address0 = grp_write_back_output_reorg_fu_1644_output_buffer2_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_2_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer2_address0;
        end else begin
            output_buffer1_2_address0 = 'bx;
        end
    end else begin
        output_buffer1_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_2_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer2_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_2_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer2_ce0;
        end else begin
            output_buffer1_2_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_2_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer2_we0;
    end else begin
        output_buffer1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_30_address0 = grp_write_back_output_reorg_fu_1644_output_buffer30_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_30_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer30_address0;
        end else begin
            output_buffer1_30_address0 = 'bx;
        end
    end else begin
        output_buffer1_30_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_30_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer30_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_30_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer30_ce0;
        end else begin
            output_buffer1_30_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_30_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer30_we0;
    end else begin
        output_buffer1_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_31_address0 = grp_write_back_output_reorg_fu_1644_output_buffer31_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_31_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer31_address0;
        end else begin
            output_buffer1_31_address0 = 'bx;
        end
    end else begin
        output_buffer1_31_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_31_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer31_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_31_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer31_ce0;
        end else begin
            output_buffer1_31_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_31_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer31_we0;
    end else begin
        output_buffer1_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_3_address0 = grp_write_back_output_reorg_fu_1644_output_buffer3_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_3_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer3_address0;
        end else begin
            output_buffer1_3_address0 = 'bx;
        end
    end else begin
        output_buffer1_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_3_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer3_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_3_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer3_ce0;
        end else begin
            output_buffer1_3_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_3_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer3_we0;
    end else begin
        output_buffer1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_4_address0 = grp_write_back_output_reorg_fu_1644_output_buffer4_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_4_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer4_address0;
        end else begin
            output_buffer1_4_address0 = 'bx;
        end
    end else begin
        output_buffer1_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_4_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer4_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_4_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer4_ce0;
        end else begin
            output_buffer1_4_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_4_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer4_we0;
    end else begin
        output_buffer1_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_5_address0 = grp_write_back_output_reorg_fu_1644_output_buffer5_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_5_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer5_address0;
        end else begin
            output_buffer1_5_address0 = 'bx;
        end
    end else begin
        output_buffer1_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_5_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer5_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_5_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer5_ce0;
        end else begin
            output_buffer1_5_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_5_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer5_we0;
    end else begin
        output_buffer1_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_6_address0 = grp_write_back_output_reorg_fu_1644_output_buffer6_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_6_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer6_address0;
        end else begin
            output_buffer1_6_address0 = 'bx;
        end
    end else begin
        output_buffer1_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_6_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer6_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_6_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer6_ce0;
        end else begin
            output_buffer1_6_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_6_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer6_we0;
    end else begin
        output_buffer1_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_7_address0 = grp_write_back_output_reorg_fu_1644_output_buffer7_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_7_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer7_address0;
        end else begin
            output_buffer1_7_address0 = 'bx;
        end
    end else begin
        output_buffer1_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_7_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer7_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_7_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer7_ce0;
        end else begin
            output_buffer1_7_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_7_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer7_we0;
    end else begin
        output_buffer1_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_8_address0 = grp_write_back_output_reorg_fu_1644_output_buffer8_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_8_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer8_address0;
        end else begin
            output_buffer1_8_address0 = 'bx;
        end
    end else begin
        output_buffer1_8_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_8_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer8_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_8_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer8_ce0;
        end else begin
            output_buffer1_8_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_8_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer8_we0;
    end else begin
        output_buffer1_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_9_address0 = grp_write_back_output_reorg_fu_1644_output_buffer9_address0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_9_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer9_address0;
        end else begin
            output_buffer1_9_address0 = 'bx;
        end
    end else begin
        output_buffer1_9_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer1_9_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer9_ce0;
        end else if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer1_9_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer9_ce0;
        end else begin
            output_buffer1_9_ce0 = 1'b0;
        end
    end else begin
        output_buffer1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd0))) begin
        output_buffer1_9_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer9_we0;
    end else begin
        output_buffer1_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_0_address0 = grp_write_back_output_reorg_fu_1644_output_buffer_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_0_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer_address0;
        end else begin
            output_buffer_0_address0 = 'bx;
        end
    end else begin
        output_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_0_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_0_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer_ce0;
        end else begin
            output_buffer_0_ce0 = 1'b0;
        end
    end else begin
        output_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_0_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer_we0;
    end else begin
        output_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_10_address0 = grp_write_back_output_reorg_fu_1644_output_buffer10_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_10_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer10_address0;
        end else begin
            output_buffer_10_address0 = 'bx;
        end
    end else begin
        output_buffer_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_10_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer10_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_10_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer10_ce0;
        end else begin
            output_buffer_10_ce0 = 1'b0;
        end
    end else begin
        output_buffer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_10_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer10_we0;
    end else begin
        output_buffer_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_11_address0 = grp_write_back_output_reorg_fu_1644_output_buffer11_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_11_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer11_address0;
        end else begin
            output_buffer_11_address0 = 'bx;
        end
    end else begin
        output_buffer_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_11_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer11_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_11_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer11_ce0;
        end else begin
            output_buffer_11_ce0 = 1'b0;
        end
    end else begin
        output_buffer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_11_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer11_we0;
    end else begin
        output_buffer_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_12_address0 = grp_write_back_output_reorg_fu_1644_output_buffer12_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_12_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer12_address0;
        end else begin
            output_buffer_12_address0 = 'bx;
        end
    end else begin
        output_buffer_12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_12_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer12_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_12_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer12_ce0;
        end else begin
            output_buffer_12_ce0 = 1'b0;
        end
    end else begin
        output_buffer_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_12_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer12_we0;
    end else begin
        output_buffer_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_13_address0 = grp_write_back_output_reorg_fu_1644_output_buffer13_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_13_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer13_address0;
        end else begin
            output_buffer_13_address0 = 'bx;
        end
    end else begin
        output_buffer_13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_13_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer13_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_13_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer13_ce0;
        end else begin
            output_buffer_13_ce0 = 1'b0;
        end
    end else begin
        output_buffer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_13_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer13_we0;
    end else begin
        output_buffer_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_14_address0 = grp_write_back_output_reorg_fu_1644_output_buffer14_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_14_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer14_address0;
        end else begin
            output_buffer_14_address0 = 'bx;
        end
    end else begin
        output_buffer_14_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_14_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer14_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_14_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer14_ce0;
        end else begin
            output_buffer_14_ce0 = 1'b0;
        end
    end else begin
        output_buffer_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_14_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer14_we0;
    end else begin
        output_buffer_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_15_address0 = grp_write_back_output_reorg_fu_1644_output_buffer15_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_15_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer15_address0;
        end else begin
            output_buffer_15_address0 = 'bx;
        end
    end else begin
        output_buffer_15_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_15_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer15_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_15_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer15_ce0;
        end else begin
            output_buffer_15_ce0 = 1'b0;
        end
    end else begin
        output_buffer_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_15_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer15_we0;
    end else begin
        output_buffer_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_16_address0 = grp_write_back_output_reorg_fu_1644_output_buffer16_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_16_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer16_address0;
        end else begin
            output_buffer_16_address0 = 'bx;
        end
    end else begin
        output_buffer_16_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_16_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer16_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_16_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer16_ce0;
        end else begin
            output_buffer_16_ce0 = 1'b0;
        end
    end else begin
        output_buffer_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_16_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer16_we0;
    end else begin
        output_buffer_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_17_address0 = grp_write_back_output_reorg_fu_1644_output_buffer17_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_17_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer17_address0;
        end else begin
            output_buffer_17_address0 = 'bx;
        end
    end else begin
        output_buffer_17_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_17_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer17_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_17_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer17_ce0;
        end else begin
            output_buffer_17_ce0 = 1'b0;
        end
    end else begin
        output_buffer_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_17_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer17_we0;
    end else begin
        output_buffer_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_18_address0 = grp_write_back_output_reorg_fu_1644_output_buffer18_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_18_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer18_address0;
        end else begin
            output_buffer_18_address0 = 'bx;
        end
    end else begin
        output_buffer_18_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_18_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer18_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_18_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer18_ce0;
        end else begin
            output_buffer_18_ce0 = 1'b0;
        end
    end else begin
        output_buffer_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_18_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer18_we0;
    end else begin
        output_buffer_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_19_address0 = grp_write_back_output_reorg_fu_1644_output_buffer19_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_19_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer19_address0;
        end else begin
            output_buffer_19_address0 = 'bx;
        end
    end else begin
        output_buffer_19_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_19_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer19_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_19_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer19_ce0;
        end else begin
            output_buffer_19_ce0 = 1'b0;
        end
    end else begin
        output_buffer_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_19_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer19_we0;
    end else begin
        output_buffer_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_1_address0 = grp_write_back_output_reorg_fu_1644_output_buffer1_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_1_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer1_address0;
        end else begin
            output_buffer_1_address0 = 'bx;
        end
    end else begin
        output_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_1_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer1_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_1_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer1_ce0;
        end else begin
            output_buffer_1_ce0 = 1'b0;
        end
    end else begin
        output_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_1_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer1_we0;
    end else begin
        output_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_20_address0 = grp_write_back_output_reorg_fu_1644_output_buffer20_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_20_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer20_address0;
        end else begin
            output_buffer_20_address0 = 'bx;
        end
    end else begin
        output_buffer_20_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_20_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer20_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_20_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer20_ce0;
        end else begin
            output_buffer_20_ce0 = 1'b0;
        end
    end else begin
        output_buffer_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_20_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer20_we0;
    end else begin
        output_buffer_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_21_address0 = grp_write_back_output_reorg_fu_1644_output_buffer21_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_21_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer21_address0;
        end else begin
            output_buffer_21_address0 = 'bx;
        end
    end else begin
        output_buffer_21_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_21_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer21_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_21_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer21_ce0;
        end else begin
            output_buffer_21_ce0 = 1'b0;
        end
    end else begin
        output_buffer_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_21_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer21_we0;
    end else begin
        output_buffer_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_22_address0 = grp_write_back_output_reorg_fu_1644_output_buffer22_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_22_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer22_address0;
        end else begin
            output_buffer_22_address0 = 'bx;
        end
    end else begin
        output_buffer_22_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_22_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer22_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_22_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer22_ce0;
        end else begin
            output_buffer_22_ce0 = 1'b0;
        end
    end else begin
        output_buffer_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_22_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer22_we0;
    end else begin
        output_buffer_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_23_address0 = grp_write_back_output_reorg_fu_1644_output_buffer23_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_23_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer23_address0;
        end else begin
            output_buffer_23_address0 = 'bx;
        end
    end else begin
        output_buffer_23_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_23_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer23_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_23_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer23_ce0;
        end else begin
            output_buffer_23_ce0 = 1'b0;
        end
    end else begin
        output_buffer_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_23_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer23_we0;
    end else begin
        output_buffer_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_24_address0 = grp_write_back_output_reorg_fu_1644_output_buffer24_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_24_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer24_address0;
        end else begin
            output_buffer_24_address0 = 'bx;
        end
    end else begin
        output_buffer_24_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_24_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer24_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_24_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer24_ce0;
        end else begin
            output_buffer_24_ce0 = 1'b0;
        end
    end else begin
        output_buffer_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_24_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer24_we0;
    end else begin
        output_buffer_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_25_address0 = grp_write_back_output_reorg_fu_1644_output_buffer25_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_25_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer25_address0;
        end else begin
            output_buffer_25_address0 = 'bx;
        end
    end else begin
        output_buffer_25_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_25_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer25_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_25_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer25_ce0;
        end else begin
            output_buffer_25_ce0 = 1'b0;
        end
    end else begin
        output_buffer_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_25_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer25_we0;
    end else begin
        output_buffer_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_26_address0 = grp_write_back_output_reorg_fu_1644_output_buffer26_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_26_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer26_address0;
        end else begin
            output_buffer_26_address0 = 'bx;
        end
    end else begin
        output_buffer_26_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_26_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer26_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_26_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer26_ce0;
        end else begin
            output_buffer_26_ce0 = 1'b0;
        end
    end else begin
        output_buffer_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_26_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer26_we0;
    end else begin
        output_buffer_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_27_address0 = grp_write_back_output_reorg_fu_1644_output_buffer27_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_27_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer27_address0;
        end else begin
            output_buffer_27_address0 = 'bx;
        end
    end else begin
        output_buffer_27_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_27_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer27_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_27_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer27_ce0;
        end else begin
            output_buffer_27_ce0 = 1'b0;
        end
    end else begin
        output_buffer_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_27_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer27_we0;
    end else begin
        output_buffer_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_28_address0 = grp_write_back_output_reorg_fu_1644_output_buffer28_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_28_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer28_address0;
        end else begin
            output_buffer_28_address0 = 'bx;
        end
    end else begin
        output_buffer_28_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_28_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer28_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_28_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer28_ce0;
        end else begin
            output_buffer_28_ce0 = 1'b0;
        end
    end else begin
        output_buffer_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_28_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer28_we0;
    end else begin
        output_buffer_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_29_address0 = grp_write_back_output_reorg_fu_1644_output_buffer29_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_29_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer29_address0;
        end else begin
            output_buffer_29_address0 = 'bx;
        end
    end else begin
        output_buffer_29_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_29_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer29_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_29_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer29_ce0;
        end else begin
            output_buffer_29_ce0 = 1'b0;
        end
    end else begin
        output_buffer_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_29_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer29_we0;
    end else begin
        output_buffer_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_2_address0 = grp_write_back_output_reorg_fu_1644_output_buffer2_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_2_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer2_address0;
        end else begin
            output_buffer_2_address0 = 'bx;
        end
    end else begin
        output_buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_2_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer2_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_2_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer2_ce0;
        end else begin
            output_buffer_2_ce0 = 1'b0;
        end
    end else begin
        output_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_2_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer2_we0;
    end else begin
        output_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_30_address0 = grp_write_back_output_reorg_fu_1644_output_buffer30_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_30_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer30_address0;
        end else begin
            output_buffer_30_address0 = 'bx;
        end
    end else begin
        output_buffer_30_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_30_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer30_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_30_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer30_ce0;
        end else begin
            output_buffer_30_ce0 = 1'b0;
        end
    end else begin
        output_buffer_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_30_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer30_we0;
    end else begin
        output_buffer_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_31_address0 = grp_write_back_output_reorg_fu_1644_output_buffer31_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_31_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer31_address0;
        end else begin
            output_buffer_31_address0 = 'bx;
        end
    end else begin
        output_buffer_31_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_31_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer31_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_31_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer31_ce0;
        end else begin
            output_buffer_31_ce0 = 1'b0;
        end
    end else begin
        output_buffer_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_31_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer31_we0;
    end else begin
        output_buffer_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_3_address0 = grp_write_back_output_reorg_fu_1644_output_buffer3_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_3_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer3_address0;
        end else begin
            output_buffer_3_address0 = 'bx;
        end
    end else begin
        output_buffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_3_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer3_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_3_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer3_ce0;
        end else begin
            output_buffer_3_ce0 = 1'b0;
        end
    end else begin
        output_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_3_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer3_we0;
    end else begin
        output_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_4_address0 = grp_write_back_output_reorg_fu_1644_output_buffer4_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_4_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer4_address0;
        end else begin
            output_buffer_4_address0 = 'bx;
        end
    end else begin
        output_buffer_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_4_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer4_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_4_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer4_ce0;
        end else begin
            output_buffer_4_ce0 = 1'b0;
        end
    end else begin
        output_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_4_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer4_we0;
    end else begin
        output_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_5_address0 = grp_write_back_output_reorg_fu_1644_output_buffer5_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_5_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer5_address0;
        end else begin
            output_buffer_5_address0 = 'bx;
        end
    end else begin
        output_buffer_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_5_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer5_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_5_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer5_ce0;
        end else begin
            output_buffer_5_ce0 = 1'b0;
        end
    end else begin
        output_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_5_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer5_we0;
    end else begin
        output_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_6_address0 = grp_write_back_output_reorg_fu_1644_output_buffer6_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_6_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer6_address0;
        end else begin
            output_buffer_6_address0 = 'bx;
        end
    end else begin
        output_buffer_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_6_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer6_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_6_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer6_ce0;
        end else begin
            output_buffer_6_ce0 = 1'b0;
        end
    end else begin
        output_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_6_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer6_we0;
    end else begin
        output_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_7_address0 = grp_write_back_output_reorg_fu_1644_output_buffer7_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_7_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer7_address0;
        end else begin
            output_buffer_7_address0 = 'bx;
        end
    end else begin
        output_buffer_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_7_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer7_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_7_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer7_ce0;
        end else begin
            output_buffer_7_ce0 = 1'b0;
        end
    end else begin
        output_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_7_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer7_we0;
    end else begin
        output_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_8_address0 = grp_write_back_output_reorg_fu_1644_output_buffer8_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_8_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer8_address0;
        end else begin
            output_buffer_8_address0 = 'bx;
        end
    end else begin
        output_buffer_8_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_8_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer8_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_8_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer8_ce0;
        end else begin
            output_buffer_8_ce0 = 1'b0;
        end
    end else begin
        output_buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_8_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer8_we0;
    end else begin
        output_buffer_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_9_address0 = grp_write_back_output_reorg_fu_1644_output_buffer9_address0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_9_address0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer9_address0;
        end else begin
            output_buffer_9_address0 = 'bx;
        end
    end else begin
        output_buffer_9_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        if ((pingpongm_reg_1052 == 1'd0)) begin
            output_buffer_9_ce0 = grp_write_back_output_reorg_fu_1644_output_buffer9_ce0;
        end else if ((pingpongm_reg_1052 == 1'd1)) begin
            output_buffer_9_ce0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer9_ce0;
        end else begin
            output_buffer_9_ce0 = 1'b0;
        end
    end else begin
        output_buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (pingpongm_reg_1052 == 1'd1))) begin
        output_buffer_9_we0 = grp_intra_pingpong_wrapper_fu_1100_output_buffer9_we0;
    end else begin
        output_buffer_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0)))) begin
        rLoops_0_ack_out = 1'b1;
    end else begin
        rLoops_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln738_fu_1919_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln648_fu_1984_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == DATA_BUS2_ARREADY) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond268_fu_2018_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond268_fu_2018_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (icmp_ln650_fu_2028_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln650_1_fu_2043_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln650_1_fu_2043_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (icmp_ln741_fu_2102_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln744_fu_2136_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (icmp_ln748_fu_2175_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (1'b0 == ap_block_state69_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign InterSubBeta_fu_1914_p2 = (32'd19 - BetaQ_read_reg_2338);

assign InterSubOutput_fu_1909_p2 = (32'd19 - OutputQ_read_reg_2348);

assign MneMLoopsaddOne_fu_2202_p2 = ((zext_ln748_fu_2171_p1 != add_ln707_1_reg_2598) ? 1'b1 : 1'b0);

assign MneOne_fu_2191_p2 = ((m_reg_1076 != 31'd1) ? 1'b1 : 1'b0);

assign MneZero_fu_2185_p2 = ((m_reg_1076 != 31'd0) ? 1'b1 : 1'b0);

assign MnemLoops_fu_2197_p2 = ((zext_ln748_fu_2171_p1 != mLoops_read_reg_2380) ? 1'b1 : 1'b0);

assign NUM_fu_1976_p3 = ((tmp_fu_1929_p3[0:0] == 1'b1) ? sub_ln647_fu_1956_p2 : zext_ln647_1_fu_1972_p1);

assign TC_MIN_fu_2155_p3 = ((icmp_ln746_fu_2151_p2[0:0] == 1'b1) ? TC_read_reg_2387 : sub_ln746_reg_2750);

assign TMP_C_1_fu_2242_p2 = (TMP_C_reg_1029 + TC_read_reg_2387);

assign TMP_M_1_fu_2315_p2 = (TMP_M_reg_1064 + TM_read_reg_2406);

assign TMP_R_1_fu_2146_p2 = (TMP_R_reg_1006 + TR_read_reg_2394);

assign TM_MIN_fu_2251_p3 = ((icmp_ln750_fu_2247_p2[0:0] == 1'b1) ? TM_read_reg_2406 : sub_ln750_reg_2779);

assign TR_MIN_fu_2116_p3 = ((icmp_ln743_fu_2112_p2[0:0] == 1'b1) ? TR_read_reg_2394 : sub_ln743_reg_2726);

assign WeightAddInputSubInter_fu_1838_p2 = (add_ln710_fu_1833_p2 + InputQ_read_reg_2353);

assign add_ln647_fu_1924_p2 = (OutFM_num_read_reg_2449 + 32'd1);

assign add_ln650_fu_2033_p2 = (x_reg_995 + 10'd1);

assign add_ln699_2_fu_1873_p2 = (trunc_ln699_reg_2555 + 9'd1);

assign add_ln699_fu_1813_p2 = (sub_ln699_fu_1809_p2 + shl_ln699_fu_1804_p2);

assign add_ln700_fu_1823_p2 = (sub_ln700_fu_1819_p2 + shl_ln699_fu_1804_p2);

assign add_ln707_1_fu_1896_p2 = (mLoops_read_reg_2380 + 32'd1);

assign add_ln707_fu_1891_p2 = (mLoops_read_reg_2380 + 32'd2);

assign add_ln710_fu_1833_p2 = ($signed(WeightQ_read_reg_2343) + $signed(32'd4294967277));

assign and_ln756_fu_2218_p2 = (MneZero_fu_2185_p2 & MneMLoopsaddOne_fu_2202_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == DATA_BUS2_RVALID) & (exitcond268_reg_2645 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == DATA_BUS2_RVALID) & (exitcond268_reg_2645 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_pp0_stage0_iter1 = ((1'b0 == DATA_BUS2_RVALID) & (exitcond268_reg_2645 == 1'd0));
end

assign ap_block_state56_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state69_on_subcall_done = (((grp_write_back_output_reorg_fu_1644_ap_done == 1'b0) & (pingpongm_reg_1052 == 1'd1)) | ((grp_write_back_output_reorg_fu_1644_ap_done == 1'b0) & (pingpongm_reg_1052 == 1'd0)) | ((grp_intra_pingpong_wrapper_fu_1100_ap_done == 1'b0) & (pingpongm_reg_1052 == 1'd1)) | ((grp_intra_pingpong_wrapper_fu_1100_ap_done == 1'b0) & (pingpongm_reg_1052 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign beta_buffer_address1 = zext_ln653_fu_2073_p1;

assign c_1_fu_2126_p2 = (c_reg_1041 + 31'd1);

assign empty_153_fu_1772_p1 = Kernel_stride_0_data_reg[1:0];

assign empty_154_fu_1776_p1 = Kernel_size_0_data_reg[1:0];

assign empty_155_fu_1780_p0 = Input_h_0_data_reg;

assign empty_155_fu_1780_p1 = empty_155_fu_1780_p0[8:0];

assign empty_156_fu_1784_p1 = Kernel_size_0_data_reg[3:0];

assign empty_158_fu_1792_p1 = Kernel_size_0_data_reg[5:0];

assign empty_159_fu_1796_p1 = Kernel_stride_0_data_reg[5:0];

assign empty_162_fu_2008_p2 = (ap_phi_mux_loop_index_phi_fu_987_p4 + 10'd1);

assign empty_fu_1768_p1 = Padding_0_data_reg[0:0];

assign exitcond268_fu_2018_p2 = ((loop_index_cast24_fu_2014_p1 == NUM_reg_2622) ? 1'b1 : 1'b0);

assign grp_fu_2320_p0 = TR_0_data_reg[5:0];

assign grp_fu_2320_p1 = 6'd63;

assign grp_fu_2329_p0 = TC_0_data_reg[5:0];

assign grp_fu_2329_p1 = 6'd63;

assign grp_intra_pingpong_wrapper_fu_1100_ap_start = grp_intra_pingpong_wrapper_fu_1100_ap_start_reg;

assign grp_write_back_output_reorg_fu_1644_ap_start = grp_write_back_output_reorg_fu_1644_ap_start_reg;

assign icmp_ln648_fu_1984_p2 = ((NUM_reg_2622 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln650_1_fu_2043_p2 = ((zext_ln650_1_fu_2039_p1 == NUM_reg_2622) ? 1'b1 : 1'b0);

assign icmp_ln650_fu_2028_p2 = (($signed(OutFM_num_read_reg_2449) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln707_fu_1886_p2 = ((LayerType_read_reg_2358 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln738_fu_1919_p2 = ((LayerType_read_reg_2358 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln741_fu_2102_p2 = (($signed(zext_ln741_fu_2098_p1) < $signed(rLoops_read_reg_2370)) ? 1'b1 : 1'b0);

assign icmp_ln743_fu_2112_p2 = (($signed(sub_ln743_reg_2726) > $signed(TR_read_reg_2394)) ? 1'b1 : 1'b0);

assign icmp_ln744_fu_2136_p2 = (($signed(zext_ln744_fu_2132_p1) < $signed(cLoops_read_reg_2365)) ? 1'b1 : 1'b0);

assign icmp_ln746_fu_2151_p2 = (($signed(sub_ln746_reg_2750) > $signed(TC_read_reg_2387)) ? 1'b1 : 1'b0);

assign icmp_ln748_fu_2175_p2 = (($signed(zext_ln748_fu_2171_p1) < $signed(mLoops_bound_reg_2603)) ? 1'b1 : 1'b0);

assign icmp_ln750_fu_2247_p2 = (($signed(sub_ln750_reg_2779) > $signed(TM_read_reg_2406)) ? 1'b1 : 1'b0);

assign input_flag_fu_2212_p2 = (or_ln755_fu_2207_p2 & MnemLoops_fu_2197_p2);

assign loop_index_cast24_fu_2014_p1 = ap_phi_mux_loop_index_phi_fu_987_p4;

assign loop_index_cast4_fu_2023_p1 = loop_index_reg_983_pp0_iter1_reg;

assign lshr_ln647_2_fu_1962_p4 = {{add_ln647_fu_1924_p2[31:1]}};

assign mLoops_bound_fu_1901_p3 = ((icmp_ln707_fu_1886_p2[0:0] == 1'b1) ? add_ln707_fu_1891_p2 : add_ln707_1_fu_1896_p2);

assign m_1_fu_2165_p2 = (m_reg_1076 + 31'd1);

assign or_ln654_fu_2077_p2 = (shl_ln653_reg_2672_pp1_iter1_reg | 10'd1);

assign or_ln755_fu_2207_p2 = (xor_ln755_reg_2712 | MneMLoopsaddOne_fu_2202_p2);

assign or_ln757_fu_2231_p2 = (xor_ln755_reg_2712 | MneOne_fu_2191_p2);

assign output_h_fu_1864_p2 = (sdiv_ln700_reg_2560 + 32'd1);

assign output_w_fu_1859_p2 = (sdiv_ln699_reg_2550 + 32'd1);

assign p_cast_cast_fu_1998_p1 = $signed(p_cast_fu_1989_p4);

assign p_cast_fu_1989_p4 = {{Beta_read_reg_2462[63:2]}};

assign process_flag_fu_2224_p3 = ((icmp_ln707_reg_2592[0:0] == 1'b1) ? and_ln756_fu_2218_p2 : MnemLoops_fu_2197_p2);

assign r_4_fu_2092_p2 = (r_reg_1018 + 31'd1);

assign shl_ln653_fu_2053_p2 = x_reg_995 << 10'd1;

assign shl_ln699_fu_1804_p2 = Padding_read_reg_2419 << 32'd1;

assign sub_ln647_fu_1956_p2 = (32'd0 - zext_ln647_fu_1952_p1);

assign sub_ln699_fu_1809_p2 = (Input_w_read_reg_2430 - Kernel_size_read_reg_2443);

assign sub_ln700_fu_1819_p2 = ($signed(Input_h_read_reg_2424) - $signed(Kernel_size_read_reg_2443));

assign sub_ln743_fu_2107_p2 = ($signed(output_h_reg_2571) - $signed(TMP_R_reg_1006));

assign sub_ln746_fu_2141_p2 = ($signed(output_w_reg_2565) - $signed(TMP_C_reg_1029));

assign sub_ln750_fu_2180_p2 = (OutFM_num_read_reg_2449 - TMP_M_reg_1064);

assign tmp_fu_1929_p3 = add_ln647_fu_1924_p2[32'd31];

assign trunc_ln647_1_fu_1937_p4 = {{OutFM_num_read_reg_2449[31:1]}};

assign trunc_ln653_fu_2059_p1 = beta_tmp_q0[15:0];

assign trunc_ln699_fu_1855_p1 = grp_fu_1843_p2[8:0];

assign trunc_ln701_fu_1878_p1 = grp_fu_1869_p2[17:0];

assign trunc_ln704_fu_1851_p1 = grp_fu_1829_p2[17:0];

assign trunc_ln729_1_fu_2161_p1 = TC_MIN_fu_2155_p3[5:0];

assign trunc_ln729_fu_2122_p1 = TR_MIN_fu_2116_p3[5:0];

assign trunc_ln741_fu_2262_p1 = TMP_R_reg_1006[8:0];

assign trunc_ln744_fu_2257_p1 = TMP_C_reg_1029[8:0];

assign trunc_ln748_1_fu_2285_p1 = TM_MIN_next0_0_1_fu_768[5:0];

assign trunc_ln748_fu_2290_p1 = TM_MIN_next1_0_1_fu_772[5:0];

assign write_flag_fu_2236_p2 = (or_ln757_fu_2231_p2 & MneZero_fu_2185_p2);

assign xor_ln647_fu_1946_p2 = (trunc_ln647_1_fu_1937_p4 ^ 31'd2147483647);

assign xor_ln755_fu_2087_p2 = (icmp_ln707_reg_2592 ^ 1'd1);

assign zext_ln647_1_fu_1972_p1 = lshr_ln647_2_fu_1962_p4;

assign zext_ln647_fu_1952_p1 = xor_ln647_fu_1946_p2;

assign zext_ln650_1_fu_2039_p1 = x_reg_995;

assign zext_ln650_fu_2048_p1 = x_reg_995;

assign zext_ln653_fu_2073_p1 = shl_ln653_reg_2672_pp1_iter1_reg;

assign zext_ln654_fu_2082_p1 = or_ln654_fu_2077_p2;

assign zext_ln741_fu_2098_p1 = r_reg_1018;

assign zext_ln744_fu_2132_p1 = c_reg_1041;

assign zext_ln748_fu_2171_p1 = m_reg_1076;

always @ (posedge ap_clk) begin
    shl_ln653_reg_2672[0] <= 1'b0;
    shl_ln653_reg_2672_pp1_iter1_reg[0] <= 1'b0;
end

endmodule //YOLO2_FPGA
